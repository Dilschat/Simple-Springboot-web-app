// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: biometadata.proto

package com.example.simple_biosamples_client.models.ga4ghmetadata;

public final class Biometadata {
    private Biometadata() {
    }

    public static void registerAllExtensions(
            com.google.protobuf.ExtensionRegistryLite registry) {
    }

    public static void registerAllExtensions(
            com.google.protobuf.ExtensionRegistry registry) {
        registerAllExtensions(
                (com.google.protobuf.ExtensionRegistryLite) registry);
    }

    public interface IndividualOrBuilder extends
            // @@protoc_insertion_point(interface_extends:Individual)
            com.google.protobuf.MessageOrBuilder {

        /**
         * <pre>
         * The Individual's :ref:`id &lt;apidesign_object_ids&gt;`. This is unique in the
         * context of the server instance.
         * </pre>
         *
         * <code>string id = 1;</code>
         */
        String getId();

        /**
         * <pre>
         * The Individual's :ref:`id &lt;apidesign_object_ids&gt;`. This is unique in the
         * context of the server instance.
         * </pre>
         *
         * <code>string id = 1;</code>
         */
        com.google.protobuf.ByteString
        getIdBytes();

        /**
         * <pre>
         * The ID of the dataset this Individual belongs to.
         * </pre>
         *
         * <code>string dataset_id = 2;</code>
         */
        String getDatasetId();

        /**
         * <pre>
         * The ID of the dataset this Individual belongs to.
         * </pre>
         *
         * <code>string dataset_id = 2;</code>
         */
        com.google.protobuf.ByteString
        getDatasetIdBytes();

        /**
         * <pre>
         * The Individual's name. This is a label or symbolic identifier for the individual.
         * </pre>
         *
         * <code>string name = 3;</code>
         */
        String getName();

        /**
         * <pre>
         * The Individual's name. This is a label or symbolic identifier for the individual.
         * </pre>
         *
         * <code>string name = 3;</code>
         */
        com.google.protobuf.ByteString
        getNameBytes();

        /**
         * <pre>
         * The Individual's description. This attribute contains human readable text.
         * The "description" attributes should not contain any structured data.
         * </pre>
         *
         * <code>string description = 4;</code>
         */
        String getDescription();

        /**
         * <pre>
         * The Individual's description. This attribute contains human readable text.
         * The "description" attributes should not contain any structured data.
         * </pre>
         *
         * <code>string description = 4;</code>
         */
        com.google.protobuf.ByteString
        getDescriptionBytes();

        /**
         * <pre>
         * The bio_characteristics attribute uses lists of BioCharacteristic objects to describe
         * diseases, phenotypes ... associated with this Individual. The values here may
         * overlap with values recorded in related records. As general rule, "germline"
         * or non-organ specific afflictions ("Li-fraumeni Syndrome", "Diabetes mellitus"
         * should be recorded here, whereas "Infiltrating duct carcinoma" may be both
         * recorded here (as known disease history)
         * as well as in the "Biosample.bio_characteristics" attribute.
         * For querying all disease contexts related to an individual, therefore queries
         * should cover ($in) [Individual.bio_characteristics OR Biosample.bio_characteristics].
         * </pre>
         *
         * <code>repeated .BioCharacteristic bio_characteristics = 9;</code>
         */
        java.util.List<Biometadata.BioCharacteristic>
        getBioCharacteristicsList();

        /**
         * <pre>
         * The bio_characteristics attribute uses lists of BioCharacteristic objects to describe
         * diseases, phenotypes ... associated with this Individual. The values here may
         * overlap with values recorded in related records. As general rule, "germline"
         * or non-organ specific afflictions ("Li-fraumeni Syndrome", "Diabetes mellitus"
         * should be recorded here, whereas "Infiltrating duct carcinoma" may be both
         * recorded here (as known disease history)
         * as well as in the "Biosample.bio_characteristics" attribute.
         * For querying all disease contexts related to an individual, therefore queries
         * should cover ($in) [Individual.bio_characteristics OR Biosample.bio_characteristics].
         * </pre>
         *
         * <code>repeated .BioCharacteristic bio_characteristics = 9;</code>
         */
        Biometadata.BioCharacteristic getBioCharacteristics(int index);

        /**
         * <pre>
         * The bio_characteristics attribute uses lists of BioCharacteristic objects to describe
         * diseases, phenotypes ... associated with this Individual. The values here may
         * overlap with values recorded in related records. As general rule, "germline"
         * or non-organ specific afflictions ("Li-fraumeni Syndrome", "Diabetes mellitus"
         * should be recorded here, whereas "Infiltrating duct carcinoma" may be both
         * recorded here (as known disease history)
         * as well as in the "Biosample.bio_characteristics" attribute.
         * For querying all disease contexts related to an individual, therefore queries
         * should cover ($in) [Individual.bio_characteristics OR Biosample.bio_characteristics].
         * </pre>
         *
         * <code>repeated .BioCharacteristic bio_characteristics = 9;</code>
         */
        int getBioCharacteristicsCount();

        /**
         * <pre>
         * The bio_characteristics attribute uses lists of BioCharacteristic objects to describe
         * diseases, phenotypes ... associated with this Individual. The values here may
         * overlap with values recorded in related records. As general rule, "germline"
         * or non-organ specific afflictions ("Li-fraumeni Syndrome", "Diabetes mellitus"
         * should be recorded here, whereas "Infiltrating duct carcinoma" may be both
         * recorded here (as known disease history)
         * as well as in the "Biosample.bio_characteristics" attribute.
         * For querying all disease contexts related to an individual, therefore queries
         * should cover ($in) [Individual.bio_characteristics OR Biosample.bio_characteristics].
         * </pre>
         *
         * <code>repeated .BioCharacteristic bio_characteristics = 9;</code>
         */
        java.util.List<? extends Biometadata.BioCharacteristicOrBuilder>
        getBioCharacteristicsOrBuilderList();

        /**
         * <pre>
         * The bio_characteristics attribute uses lists of BioCharacteristic objects to describe
         * diseases, phenotypes ... associated with this Individual. The values here may
         * overlap with values recorded in related records. As general rule, "germline"
         * or non-organ specific afflictions ("Li-fraumeni Syndrome", "Diabetes mellitus"
         * should be recorded here, whereas "Infiltrating duct carcinoma" may be both
         * recorded here (as known disease history)
         * as well as in the "Biosample.bio_characteristics" attribute.
         * For querying all disease contexts related to an individual, therefore queries
         * should cover ($in) [Individual.bio_characteristics OR Biosample.bio_characteristics].
         * </pre>
         *
         * <code>repeated .BioCharacteristic bio_characteristics = 9;</code>
         */
        Biometadata.BioCharacteristicOrBuilder getBioCharacteristicsOrBuilder(
                int index);

        /**
         * <pre>
         * The :ref:`ISO 8601&lt;metadata_date_time&gt;` time at which this Individual's record
         * was created.
         * </pre>
         *
         * <code>string created = 5;</code>
         */
        String getCreated();

        /**
         * <pre>
         * The :ref:`ISO 8601&lt;metadata_date_time&gt;` time at which this Individual's record
         * was created.
         * </pre>
         *
         * <code>string created = 5;</code>
         */
        com.google.protobuf.ByteString
        getCreatedBytes();

        /**
         * <pre>
         * The :ref:`ISO 8601&lt;metadata_date_time&gt;` time at which this Individual record
         * was updated.
         * </pre>
         *
         * <code>string updated = 6;</code>
         */
        String getUpdated();

        /**
         * <pre>
         * The :ref:`ISO 8601&lt;metadata_date_time&gt;` time at which this Individual record
         * was updated.
         * </pre>
         *
         * <code>string updated = 6;</code>
         */
        com.google.protobuf.ByteString
        getUpdatedBytes();

        /**
         * <pre>
         * For a representation of an NCBI Taxon ID as an OntologyTerm, see
         * NCBITaxon Ontology
         *   http://www.obofoundry.org/ontology/ncbitaxon.html
         * For example, 'Homo sapiens' has the ID 9606. The NCBITaxon ontology ID for
         * this is NCBITaxon:9606, and therefore:
         *   species : { term_id: "NCBITaxon:9606", term : "Homo sapiens" }
         * </pre>
         *
         * <code>.OntologyTerm species = 7;</code>
         */
        boolean hasSpecies();

        /**
         * <pre>
         * For a representation of an NCBI Taxon ID as an OntologyTerm, see
         * NCBITaxon Ontology
         *   http://www.obofoundry.org/ontology/ncbitaxon.html
         * For example, 'Homo sapiens' has the ID 9606. The NCBITaxon ontology ID for
         * this is NCBITaxon:9606, and therefore:
         *   species : { term_id: "NCBITaxon:9606", term : "Homo sapiens" }
         * </pre>
         *
         * <code>.OntologyTerm species = 7;</code>
         */
        Shared.OntologyTerm getSpecies();

        /**
         * <pre>
         * For a representation of an NCBI Taxon ID as an OntologyTerm, see
         * NCBITaxon Ontology
         *   http://www.obofoundry.org/ontology/ncbitaxon.html
         * For example, 'Homo sapiens' has the ID 9606. The NCBITaxon ontology ID for
         * this is NCBITaxon:9606, and therefore:
         *   species : { term_id: "NCBITaxon:9606", term : "Homo sapiens" }
         * </pre>
         *
         * <code>.OntologyTerm species = 7;</code>
         */
        Shared.OntologyTermOrBuilder getSpeciesOrBuilder();

        /**
         * <pre>
         * The genetic sex of this individual.
         * Use `null` when unknown or not applicable.
         * Recommended: PATO http://purl.obolibrary.org/obo/PATO_0020000 ...
         * Example:
         *   sex : { term_id: "PATO:0020000", term : "female genetic sex" }
         * </pre>
         *
         * <code>.OntologyTerm sex = 8;</code>
         */
        boolean hasSex();

        /**
         * <pre>
         * The genetic sex of this individual.
         * Use `null` when unknown or not applicable.
         * Recommended: PATO http://purl.obolibrary.org/obo/PATO_0020000 ...
         * Example:
         *   sex : { term_id: "PATO:0020000", term : "female genetic sex" }
         * </pre>
         *
         * <code>.OntologyTerm sex = 8;</code>
         */
        Shared.OntologyTerm getSex();

        /**
         * <pre>
         * The genetic sex of this individual.
         * Use `null` when unknown or not applicable.
         * Recommended: PATO http://purl.obolibrary.org/obo/PATO_0020000 ...
         * Example:
         *   sex : { term_id: "PATO:0020000", term : "female genetic sex" }
         * </pre>
         *
         * <code>.OntologyTerm sex = 8;</code>
         */
        Shared.OntologyTermOrBuilder getSexOrBuilder();

        /**
         * <pre>
         * The address coded as geolocation where this individual originated from.
         * It is recommended that this reflects the place of birth or main place of
         * living, not necessarily a current address.
         * </pre>
         *
         * <code>.GeoLocation location = 13;</code>
         */
        boolean hasLocation();

        /**
         * <pre>
         * The address coded as geolocation where this individual originated from.
         * It is recommended that this reflects the place of birth or main place of
         * living, not necessarily a current address.
         * </pre>
         *
         * <code>.GeoLocation location = 13;</code>
         */
        Shared.GeoLocation getLocation();

        /**
         * <pre>
         * The address coded as geolocation where this individual originated from.
         * It is recommended that this reflects the place of birth or main place of
         * living, not necessarily a current address.
         * </pre>
         *
         * <code>.GeoLocation location = 13;</code>
         */
        Shared.GeoLocationOrBuilder getLocationOrBuilder();

        /**
         * <pre>
         * A map of additional information regarding the Individual.
         * </pre>
         *
         * <code>.Attributes attributes = 10;</code>
         */
        boolean hasAttributes();

        /**
         * <pre>
         * A map of additional information regarding the Individual.
         * </pre>
         *
         * <code>.Attributes attributes = 10;</code>
         */
        Shared.Attributes getAttributes();

        /**
         * <pre>
         * A map of additional information regarding the Individual.
         * </pre>
         *
         * <code>.Attributes attributes = 10;</code>
         */
        Shared.AttributesOrBuilder getAttributesOrBuilder();

        /**
         * <pre>
         * External identifiers representing this individual. These are considered
         * different representation of the same record, not records which are in some
         * other relation with the record at hand.
         * </pre>
         *
         * <code>repeated .ExternalIdentifier external_identifiers = 11;</code>
         */
        java.util.List<Shared.ExternalIdentifier>
        getExternalIdentifiersList();

        /**
         * <pre>
         * External identifiers representing this individual. These are considered
         * different representation of the same record, not records which are in some
         * other relation with the record at hand.
         * </pre>
         *
         * <code>repeated .ExternalIdentifier external_identifiers = 11;</code>
         */
        Shared.ExternalIdentifier getExternalIdentifiers(int index);

        /**
         * <pre>
         * External identifiers representing this individual. These are considered
         * different representation of the same record, not records which are in some
         * other relation with the record at hand.
         * </pre>
         *
         * <code>repeated .ExternalIdentifier external_identifiers = 11;</code>
         */
        int getExternalIdentifiersCount();

        /**
         * <pre>
         * External identifiers representing this individual. These are considered
         * different representation of the same record, not records which are in some
         * other relation with the record at hand.
         * </pre>
         *
         * <code>repeated .ExternalIdentifier external_identifiers = 11;</code>
         */
        java.util.List<? extends Shared.ExternalIdentifierOrBuilder>
        getExternalIdentifiersOrBuilderList();

        /**
         * <pre>
         * External identifiers representing this individual. These are considered
         * different representation of the same record, not records which are in some
         * other relation with the record at hand.
         * </pre>
         *
         * <code>repeated .ExternalIdentifier external_identifiers = 11;</code>
         */
        Shared.ExternalIdentifierOrBuilder getExternalIdentifiersOrBuilder(
                int index);
    }

    /**
     * <pre>
     * An individual (or subject) typically corresponds to an individual
     * human or another organism.
     * </pre>
     * <p>
     * Protobuf type {@code Individual}
     */
    public static final class Individual extends
            com.google.protobuf.GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:Individual)
            IndividualOrBuilder {
        // Use Individual.newBuilder() to construct.
        private Individual(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }

        private Individual() {
            id_ = "";
            datasetId_ = "";
            name_ = "";
            description_ = "";
            bioCharacteristics_ = java.util.Collections.emptyList();
            created_ = "";
            updated_ = "";
            externalIdentifiers_ = java.util.Collections.emptyList();
        }

        @Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        private Individual(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            this();
            int mutable_bitField0_ = 0;
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!input.skipField(tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 10: {
                            String s = input.readStringRequireUtf8();

                            id_ = s;
                            break;
                        }
                        case 18: {
                            String s = input.readStringRequireUtf8();

                            datasetId_ = s;
                            break;
                        }
                        case 26: {
                            String s = input.readStringRequireUtf8();

                            name_ = s;
                            break;
                        }
                        case 34: {
                            String s = input.readStringRequireUtf8();

                            description_ = s;
                            break;
                        }
                        case 42: {
                            String s = input.readStringRequireUtf8();

                            created_ = s;
                            break;
                        }
                        case 50: {
                            String s = input.readStringRequireUtf8();

                            updated_ = s;
                            break;
                        }
                        case 58: {
                            Shared.OntologyTerm.Builder subBuilder = null;
                            if (species_ != null) {
                                subBuilder = species_.toBuilder();
                            }
                            species_ = input.readMessage(Shared.OntologyTerm.parser(), extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom(species_);
                                species_ = subBuilder.buildPartial();
                            }

                            break;
                        }
                        case 66: {
                            Shared.OntologyTerm.Builder subBuilder = null;
                            if (sex_ != null) {
                                subBuilder = sex_.toBuilder();
                            }
                            sex_ = input.readMessage(Shared.OntologyTerm.parser(), extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom(sex_);
                                sex_ = subBuilder.buildPartial();
                            }

                            break;
                        }
                        case 74: {
                            if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                                bioCharacteristics_ = new java.util.ArrayList<Biometadata.BioCharacteristic>();
                                mutable_bitField0_ |= 0x00000010;
                            }
                            bioCharacteristics_.add(
                                    input.readMessage(Biometadata.BioCharacteristic.parser(), extensionRegistry));
                            break;
                        }
                        case 82: {
                            Shared.Attributes.Builder subBuilder = null;
                            if (attributes_ != null) {
                                subBuilder = attributes_.toBuilder();
                            }
                            attributes_ = input.readMessage(Shared.Attributes.parser(), extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom(attributes_);
                                attributes_ = subBuilder.buildPartial();
                            }

                            break;
                        }
                        case 90: {
                            if (!((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
                                externalIdentifiers_ = new java.util.ArrayList<Shared.ExternalIdentifier>();
                                mutable_bitField0_ |= 0x00000800;
                            }
                            externalIdentifiers_.add(
                                    input.readMessage(Shared.ExternalIdentifier.parser(), extensionRegistry));
                            break;
                        }
                        case 106: {
                            Shared.GeoLocation.Builder subBuilder = null;
                            if (location_ != null) {
                                subBuilder = location_.toBuilder();
                            }
                            location_ = input.readMessage(Shared.GeoLocation.parser(), extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom(location_);
                                location_ = subBuilder.buildPartial();
                            }

                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e).setUnfinishedMessage(this);
            } finally {
                if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                    bioCharacteristics_ = java.util.Collections.unmodifiableList(bioCharacteristics_);
                }
                if (((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
                    externalIdentifiers_ = java.util.Collections.unmodifiableList(externalIdentifiers_);
                }
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return Biometadata.internal_static_ga4ghmetadata_Individual_descriptor;
        }

        protected FieldAccessorTable
        internalGetFieldAccessorTable() {
            return Biometadata.internal_static_ga4ghmetadata_Individual_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            Biometadata.Individual.class, Biometadata.Individual.Builder.class);
        }

        private int bitField0_;
        public static final int ID_FIELD_NUMBER = 1;
        private volatile Object id_;

        /**
         * <pre>
         * The Individual's :ref:`id &lt;apidesign_object_ids&gt;`. This is unique in the
         * context of the server instance.
         * </pre>
         *
         * <code>string id = 1;</code>
         */
        public String getId() {
            Object ref = id_;
            if (ref instanceof String) {
                return (String) ref;
            } else {
                com.google.protobuf.ByteString bs =
                        (com.google.protobuf.ByteString) ref;
                String s = bs.toStringUtf8();
                id_ = s;
                return s;
            }
        }

        /**
         * <pre>
         * The Individual's :ref:`id &lt;apidesign_object_ids&gt;`. This is unique in the
         * context of the server instance.
         * </pre>
         *
         * <code>string id = 1;</code>
         */
        public com.google.protobuf.ByteString
        getIdBytes() {
            Object ref = id_;
            if (ref instanceof String) {
                com.google.protobuf.ByteString b =
                        com.google.protobuf.ByteString.copyFromUtf8(
                                (String) ref);
                id_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }

        public static final int DATASET_ID_FIELD_NUMBER = 2;
        private volatile Object datasetId_;

        /**
         * <pre>
         * The ID of the dataset this Individual belongs to.
         * </pre>
         *
         * <code>string dataset_id = 2;</code>
         */
        public String getDatasetId() {
            Object ref = datasetId_;
            if (ref instanceof String) {
                return (String) ref;
            } else {
                com.google.protobuf.ByteString bs =
                        (com.google.protobuf.ByteString) ref;
                String s = bs.toStringUtf8();
                datasetId_ = s;
                return s;
            }
        }

        /**
         * <pre>
         * The ID of the dataset this Individual belongs to.
         * </pre>
         *
         * <code>string dataset_id = 2;</code>
         */
        public com.google.protobuf.ByteString
        getDatasetIdBytes() {
            Object ref = datasetId_;
            if (ref instanceof String) {
                com.google.protobuf.ByteString b =
                        com.google.protobuf.ByteString.copyFromUtf8(
                                (String) ref);
                datasetId_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }

        public static final int NAME_FIELD_NUMBER = 3;
        private volatile Object name_;

        /**
         * <pre>
         * The Individual's name. This is a label or symbolic identifier for the individual.
         * </pre>
         *
         * <code>string name = 3;</code>
         */
        public String getName() {
            Object ref = name_;
            if (ref instanceof String) {
                return (String) ref;
            } else {
                com.google.protobuf.ByteString bs =
                        (com.google.protobuf.ByteString) ref;
                String s = bs.toStringUtf8();
                name_ = s;
                return s;
            }
        }

        /**
         * <pre>
         * The Individual's name. This is a label or symbolic identifier for the individual.
         * </pre>
         *
         * <code>string name = 3;</code>
         */
        public com.google.protobuf.ByteString
        getNameBytes() {
            Object ref = name_;
            if (ref instanceof String) {
                com.google.protobuf.ByteString b =
                        com.google.protobuf.ByteString.copyFromUtf8(
                                (String) ref);
                name_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }

        public static final int DESCRIPTION_FIELD_NUMBER = 4;
        private volatile Object description_;

        /**
         * <pre>
         * The Individual's description. This attribute contains human readable text.
         * The "description" attributes should not contain any structured data.
         * </pre>
         *
         * <code>string description = 4;</code>
         */
        public String getDescription() {
            Object ref = description_;
            if (ref instanceof String) {
                return (String) ref;
            } else {
                com.google.protobuf.ByteString bs =
                        (com.google.protobuf.ByteString) ref;
                String s = bs.toStringUtf8();
                description_ = s;
                return s;
            }
        }

        /**
         * <pre>
         * The Individual's description. This attribute contains human readable text.
         * The "description" attributes should not contain any structured data.
         * </pre>
         *
         * <code>string description = 4;</code>
         */
        public com.google.protobuf.ByteString
        getDescriptionBytes() {
            Object ref = description_;
            if (ref instanceof String) {
                com.google.protobuf.ByteString b =
                        com.google.protobuf.ByteString.copyFromUtf8(
                                (String) ref);
                description_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }

        public static final int BIO_CHARACTERISTICS_FIELD_NUMBER = 9;
        private java.util.List<Biometadata.BioCharacteristic> bioCharacteristics_;

        /**
         * <pre>
         * The bio_characteristics attribute uses lists of BioCharacteristic objects to describe
         * diseases, phenotypes ... associated with this Individual. The values here may
         * overlap with values recorded in related records. As general rule, "germline"
         * or non-organ specific afflictions ("Li-fraumeni Syndrome", "Diabetes mellitus"
         * should be recorded here, whereas "Infiltrating duct carcinoma" may be both
         * recorded here (as known disease history)
         * as well as in the "Biosample.bio_characteristics" attribute.
         * For querying all disease contexts related to an individual, therefore queries
         * should cover ($in) [Individual.bio_characteristics OR Biosample.bio_characteristics].
         * </pre>
         *
         * <code>repeated .BioCharacteristic bio_characteristics = 9;</code>
         */
        public java.util.List<Biometadata.BioCharacteristic> getBioCharacteristicsList() {
            return bioCharacteristics_;
        }

        /**
         * <pre>
         * The bio_characteristics attribute uses lists of BioCharacteristic objects to describe
         * diseases, phenotypes ... associated with this Individual. The values here may
         * overlap with values recorded in related records. As general rule, "germline"
         * or non-organ specific afflictions ("Li-fraumeni Syndrome", "Diabetes mellitus"
         * should be recorded here, whereas "Infiltrating duct carcinoma" may be both
         * recorded here (as known disease history)
         * as well as in the "Biosample.bio_characteristics" attribute.
         * For querying all disease contexts related to an individual, therefore queries
         * should cover ($in) [Individual.bio_characteristics OR Biosample.bio_characteristics].
         * </pre>
         *
         * <code>repeated .BioCharacteristic bio_characteristics = 9;</code>
         */
        public java.util.List<? extends Biometadata.BioCharacteristicOrBuilder>
        getBioCharacteristicsOrBuilderList() {
            return bioCharacteristics_;
        }

        /**
         * <pre>
         * The bio_characteristics attribute uses lists of BioCharacteristic objects to describe
         * diseases, phenotypes ... associated with this Individual. The values here may
         * overlap with values recorded in related records. As general rule, "germline"
         * or non-organ specific afflictions ("Li-fraumeni Syndrome", "Diabetes mellitus"
         * should be recorded here, whereas "Infiltrating duct carcinoma" may be both
         * recorded here (as known disease history)
         * as well as in the "Biosample.bio_characteristics" attribute.
         * For querying all disease contexts related to an individual, therefore queries
         * should cover ($in) [Individual.bio_characteristics OR Biosample.bio_characteristics].
         * </pre>
         *
         * <code>repeated .BioCharacteristic bio_characteristics = 9;</code>
         */
        public int getBioCharacteristicsCount() {
            return bioCharacteristics_.size();
        }

        /**
         * <pre>
         * The bio_characteristics attribute uses lists of BioCharacteristic objects to describe
         * diseases, phenotypes ... associated with this Individual. The values here may
         * overlap with values recorded in related records. As general rule, "germline"
         * or non-organ specific afflictions ("Li-fraumeni Syndrome", "Diabetes mellitus"
         * should be recorded here, whereas "Infiltrating duct carcinoma" may be both
         * recorded here (as known disease history)
         * as well as in the "Biosample.bio_characteristics" attribute.
         * For querying all disease contexts related to an individual, therefore queries
         * should cover ($in) [Individual.bio_characteristics OR Biosample.bio_characteristics].
         * </pre>
         *
         * <code>repeated .BioCharacteristic bio_characteristics = 9;</code>
         */
        public Biometadata.BioCharacteristic getBioCharacteristics(int index) {
            return bioCharacteristics_.get(index);
        }

        /**
         * <pre>
         * The bio_characteristics attribute uses lists of BioCharacteristic objects to describe
         * diseases, phenotypes ... associated with this Individual. The values here may
         * overlap with values recorded in related records. As general rule, "germline"
         * or non-organ specific afflictions ("Li-fraumeni Syndrome", "Diabetes mellitus"
         * should be recorded here, whereas "Infiltrating duct carcinoma" may be both
         * recorded here (as known disease history)
         * as well as in the "Biosample.bio_characteristics" attribute.
         * For querying all disease contexts related to an individual, therefore queries
         * should cover ($in) [Individual.bio_characteristics OR Biosample.bio_characteristics].
         * </pre>
         *
         * <code>repeated .BioCharacteristic bio_characteristics = 9;</code>
         */
        public Biometadata.BioCharacteristicOrBuilder getBioCharacteristicsOrBuilder(
                int index) {
            return bioCharacteristics_.get(index);
        }

        public static final int CREATED_FIELD_NUMBER = 5;
        private volatile Object created_;

        /**
         * <pre>
         * The :ref:`ISO 8601&lt;metadata_date_time&gt;` time at which this Individual's record
         * was created.
         * </pre>
         *
         * <code>string created = 5;</code>
         */
        public String getCreated() {
            Object ref = created_;
            if (ref instanceof String) {
                return (String) ref;
            } else {
                com.google.protobuf.ByteString bs =
                        (com.google.protobuf.ByteString) ref;
                String s = bs.toStringUtf8();
                created_ = s;
                return s;
            }
        }

        /**
         * <pre>
         * The :ref:`ISO 8601&lt;metadata_date_time&gt;` time at which this Individual's record
         * was created.
         * </pre>
         *
         * <code>string created = 5;</code>
         */
        public com.google.protobuf.ByteString
        getCreatedBytes() {
            Object ref = created_;
            if (ref instanceof String) {
                com.google.protobuf.ByteString b =
                        com.google.protobuf.ByteString.copyFromUtf8(
                                (String) ref);
                created_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }

        public static final int UPDATED_FIELD_NUMBER = 6;
        private volatile Object updated_;

        /**
         * <pre>
         * The :ref:`ISO 8601&lt;metadata_date_time&gt;` time at which this Individual record
         * was updated.
         * </pre>
         *
         * <code>string updated = 6;</code>
         */
        public String getUpdated() {
            Object ref = updated_;
            if (ref instanceof String) {
                return (String) ref;
            } else {
                com.google.protobuf.ByteString bs =
                        (com.google.protobuf.ByteString) ref;
                String s = bs.toStringUtf8();
                updated_ = s;
                return s;
            }
        }

        /**
         * <pre>
         * The :ref:`ISO 8601&lt;metadata_date_time&gt;` time at which this Individual record
         * was updated.
         * </pre>
         *
         * <code>string updated = 6;</code>
         */
        public com.google.protobuf.ByteString
        getUpdatedBytes() {
            Object ref = updated_;
            if (ref instanceof String) {
                com.google.protobuf.ByteString b =
                        com.google.protobuf.ByteString.copyFromUtf8(
                                (String) ref);
                updated_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }

        public static final int SPECIES_FIELD_NUMBER = 7;
        private Shared.OntologyTerm species_;

        /**
         * <pre>
         * For a representation of an NCBI Taxon ID as an OntologyTerm, see
         * NCBITaxon Ontology
         *   http://www.obofoundry.org/ontology/ncbitaxon.html
         * For example, 'Homo sapiens' has the ID 9606. The NCBITaxon ontology ID for
         * this is NCBITaxon:9606, and therefore:
         *   species : { term_id: "NCBITaxon:9606", term : "Homo sapiens" }
         * </pre>
         *
         * <code>.OntologyTerm species = 7;</code>
         */
        public boolean hasSpecies() {
            return species_ != null;
        }

        /**
         * <pre>
         * For a representation of an NCBI Taxon ID as an OntologyTerm, see
         * NCBITaxon Ontology
         *   http://www.obofoundry.org/ontology/ncbitaxon.html
         * For example, 'Homo sapiens' has the ID 9606. The NCBITaxon ontology ID for
         * this is NCBITaxon:9606, and therefore:
         *   species : { term_id: "NCBITaxon:9606", term : "Homo sapiens" }
         * </pre>
         *
         * <code>.OntologyTerm species = 7;</code>
         */
        public Shared.OntologyTerm getSpecies() {
            return species_ == null ? Shared.OntologyTerm.getDefaultInstance() : species_;
        }

        /**
         * <pre>
         * For a representation of an NCBI Taxon ID as an OntologyTerm, see
         * NCBITaxon Ontology
         *   http://www.obofoundry.org/ontology/ncbitaxon.html
         * For example, 'Homo sapiens' has the ID 9606. The NCBITaxon ontology ID for
         * this is NCBITaxon:9606, and therefore:
         *   species : { term_id: "NCBITaxon:9606", term : "Homo sapiens" }
         * </pre>
         *
         * <code>.OntologyTerm species = 7;</code>
         */
        public Shared.OntologyTermOrBuilder getSpeciesOrBuilder() {
            return getSpecies();
        }

        public static final int SEX_FIELD_NUMBER = 8;
        private Shared.OntologyTerm sex_;

        /**
         * <pre>
         * The genetic sex of this individual.
         * Use `null` when unknown or not applicable.
         * Recommended: PATO http://purl.obolibrary.org/obo/PATO_0020000 ...
         * Example:
         *   sex : { term_id: "PATO:0020000", term : "female genetic sex" }
         * </pre>
         *
         * <code>.OntologyTerm sex = 8;</code>
         */
        public boolean hasSex() {
            return sex_ != null;
        }

        /**
         * <pre>
         * The genetic sex of this individual.
         * Use `null` when unknown or not applicable.
         * Recommended: PATO http://purl.obolibrary.org/obo/PATO_0020000 ...
         * Example:
         *   sex : { term_id: "PATO:0020000", term : "female genetic sex" }
         * </pre>
         *
         * <code>.OntologyTerm sex = 8;</code>
         */
        public Shared.OntologyTerm getSex() {
            return sex_ == null ? Shared.OntologyTerm.getDefaultInstance() : sex_;
        }

        /**
         * <pre>
         * The genetic sex of this individual.
         * Use `null` when unknown or not applicable.
         * Recommended: PATO http://purl.obolibrary.org/obo/PATO_0020000 ...
         * Example:
         *   sex : { term_id: "PATO:0020000", term : "female genetic sex" }
         * </pre>
         *
         * <code>.OntologyTerm sex = 8;</code>
         */
        public Shared.OntologyTermOrBuilder getSexOrBuilder() {
            return getSex();
        }

        public static final int LOCATION_FIELD_NUMBER = 13;
        private Shared.GeoLocation location_;

        /**
         * <pre>
         * The address coded as geolocation where this individual originated from.
         * It is recommended that this reflects the place of birth or main place of
         * living, not necessarily a current address.
         * </pre>
         *
         * <code>.GeoLocation location = 13;</code>
         */
        public boolean hasLocation() {
            return location_ != null;
        }

        /**
         * <pre>
         * The address coded as geolocation where this individual originated from.
         * It is recommended that this reflects the place of birth or main place of
         * living, not necessarily a current address.
         * </pre>
         *
         * <code>.GeoLocation location = 13;</code>
         */
        public Shared.GeoLocation getLocation() {
            return location_ == null ? Shared.GeoLocation.getDefaultInstance() : location_;
        }

        /**
         * <pre>
         * The address coded as geolocation where this individual originated from.
         * It is recommended that this reflects the place of birth or main place of
         * living, not necessarily a current address.
         * </pre>
         *
         * <code>.GeoLocation location = 13;</code>
         */
        public Shared.GeoLocationOrBuilder getLocationOrBuilder() {
            return getLocation();
        }

        public static final int ATTRIBUTES_FIELD_NUMBER = 10;
        private Shared.Attributes attributes_;

        /**
         * <pre>
         * A map of additional information regarding the Individual.
         * </pre>
         *
         * <code>.Attributes attributes = 10;</code>
         */
        public boolean hasAttributes() {
            return attributes_ != null;
        }

        /**
         * <pre>
         * A map of additional information regarding the Individual.
         * </pre>
         *
         * <code>.Attributes attributes = 10;</code>
         */
        public Shared.Attributes getAttributes() {
            return attributes_ == null ? Shared.Attributes.getDefaultInstance() : attributes_;
        }

        /**
         * <pre>
         * A map of additional information regarding the Individual.
         * </pre>
         *
         * <code>.Attributes attributes = 10;</code>
         */
        public Shared.AttributesOrBuilder getAttributesOrBuilder() {
            return getAttributes();
        }

        public static final int EXTERNAL_IDENTIFIERS_FIELD_NUMBER = 11;
        private java.util.List<Shared.ExternalIdentifier> externalIdentifiers_;

        /**
         * <pre>
         * External identifiers representing this individual. These are considered
         * different representation of the same record, not records which are in some
         * other relation with the record at hand.
         * </pre>
         *
         * <code>repeated .ExternalIdentifier external_identifiers = 11;</code>
         */
        public java.util.List<Shared.ExternalIdentifier> getExternalIdentifiersList() {
            return externalIdentifiers_;
        }

        /**
         * <pre>
         * External identifiers representing this individual. These are considered
         * different representation of the same record, not records which are in some
         * other relation with the record at hand.
         * </pre>
         *
         * <code>repeated .ExternalIdentifier external_identifiers = 11;</code>
         */
        public java.util.List<? extends Shared.ExternalIdentifierOrBuilder>
        getExternalIdentifiersOrBuilderList() {
            return externalIdentifiers_;
        }

        /**
         * <pre>
         * External identifiers representing this individual. These are considered
         * different representation of the same record, not records which are in some
         * other relation with the record at hand.
         * </pre>
         *
         * <code>repeated .ExternalIdentifier external_identifiers = 11;</code>
         */
        public int getExternalIdentifiersCount() {
            return externalIdentifiers_.size();
        }

        /**
         * <pre>
         * External identifiers representing this individual. These are considered
         * different representation of the same record, not records which are in some
         * other relation with the record at hand.
         * </pre>
         *
         * <code>repeated .ExternalIdentifier external_identifiers = 11;</code>
         */
        public Shared.ExternalIdentifier getExternalIdentifiers(int index) {
            return externalIdentifiers_.get(index);
        }

        /**
         * <pre>
         * External identifiers representing this individual. These are considered
         * different representation of the same record, not records which are in some
         * other relation with the record at hand.
         * </pre>
         *
         * <code>repeated .ExternalIdentifier external_identifiers = 11;</code>
         */
        public Shared.ExternalIdentifierOrBuilder getExternalIdentifiersOrBuilder(
                int index) {
            return externalIdentifiers_.get(index);
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            if (!getIdBytes().isEmpty()) {
                com.google.protobuf.GeneratedMessageV3.writeString(output, 1, id_);
            }
            if (!getDatasetIdBytes().isEmpty()) {
                com.google.protobuf.GeneratedMessageV3.writeString(output, 2, datasetId_);
            }
            if (!getNameBytes().isEmpty()) {
                com.google.protobuf.GeneratedMessageV3.writeString(output, 3, name_);
            }
            if (!getDescriptionBytes().isEmpty()) {
                com.google.protobuf.GeneratedMessageV3.writeString(output, 4, description_);
            }
            if (!getCreatedBytes().isEmpty()) {
                com.google.protobuf.GeneratedMessageV3.writeString(output, 5, created_);
            }
            if (!getUpdatedBytes().isEmpty()) {
                com.google.protobuf.GeneratedMessageV3.writeString(output, 6, updated_);
            }
            if (species_ != null) {
                output.writeMessage(7, getSpecies());
            }
            if (sex_ != null) {
                output.writeMessage(8, getSex());
            }
            for (int i = 0; i < bioCharacteristics_.size(); i++) {
                output.writeMessage(9, bioCharacteristics_.get(i));
            }
            if (attributes_ != null) {
                output.writeMessage(10, getAttributes());
            }
            for (int i = 0; i < externalIdentifiers_.size(); i++) {
                output.writeMessage(11, externalIdentifiers_.get(i));
            }
            if (location_ != null) {
                output.writeMessage(13, getLocation());
            }
        }

        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            if (!getIdBytes().isEmpty()) {
                size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, id_);
            }
            if (!getDatasetIdBytes().isEmpty()) {
                size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, datasetId_);
            }
            if (!getNameBytes().isEmpty()) {
                size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, name_);
            }
            if (!getDescriptionBytes().isEmpty()) {
                size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, description_);
            }
            if (!getCreatedBytes().isEmpty()) {
                size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, created_);
            }
            if (!getUpdatedBytes().isEmpty()) {
                size += com.google.protobuf.GeneratedMessageV3.computeStringSize(6, updated_);
            }
            if (species_ != null) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(7, getSpecies());
            }
            if (sex_ != null) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(8, getSex());
            }
            for (int i = 0; i < bioCharacteristics_.size(); i++) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(9, bioCharacteristics_.get(i));
            }
            if (attributes_ != null) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(10, getAttributes());
            }
            for (int i = 0; i < externalIdentifiers_.size(); i++) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(11, externalIdentifiers_.get(i));
            }
            if (location_ != null) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(13, getLocation());
            }
            memoizedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @Override
        public boolean equals(final Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof Biometadata.Individual)) {
                return super.equals(obj);
            }
            Biometadata.Individual other = (Biometadata.Individual) obj;

            boolean result = true;
            result = result && getId()
                    .equals(other.getId());
            result = result && getDatasetId()
                    .equals(other.getDatasetId());
            result = result && getName()
                    .equals(other.getName());
            result = result && getDescription()
                    .equals(other.getDescription());
            result = result && getBioCharacteristicsList()
                    .equals(other.getBioCharacteristicsList());
            result = result && getCreated()
                    .equals(other.getCreated());
            result = result && getUpdated()
                    .equals(other.getUpdated());
            result = result && (hasSpecies() == other.hasSpecies());
            if (hasSpecies()) {
                result = result && getSpecies()
                        .equals(other.getSpecies());
            }
            result = result && (hasSex() == other.hasSex());
            if (hasSex()) {
                result = result && getSex()
                        .equals(other.getSex());
            }
            result = result && (hasLocation() == other.hasLocation());
            if (hasLocation()) {
                result = result && getLocation()
                        .equals(other.getLocation());
            }
            result = result && (hasAttributes() == other.hasAttributes());
            if (hasAttributes()) {
                result = result && getAttributes()
                        .equals(other.getAttributes());
            }
            result = result && getExternalIdentifiersList()
                    .equals(other.getExternalIdentifiersList());
            return result;
        }

        @Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            hash = (37 * hash) + ID_FIELD_NUMBER;
            hash = (53 * hash) + getId().hashCode();
            hash = (37 * hash) + DATASET_ID_FIELD_NUMBER;
            hash = (53 * hash) + getDatasetId().hashCode();
            hash = (37 * hash) + NAME_FIELD_NUMBER;
            hash = (53 * hash) + getName().hashCode();
            hash = (37 * hash) + DESCRIPTION_FIELD_NUMBER;
            hash = (53 * hash) + getDescription().hashCode();
            if (getBioCharacteristicsCount() > 0) {
                hash = (37 * hash) + BIO_CHARACTERISTICS_FIELD_NUMBER;
                hash = (53 * hash) + getBioCharacteristicsList().hashCode();
            }
            hash = (37 * hash) + CREATED_FIELD_NUMBER;
            hash = (53 * hash) + getCreated().hashCode();
            hash = (37 * hash) + UPDATED_FIELD_NUMBER;
            hash = (53 * hash) + getUpdated().hashCode();
            if (hasSpecies()) {
                hash = (37 * hash) + SPECIES_FIELD_NUMBER;
                hash = (53 * hash) + getSpecies().hashCode();
            }
            if (hasSex()) {
                hash = (37 * hash) + SEX_FIELD_NUMBER;
                hash = (53 * hash) + getSex().hashCode();
            }
            if (hasLocation()) {
                hash = (37 * hash) + LOCATION_FIELD_NUMBER;
                hash = (53 * hash) + getLocation().hashCode();
            }
            if (hasAttributes()) {
                hash = (37 * hash) + ATTRIBUTES_FIELD_NUMBER;
                hash = (53 * hash) + getAttributes().hashCode();
            }
            if (getExternalIdentifiersCount() > 0) {
                hash = (37 * hash) + EXTERNAL_IDENTIFIERS_FIELD_NUMBER;
                hash = (53 * hash) + getExternalIdentifiersList().hashCode();
            }
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        public static Biometadata.Individual parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static Biometadata.Individual parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static Biometadata.Individual parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static Biometadata.Individual parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static Biometadata.Individual parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static Biometadata.Individual parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static Biometadata.Individual parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input);
        }

        public static Biometadata.Individual parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }

        public static Biometadata.Individual parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static Biometadata.Individual parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(Biometadata.Individual prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                    ? new Builder() : new Builder().mergeFrom(this);
        }

        @Override
        protected Builder newBuilderForType(
                BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * <pre>
         * An individual (or subject) typically corresponds to an individual
         * human or another organism.
         * </pre>
         * <p>
         * Protobuf type {@code Individual}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:Individual)
                Biometadata.IndividualOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return Biometadata.internal_static_ga4ghmetadata_Individual_descriptor;
            }

            protected FieldAccessorTable
            internalGetFieldAccessorTable() {
                return Biometadata.internal_static_ga4ghmetadata_Individual_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                Biometadata.Individual.class, Biometadata.Individual.Builder.class);
            }

            // Construct using Biometadata.Individual.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessageV3
                        .alwaysUseFieldBuilders) {
                    getBioCharacteristicsFieldBuilder();
                    getExternalIdentifiersFieldBuilder();
                }
            }

            public Builder clear() {
                super.clear();
                id_ = "";

                datasetId_ = "";

                name_ = "";

                description_ = "";

                if (bioCharacteristicsBuilder_ == null) {
                    bioCharacteristics_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000010);
                } else {
                    bioCharacteristicsBuilder_.clear();
                }
                created_ = "";

                updated_ = "";

                if (speciesBuilder_ == null) {
                    species_ = null;
                } else {
                    species_ = null;
                    speciesBuilder_ = null;
                }
                if (sexBuilder_ == null) {
                    sex_ = null;
                } else {
                    sex_ = null;
                    sexBuilder_ = null;
                }
                if (locationBuilder_ == null) {
                    location_ = null;
                } else {
                    location_ = null;
                    locationBuilder_ = null;
                }
                if (attributesBuilder_ == null) {
                    attributes_ = null;
                } else {
                    attributes_ = null;
                    attributesBuilder_ = null;
                }
                if (externalIdentifiersBuilder_ == null) {
                    externalIdentifiers_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000800);
                } else {
                    externalIdentifiersBuilder_.clear();
                }
                return this;
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return Biometadata.internal_static_ga4ghmetadata_Individual_descriptor;
            }

            public Biometadata.Individual getDefaultInstanceForType() {
                return Biometadata.Individual.getDefaultInstance();
            }

            public Biometadata.Individual build() {
                Biometadata.Individual result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public Biometadata.Individual buildPartial() {
                Biometadata.Individual result = new Biometadata.Individual(this);
                int from_bitField0_ = bitField0_;
                int to_bitField0_ = 0;
                result.id_ = id_;
                result.datasetId_ = datasetId_;
                result.name_ = name_;
                result.description_ = description_;
                if (bioCharacteristicsBuilder_ == null) {
                    if (((bitField0_ & 0x00000010) == 0x00000010)) {
                        bioCharacteristics_ = java.util.Collections.unmodifiableList(bioCharacteristics_);
                        bitField0_ = (bitField0_ & ~0x00000010);
                    }
                    result.bioCharacteristics_ = bioCharacteristics_;
                } else {
                    result.bioCharacteristics_ = bioCharacteristicsBuilder_.build();
                }
                result.created_ = created_;
                result.updated_ = updated_;
                if (speciesBuilder_ == null) {
                    result.species_ = species_;
                } else {
                    result.species_ = speciesBuilder_.build();
                }
                if (sexBuilder_ == null) {
                    result.sex_ = sex_;
                } else {
                    result.sex_ = sexBuilder_.build();
                }
                if (locationBuilder_ == null) {
                    result.location_ = location_;
                } else {
                    result.location_ = locationBuilder_.build();
                }
                if (attributesBuilder_ == null) {
                    result.attributes_ = attributes_;
                } else {
                    result.attributes_ = attributesBuilder_.build();
                }
                if (externalIdentifiersBuilder_ == null) {
                    if (((bitField0_ & 0x00000800) == 0x00000800)) {
                        externalIdentifiers_ = java.util.Collections.unmodifiableList(externalIdentifiers_);
                        bitField0_ = (bitField0_ & ~0x00000800);
                    }
                    result.externalIdentifiers_ = externalIdentifiers_;
                } else {
                    result.externalIdentifiers_ = externalIdentifiersBuilder_.build();
                }
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder clone() {
                return (Builder) super.clone();
            }

            public Builder setField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.setField(field, value);
            }

            public Builder clearField(
                    com.google.protobuf.Descriptors.FieldDescriptor field) {
                return (Builder) super.clearField(field);
            }

            public Builder clearOneof(
                    com.google.protobuf.Descriptors.OneofDescriptor oneof) {
                return (Builder) super.clearOneof(oneof);
            }

            public Builder setRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    int index, Object value) {
                return (Builder) super.setRepeatedField(field, index, value);
            }

            public Builder addRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.addRepeatedField(field, value);
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof Biometadata.Individual) {
                    return mergeFrom((Biometadata.Individual) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(Biometadata.Individual other) {
                if (other == Biometadata.Individual.getDefaultInstance()) return this;
                if (!other.getId().isEmpty()) {
                    id_ = other.id_;
                    onChanged();
                }
                if (!other.getDatasetId().isEmpty()) {
                    datasetId_ = other.datasetId_;
                    onChanged();
                }
                if (!other.getName().isEmpty()) {
                    name_ = other.name_;
                    onChanged();
                }
                if (!other.getDescription().isEmpty()) {
                    description_ = other.description_;
                    onChanged();
                }
                if (bioCharacteristicsBuilder_ == null) {
                    if (!other.bioCharacteristics_.isEmpty()) {
                        if (bioCharacteristics_.isEmpty()) {
                            bioCharacteristics_ = other.bioCharacteristics_;
                            bitField0_ = (bitField0_ & ~0x00000010);
                        } else {
                            ensureBioCharacteristicsIsMutable();
                            bioCharacteristics_.addAll(other.bioCharacteristics_);
                        }
                        onChanged();
                    }
                } else {
                    if (!other.bioCharacteristics_.isEmpty()) {
                        if (bioCharacteristicsBuilder_.isEmpty()) {
                            bioCharacteristicsBuilder_.dispose();
                            bioCharacteristicsBuilder_ = null;
                            bioCharacteristics_ = other.bioCharacteristics_;
                            bitField0_ = (bitField0_ & ~0x00000010);
                            bioCharacteristicsBuilder_ =
                                    com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                                            getBioCharacteristicsFieldBuilder() : null;
                        } else {
                            bioCharacteristicsBuilder_.addAllMessages(other.bioCharacteristics_);
                        }
                    }
                }
                if (!other.getCreated().isEmpty()) {
                    created_ = other.created_;
                    onChanged();
                }
                if (!other.getUpdated().isEmpty()) {
                    updated_ = other.updated_;
                    onChanged();
                }
                if (other.hasSpecies()) {
                    mergeSpecies(other.getSpecies());
                }
                if (other.hasSex()) {
                    mergeSex(other.getSex());
                }
                if (other.hasLocation()) {
                    mergeLocation(other.getLocation());
                }
                if (other.hasAttributes()) {
                    mergeAttributes(other.getAttributes());
                }
                if (externalIdentifiersBuilder_ == null) {
                    if (!other.externalIdentifiers_.isEmpty()) {
                        if (externalIdentifiers_.isEmpty()) {
                            externalIdentifiers_ = other.externalIdentifiers_;
                            bitField0_ = (bitField0_ & ~0x00000800);
                        } else {
                            ensureExternalIdentifiersIsMutable();
                            externalIdentifiers_.addAll(other.externalIdentifiers_);
                        }
                        onChanged();
                    }
                } else {
                    if (!other.externalIdentifiers_.isEmpty()) {
                        if (externalIdentifiersBuilder_.isEmpty()) {
                            externalIdentifiersBuilder_.dispose();
                            externalIdentifiersBuilder_ = null;
                            externalIdentifiers_ = other.externalIdentifiers_;
                            bitField0_ = (bitField0_ & ~0x00000800);
                            externalIdentifiersBuilder_ =
                                    com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                                            getExternalIdentifiersFieldBuilder() : null;
                        } else {
                            externalIdentifiersBuilder_.addAllMessages(other.externalIdentifiers_);
                        }
                    }
                }
                onChanged();
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                Biometadata.Individual parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (Biometadata.Individual) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private int bitField0_;

            private Object id_ = "";

            /**
             * <pre>
             * The Individual's :ref:`id &lt;apidesign_object_ids&gt;`. This is unique in the
             * context of the server instance.
             * </pre>
             *
             * <code>string id = 1;</code>
             */
            public String getId() {
                Object ref = id_;
                if (!(ref instanceof String)) {
                    com.google.protobuf.ByteString bs =
                            (com.google.protobuf.ByteString) ref;
                    String s = bs.toStringUtf8();
                    id_ = s;
                    return s;
                } else {
                    return (String) ref;
                }
            }

            /**
             * <pre>
             * The Individual's :ref:`id &lt;apidesign_object_ids&gt;`. This is unique in the
             * context of the server instance.
             * </pre>
             *
             * <code>string id = 1;</code>
             */
            public com.google.protobuf.ByteString
            getIdBytes() {
                Object ref = id_;
                if (ref instanceof String) {
                    com.google.protobuf.ByteString b =
                            com.google.protobuf.ByteString.copyFromUtf8(
                                    (String) ref);
                    id_ = b;
                    return b;
                } else {
                    return (com.google.protobuf.ByteString) ref;
                }
            }

            /**
             * <pre>
             * The Individual's :ref:`id &lt;apidesign_object_ids&gt;`. This is unique in the
             * context of the server instance.
             * </pre>
             *
             * <code>string id = 1;</code>
             */
            public Builder setId(
                    String value) {
                if (value == null) {
                    throw new NullPointerException();
                }

                id_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * The Individual's :ref:`id &lt;apidesign_object_ids&gt;`. This is unique in the
             * context of the server instance.
             * </pre>
             *
             * <code>string id = 1;</code>
             */
            public Builder clearId() {

                id_ = getDefaultInstance().getId();
                onChanged();
                return this;
            }

            /**
             * <pre>
             * The Individual's :ref:`id &lt;apidesign_object_ids&gt;`. This is unique in the
             * context of the server instance.
             * </pre>
             *
             * <code>string id = 1;</code>
             */
            public Builder setIdBytes(
                    com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                checkByteStringIsUtf8(value);

                id_ = value;
                onChanged();
                return this;
            }

            private Object datasetId_ = "";

            /**
             * <pre>
             * The ID of the dataset this Individual belongs to.
             * </pre>
             *
             * <code>string dataset_id = 2;</code>
             */
            public String getDatasetId() {
                Object ref = datasetId_;
                if (!(ref instanceof String)) {
                    com.google.protobuf.ByteString bs =
                            (com.google.protobuf.ByteString) ref;
                    String s = bs.toStringUtf8();
                    datasetId_ = s;
                    return s;
                } else {
                    return (String) ref;
                }
            }

            /**
             * <pre>
             * The ID of the dataset this Individual belongs to.
             * </pre>
             *
             * <code>string dataset_id = 2;</code>
             */
            public com.google.protobuf.ByteString
            getDatasetIdBytes() {
                Object ref = datasetId_;
                if (ref instanceof String) {
                    com.google.protobuf.ByteString b =
                            com.google.protobuf.ByteString.copyFromUtf8(
                                    (String) ref);
                    datasetId_ = b;
                    return b;
                } else {
                    return (com.google.protobuf.ByteString) ref;
                }
            }

            /**
             * <pre>
             * The ID of the dataset this Individual belongs to.
             * </pre>
             *
             * <code>string dataset_id = 2;</code>
             */
            public Builder setDatasetId(
                    String value) {
                if (value == null) {
                    throw new NullPointerException();
                }

                datasetId_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * The ID of the dataset this Individual belongs to.
             * </pre>
             *
             * <code>string dataset_id = 2;</code>
             */
            public Builder clearDatasetId() {

                datasetId_ = getDefaultInstance().getDatasetId();
                onChanged();
                return this;
            }

            /**
             * <pre>
             * The ID of the dataset this Individual belongs to.
             * </pre>
             *
             * <code>string dataset_id = 2;</code>
             */
            public Builder setDatasetIdBytes(
                    com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                checkByteStringIsUtf8(value);

                datasetId_ = value;
                onChanged();
                return this;
            }

            private Object name_ = "";

            /**
             * <pre>
             * The Individual's name. This is a label or symbolic identifier for the individual.
             * </pre>
             *
             * <code>string name = 3;</code>
             */
            public String getName() {
                Object ref = name_;
                if (!(ref instanceof String)) {
                    com.google.protobuf.ByteString bs =
                            (com.google.protobuf.ByteString) ref;
                    String s = bs.toStringUtf8();
                    name_ = s;
                    return s;
                } else {
                    return (String) ref;
                }
            }

            /**
             * <pre>
             * The Individual's name. This is a label or symbolic identifier for the individual.
             * </pre>
             *
             * <code>string name = 3;</code>
             */
            public com.google.protobuf.ByteString
            getNameBytes() {
                Object ref = name_;
                if (ref instanceof String) {
                    com.google.protobuf.ByteString b =
                            com.google.protobuf.ByteString.copyFromUtf8(
                                    (String) ref);
                    name_ = b;
                    return b;
                } else {
                    return (com.google.protobuf.ByteString) ref;
                }
            }

            /**
             * <pre>
             * The Individual's name. This is a label or symbolic identifier for the individual.
             * </pre>
             *
             * <code>string name = 3;</code>
             */
            public Builder setName(
                    String value) {
                if (value == null) {
                    throw new NullPointerException();
                }

                name_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * The Individual's name. This is a label or symbolic identifier for the individual.
             * </pre>
             *
             * <code>string name = 3;</code>
             */
            public Builder clearName() {

                name_ = getDefaultInstance().getName();
                onChanged();
                return this;
            }

            /**
             * <pre>
             * The Individual's name. This is a label or symbolic identifier for the individual.
             * </pre>
             *
             * <code>string name = 3;</code>
             */
            public Builder setNameBytes(
                    com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                checkByteStringIsUtf8(value);

                name_ = value;
                onChanged();
                return this;
            }

            private Object description_ = "";

            /**
             * <pre>
             * The Individual's description. This attribute contains human readable text.
             * The "description" attributes should not contain any structured data.
             * </pre>
             *
             * <code>string description = 4;</code>
             */
            public String getDescription() {
                Object ref = description_;
                if (!(ref instanceof String)) {
                    com.google.protobuf.ByteString bs =
                            (com.google.protobuf.ByteString) ref;
                    String s = bs.toStringUtf8();
                    description_ = s;
                    return s;
                } else {
                    return (String) ref;
                }
            }

            /**
             * <pre>
             * The Individual's description. This attribute contains human readable text.
             * The "description" attributes should not contain any structured data.
             * </pre>
             *
             * <code>string description = 4;</code>
             */
            public com.google.protobuf.ByteString
            getDescriptionBytes() {
                Object ref = description_;
                if (ref instanceof String) {
                    com.google.protobuf.ByteString b =
                            com.google.protobuf.ByteString.copyFromUtf8(
                                    (String) ref);
                    description_ = b;
                    return b;
                } else {
                    return (com.google.protobuf.ByteString) ref;
                }
            }

            /**
             * <pre>
             * The Individual's description. This attribute contains human readable text.
             * The "description" attributes should not contain any structured data.
             * </pre>
             *
             * <code>string description = 4;</code>
             */
            public Builder setDescription(
                    String value) {
                if (value == null) {
                    throw new NullPointerException();
                }

                description_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * The Individual's description. This attribute contains human readable text.
             * The "description" attributes should not contain any structured data.
             * </pre>
             *
             * <code>string description = 4;</code>
             */
            public Builder clearDescription() {

                description_ = getDefaultInstance().getDescription();
                onChanged();
                return this;
            }

            /**
             * <pre>
             * The Individual's description. This attribute contains human readable text.
             * The "description" attributes should not contain any structured data.
             * </pre>
             *
             * <code>string description = 4;</code>
             */
            public Builder setDescriptionBytes(
                    com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                checkByteStringIsUtf8(value);

                description_ = value;
                onChanged();
                return this;
            }

            private java.util.List<Biometadata.BioCharacteristic> bioCharacteristics_ =
                    java.util.Collections.emptyList();

            private void ensureBioCharacteristicsIsMutable() {
                if (!((bitField0_ & 0x00000010) == 0x00000010)) {
                    bioCharacteristics_ = new java.util.ArrayList<Biometadata.BioCharacteristic>(bioCharacteristics_);
                    bitField0_ |= 0x00000010;
                }
            }

            private com.google.protobuf.RepeatedFieldBuilderV3<
                    Biometadata.BioCharacteristic, Biometadata.BioCharacteristic.Builder, Biometadata.BioCharacteristicOrBuilder> bioCharacteristicsBuilder_;

            /**
             * <pre>
             * The bio_characteristics attribute uses lists of BioCharacteristic objects to describe
             * diseases, phenotypes ... associated with this Individual. The values here may
             * overlap with values recorded in related records. As general rule, "germline"
             * or non-organ specific afflictions ("Li-fraumeni Syndrome", "Diabetes mellitus"
             * should be recorded here, whereas "Infiltrating duct carcinoma" may be both
             * recorded here (as known disease history)
             * as well as in the "Biosample.bio_characteristics" attribute.
             * For querying all disease contexts related to an individual, therefore queries
             * should cover ($in) [Individual.bio_characteristics OR Biosample.bio_characteristics].
             * </pre>
             *
             * <code>repeated .BioCharacteristic bio_characteristics = 9;</code>
             */
            public java.util.List<Biometadata.BioCharacteristic> getBioCharacteristicsList() {
                if (bioCharacteristicsBuilder_ == null) {
                    return java.util.Collections.unmodifiableList(bioCharacteristics_);
                } else {
                    return bioCharacteristicsBuilder_.getMessageList();
                }
            }

            /**
             * <pre>
             * The bio_characteristics attribute uses lists of BioCharacteristic objects to describe
             * diseases, phenotypes ... associated with this Individual. The values here may
             * overlap with values recorded in related records. As general rule, "germline"
             * or non-organ specific afflictions ("Li-fraumeni Syndrome", "Diabetes mellitus"
             * should be recorded here, whereas "Infiltrating duct carcinoma" may be both
             * recorded here (as known disease history)
             * as well as in the "Biosample.bio_characteristics" attribute.
             * For querying all disease contexts related to an individual, therefore queries
             * should cover ($in) [Individual.bio_characteristics OR Biosample.bio_characteristics].
             * </pre>
             *
             * <code>repeated .BioCharacteristic bio_characteristics = 9;</code>
             */
            public int getBioCharacteristicsCount() {
                if (bioCharacteristicsBuilder_ == null) {
                    return bioCharacteristics_.size();
                } else {
                    return bioCharacteristicsBuilder_.getCount();
                }
            }

            /**
             * <pre>
             * The bio_characteristics attribute uses lists of BioCharacteristic objects to describe
             * diseases, phenotypes ... associated with this Individual. The values here may
             * overlap with values recorded in related records. As general rule, "germline"
             * or non-organ specific afflictions ("Li-fraumeni Syndrome", "Diabetes mellitus"
             * should be recorded here, whereas "Infiltrating duct carcinoma" may be both
             * recorded here (as known disease history)
             * as well as in the "Biosample.bio_characteristics" attribute.
             * For querying all disease contexts related to an individual, therefore queries
             * should cover ($in) [Individual.bio_characteristics OR Biosample.bio_characteristics].
             * </pre>
             *
             * <code>repeated .BioCharacteristic bio_characteristics = 9;</code>
             */
            public Biometadata.BioCharacteristic getBioCharacteristics(int index) {
                if (bioCharacteristicsBuilder_ == null) {
                    return bioCharacteristics_.get(index);
                } else {
                    return bioCharacteristicsBuilder_.getMessage(index);
                }
            }

            /**
             * <pre>
             * The bio_characteristics attribute uses lists of BioCharacteristic objects to describe
             * diseases, phenotypes ... associated with this Individual. The values here may
             * overlap with values recorded in related records. As general rule, "germline"
             * or non-organ specific afflictions ("Li-fraumeni Syndrome", "Diabetes mellitus"
             * should be recorded here, whereas "Infiltrating duct carcinoma" may be both
             * recorded here (as known disease history)
             * as well as in the "Biosample.bio_characteristics" attribute.
             * For querying all disease contexts related to an individual, therefore queries
             * should cover ($in) [Individual.bio_characteristics OR Biosample.bio_characteristics].
             * </pre>
             *
             * <code>repeated .BioCharacteristic bio_characteristics = 9;</code>
             */
            public Builder setBioCharacteristics(
                    int index, Biometadata.BioCharacteristic value) {
                if (bioCharacteristicsBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureBioCharacteristicsIsMutable();
                    bioCharacteristics_.set(index, value);
                    onChanged();
                } else {
                    bioCharacteristicsBuilder_.setMessage(index, value);
                }
                return this;
            }

            /**
             * <pre>
             * The bio_characteristics attribute uses lists of BioCharacteristic objects to describe
             * diseases, phenotypes ... associated with this Individual. The values here may
             * overlap with values recorded in related records. As general rule, "germline"
             * or non-organ specific afflictions ("Li-fraumeni Syndrome", "Diabetes mellitus"
             * should be recorded here, whereas "Infiltrating duct carcinoma" may be both
             * recorded here (as known disease history)
             * as well as in the "Biosample.bio_characteristics" attribute.
             * For querying all disease contexts related to an individual, therefore queries
             * should cover ($in) [Individual.bio_characteristics OR Biosample.bio_characteristics].
             * </pre>
             *
             * <code>repeated .BioCharacteristic bio_characteristics = 9;</code>
             */
            public Builder setBioCharacteristics(
                    int index, Biometadata.BioCharacteristic.Builder builderForValue) {
                if (bioCharacteristicsBuilder_ == null) {
                    ensureBioCharacteristicsIsMutable();
                    bioCharacteristics_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    bioCharacteristicsBuilder_.setMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <pre>
             * The bio_characteristics attribute uses lists of BioCharacteristic objects to describe
             * diseases, phenotypes ... associated with this Individual. The values here may
             * overlap with values recorded in related records. As general rule, "germline"
             * or non-organ specific afflictions ("Li-fraumeni Syndrome", "Diabetes mellitus"
             * should be recorded here, whereas "Infiltrating duct carcinoma" may be both
             * recorded here (as known disease history)
             * as well as in the "Biosample.bio_characteristics" attribute.
             * For querying all disease contexts related to an individual, therefore queries
             * should cover ($in) [Individual.bio_characteristics OR Biosample.bio_characteristics].
             * </pre>
             *
             * <code>repeated .BioCharacteristic bio_characteristics = 9;</code>
             */
            public Builder addBioCharacteristics(Biometadata.BioCharacteristic value) {
                if (bioCharacteristicsBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureBioCharacteristicsIsMutable();
                    bioCharacteristics_.add(value);
                    onChanged();
                } else {
                    bioCharacteristicsBuilder_.addMessage(value);
                }
                return this;
            }

            /**
             * <pre>
             * The bio_characteristics attribute uses lists of BioCharacteristic objects to describe
             * diseases, phenotypes ... associated with this Individual. The values here may
             * overlap with values recorded in related records. As general rule, "germline"
             * or non-organ specific afflictions ("Li-fraumeni Syndrome", "Diabetes mellitus"
             * should be recorded here, whereas "Infiltrating duct carcinoma" may be both
             * recorded here (as known disease history)
             * as well as in the "Biosample.bio_characteristics" attribute.
             * For querying all disease contexts related to an individual, therefore queries
             * should cover ($in) [Individual.bio_characteristics OR Biosample.bio_characteristics].
             * </pre>
             *
             * <code>repeated .BioCharacteristic bio_characteristics = 9;</code>
             */
            public Builder addBioCharacteristics(
                    int index, Biometadata.BioCharacteristic value) {
                if (bioCharacteristicsBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureBioCharacteristicsIsMutable();
                    bioCharacteristics_.add(index, value);
                    onChanged();
                } else {
                    bioCharacteristicsBuilder_.addMessage(index, value);
                }
                return this;
            }

            /**
             * <pre>
             * The bio_characteristics attribute uses lists of BioCharacteristic objects to describe
             * diseases, phenotypes ... associated with this Individual. The values here may
             * overlap with values recorded in related records. As general rule, "germline"
             * or non-organ specific afflictions ("Li-fraumeni Syndrome", "Diabetes mellitus"
             * should be recorded here, whereas "Infiltrating duct carcinoma" may be both
             * recorded here (as known disease history)
             * as well as in the "Biosample.bio_characteristics" attribute.
             * For querying all disease contexts related to an individual, therefore queries
             * should cover ($in) [Individual.bio_characteristics OR Biosample.bio_characteristics].
             * </pre>
             *
             * <code>repeated .BioCharacteristic bio_characteristics = 9;</code>
             */
            public Builder addBioCharacteristics(
                    Biometadata.BioCharacteristic.Builder builderForValue) {
                if (bioCharacteristicsBuilder_ == null) {
                    ensureBioCharacteristicsIsMutable();
                    bioCharacteristics_.add(builderForValue.build());
                    onChanged();
                } else {
                    bioCharacteristicsBuilder_.addMessage(builderForValue.build());
                }
                return this;
            }

            /**
             * <pre>
             * The bio_characteristics attribute uses lists of BioCharacteristic objects to describe
             * diseases, phenotypes ... associated with this Individual. The values here may
             * overlap with values recorded in related records. As general rule, "germline"
             * or non-organ specific afflictions ("Li-fraumeni Syndrome", "Diabetes mellitus"
             * should be recorded here, whereas "Infiltrating duct carcinoma" may be both
             * recorded here (as known disease history)
             * as well as in the "Biosample.bio_characteristics" attribute.
             * For querying all disease contexts related to an individual, therefore queries
             * should cover ($in) [Individual.bio_characteristics OR Biosample.bio_characteristics].
             * </pre>
             *
             * <code>repeated .BioCharacteristic bio_characteristics = 9;</code>
             */
            public Builder addBioCharacteristics(
                    int index, Biometadata.BioCharacteristic.Builder builderForValue) {
                if (bioCharacteristicsBuilder_ == null) {
                    ensureBioCharacteristicsIsMutable();
                    bioCharacteristics_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    bioCharacteristicsBuilder_.addMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <pre>
             * The bio_characteristics attribute uses lists of BioCharacteristic objects to describe
             * diseases, phenotypes ... associated with this Individual. The values here may
             * overlap with values recorded in related records. As general rule, "germline"
             * or non-organ specific afflictions ("Li-fraumeni Syndrome", "Diabetes mellitus"
             * should be recorded here, whereas "Infiltrating duct carcinoma" may be both
             * recorded here (as known disease history)
             * as well as in the "Biosample.bio_characteristics" attribute.
             * For querying all disease contexts related to an individual, therefore queries
             * should cover ($in) [Individual.bio_characteristics OR Biosample.bio_characteristics].
             * </pre>
             *
             * <code>repeated .BioCharacteristic bio_characteristics = 9;</code>
             */
            public Builder addAllBioCharacteristics(
                    Iterable<? extends Biometadata.BioCharacteristic> values) {
                if (bioCharacteristicsBuilder_ == null) {
                    ensureBioCharacteristicsIsMutable();
                    com.google.protobuf.AbstractMessageLite.Builder.addAll(
                            values, bioCharacteristics_);
                    onChanged();
                } else {
                    bioCharacteristicsBuilder_.addAllMessages(values);
                }
                return this;
            }

            /**
             * <pre>
             * The bio_characteristics attribute uses lists of BioCharacteristic objects to describe
             * diseases, phenotypes ... associated with this Individual. The values here may
             * overlap with values recorded in related records. As general rule, "germline"
             * or non-organ specific afflictions ("Li-fraumeni Syndrome", "Diabetes mellitus"
             * should be recorded here, whereas "Infiltrating duct carcinoma" may be both
             * recorded here (as known disease history)
             * as well as in the "Biosample.bio_characteristics" attribute.
             * For querying all disease contexts related to an individual, therefore queries
             * should cover ($in) [Individual.bio_characteristics OR Biosample.bio_characteristics].
             * </pre>
             *
             * <code>repeated .BioCharacteristic bio_characteristics = 9;</code>
             */
            public Builder clearBioCharacteristics() {
                if (bioCharacteristicsBuilder_ == null) {
                    bioCharacteristics_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000010);
                    onChanged();
                } else {
                    bioCharacteristicsBuilder_.clear();
                }
                return this;
            }

            /**
             * <pre>
             * The bio_characteristics attribute uses lists of BioCharacteristic objects to describe
             * diseases, phenotypes ... associated with this Individual. The values here may
             * overlap with values recorded in related records. As general rule, "germline"
             * or non-organ specific afflictions ("Li-fraumeni Syndrome", "Diabetes mellitus"
             * should be recorded here, whereas "Infiltrating duct carcinoma" may be both
             * recorded here (as known disease history)
             * as well as in the "Biosample.bio_characteristics" attribute.
             * For querying all disease contexts related to an individual, therefore queries
             * should cover ($in) [Individual.bio_characteristics OR Biosample.bio_characteristics].
             * </pre>
             *
             * <code>repeated .BioCharacteristic bio_characteristics = 9;</code>
             */
            public Builder removeBioCharacteristics(int index) {
                if (bioCharacteristicsBuilder_ == null) {
                    ensureBioCharacteristicsIsMutable();
                    bioCharacteristics_.remove(index);
                    onChanged();
                } else {
                    bioCharacteristicsBuilder_.remove(index);
                }
                return this;
            }

            /**
             * <pre>
             * The bio_characteristics attribute uses lists of BioCharacteristic objects to describe
             * diseases, phenotypes ... associated with this Individual. The values here may
             * overlap with values recorded in related records. As general rule, "germline"
             * or non-organ specific afflictions ("Li-fraumeni Syndrome", "Diabetes mellitus"
             * should be recorded here, whereas "Infiltrating duct carcinoma" may be both
             * recorded here (as known disease history)
             * as well as in the "Biosample.bio_characteristics" attribute.
             * For querying all disease contexts related to an individual, therefore queries
             * should cover ($in) [Individual.bio_characteristics OR Biosample.bio_characteristics].
             * </pre>
             *
             * <code>repeated .BioCharacteristic bio_characteristics = 9;</code>
             */
            public Biometadata.BioCharacteristic.Builder getBioCharacteristicsBuilder(
                    int index) {
                return getBioCharacteristicsFieldBuilder().getBuilder(index);
            }

            /**
             * <pre>
             * The bio_characteristics attribute uses lists of BioCharacteristic objects to describe
             * diseases, phenotypes ... associated with this Individual. The values here may
             * overlap with values recorded in related records. As general rule, "germline"
             * or non-organ specific afflictions ("Li-fraumeni Syndrome", "Diabetes mellitus"
             * should be recorded here, whereas "Infiltrating duct carcinoma" may be both
             * recorded here (as known disease history)
             * as well as in the "Biosample.bio_characteristics" attribute.
             * For querying all disease contexts related to an individual, therefore queries
             * should cover ($in) [Individual.bio_characteristics OR Biosample.bio_characteristics].
             * </pre>
             *
             * <code>repeated .BioCharacteristic bio_characteristics = 9;</code>
             */
            public Biometadata.BioCharacteristicOrBuilder getBioCharacteristicsOrBuilder(
                    int index) {
                if (bioCharacteristicsBuilder_ == null) {
                    return bioCharacteristics_.get(index);
                } else {
                    return bioCharacteristicsBuilder_.getMessageOrBuilder(index);
                }
            }

            /**
             * <pre>
             * The bio_characteristics attribute uses lists of BioCharacteristic objects to describe
             * diseases, phenotypes ... associated with this Individual. The values here may
             * overlap with values recorded in related records. As general rule, "germline"
             * or non-organ specific afflictions ("Li-fraumeni Syndrome", "Diabetes mellitus"
             * should be recorded here, whereas "Infiltrating duct carcinoma" may be both
             * recorded here (as known disease history)
             * as well as in the "Biosample.bio_characteristics" attribute.
             * For querying all disease contexts related to an individual, therefore queries
             * should cover ($in) [Individual.bio_characteristics OR Biosample.bio_characteristics].
             * </pre>
             *
             * <code>repeated .BioCharacteristic bio_characteristics = 9;</code>
             */
            public java.util.List<? extends Biometadata.BioCharacteristicOrBuilder>
            getBioCharacteristicsOrBuilderList() {
                if (bioCharacteristicsBuilder_ != null) {
                    return bioCharacteristicsBuilder_.getMessageOrBuilderList();
                } else {
                    return java.util.Collections.unmodifiableList(bioCharacteristics_);
                }
            }

            /**
             * <pre>
             * The bio_characteristics attribute uses lists of BioCharacteristic objects to describe
             * diseases, phenotypes ... associated with this Individual. The values here may
             * overlap with values recorded in related records. As general rule, "germline"
             * or non-organ specific afflictions ("Li-fraumeni Syndrome", "Diabetes mellitus"
             * should be recorded here, whereas "Infiltrating duct carcinoma" may be both
             * recorded here (as known disease history)
             * as well as in the "Biosample.bio_characteristics" attribute.
             * For querying all disease contexts related to an individual, therefore queries
             * should cover ($in) [Individual.bio_characteristics OR Biosample.bio_characteristics].
             * </pre>
             *
             * <code>repeated .BioCharacteristic bio_characteristics = 9;</code>
             */
            public Biometadata.BioCharacteristic.Builder addBioCharacteristicsBuilder() {
                return getBioCharacteristicsFieldBuilder().addBuilder(
                        Biometadata.BioCharacteristic.getDefaultInstance());
            }

            /**
             * <pre>
             * The bio_characteristics attribute uses lists of BioCharacteristic objects to describe
             * diseases, phenotypes ... associated with this Individual. The values here may
             * overlap with values recorded in related records. As general rule, "germline"
             * or non-organ specific afflictions ("Li-fraumeni Syndrome", "Diabetes mellitus"
             * should be recorded here, whereas "Infiltrating duct carcinoma" may be both
             * recorded here (as known disease history)
             * as well as in the "Biosample.bio_characteristics" attribute.
             * For querying all disease contexts related to an individual, therefore queries
             * should cover ($in) [Individual.bio_characteristics OR Biosample.bio_characteristics].
             * </pre>
             *
             * <code>repeated .BioCharacteristic bio_characteristics = 9;</code>
             */
            public Biometadata.BioCharacteristic.Builder addBioCharacteristicsBuilder(
                    int index) {
                return getBioCharacteristicsFieldBuilder().addBuilder(
                        index, Biometadata.BioCharacteristic.getDefaultInstance());
            }

            /**
             * <pre>
             * The bio_characteristics attribute uses lists of BioCharacteristic objects to describe
             * diseases, phenotypes ... associated with this Individual. The values here may
             * overlap with values recorded in related records. As general rule, "germline"
             * or non-organ specific afflictions ("Li-fraumeni Syndrome", "Diabetes mellitus"
             * should be recorded here, whereas "Infiltrating duct carcinoma" may be both
             * recorded here (as known disease history)
             * as well as in the "Biosample.bio_characteristics" attribute.
             * For querying all disease contexts related to an individual, therefore queries
             * should cover ($in) [Individual.bio_characteristics OR Biosample.bio_characteristics].
             * </pre>
             *
             * <code>repeated .BioCharacteristic bio_characteristics = 9;</code>
             */
            public java.util.List<Biometadata.BioCharacteristic.Builder>
            getBioCharacteristicsBuilderList() {
                return getBioCharacteristicsFieldBuilder().getBuilderList();
            }

            private com.google.protobuf.RepeatedFieldBuilderV3<
                    Biometadata.BioCharacteristic, Biometadata.BioCharacteristic.Builder, Biometadata.BioCharacteristicOrBuilder>
            getBioCharacteristicsFieldBuilder() {
                if (bioCharacteristicsBuilder_ == null) {
                    bioCharacteristicsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
                            Biometadata.BioCharacteristic, Biometadata.BioCharacteristic.Builder, Biometadata.BioCharacteristicOrBuilder>(
                            bioCharacteristics_,
                            ((bitField0_ & 0x00000010) == 0x00000010),
                            getParentForChildren(),
                            isClean());
                    bioCharacteristics_ = null;
                }
                return bioCharacteristicsBuilder_;
            }

            private Object created_ = "";

            /**
             * <pre>
             * The :ref:`ISO 8601&lt;metadata_date_time&gt;` time at which this Individual's record
             * was created.
             * </pre>
             *
             * <code>string created = 5;</code>
             */
            public String getCreated() {
                Object ref = created_;
                if (!(ref instanceof String)) {
                    com.google.protobuf.ByteString bs =
                            (com.google.protobuf.ByteString) ref;
                    String s = bs.toStringUtf8();
                    created_ = s;
                    return s;
                } else {
                    return (String) ref;
                }
            }

            /**
             * <pre>
             * The :ref:`ISO 8601&lt;metadata_date_time&gt;` time at which this Individual's record
             * was created.
             * </pre>
             *
             * <code>string created = 5;</code>
             */
            public com.google.protobuf.ByteString
            getCreatedBytes() {
                Object ref = created_;
                if (ref instanceof String) {
                    com.google.protobuf.ByteString b =
                            com.google.protobuf.ByteString.copyFromUtf8(
                                    (String) ref);
                    created_ = b;
                    return b;
                } else {
                    return (com.google.protobuf.ByteString) ref;
                }
            }

            /**
             * <pre>
             * The :ref:`ISO 8601&lt;metadata_date_time&gt;` time at which this Individual's record
             * was created.
             * </pre>
             *
             * <code>string created = 5;</code>
             */
            public Builder setCreated(
                    String value) {
                if (value == null) {
                    throw new NullPointerException();
                }

                created_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * The :ref:`ISO 8601&lt;metadata_date_time&gt;` time at which this Individual's record
             * was created.
             * </pre>
             *
             * <code>string created = 5;</code>
             */
            public Builder clearCreated() {

                created_ = getDefaultInstance().getCreated();
                onChanged();
                return this;
            }

            /**
             * <pre>
             * The :ref:`ISO 8601&lt;metadata_date_time&gt;` time at which this Individual's record
             * was created.
             * </pre>
             *
             * <code>string created = 5;</code>
             */
            public Builder setCreatedBytes(
                    com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                checkByteStringIsUtf8(value);

                created_ = value;
                onChanged();
                return this;
            }

            private Object updated_ = "";

            /**
             * <pre>
             * The :ref:`ISO 8601&lt;metadata_date_time&gt;` time at which this Individual record
             * was updated.
             * </pre>
             *
             * <code>string updated = 6;</code>
             */
            public String getUpdated() {
                Object ref = updated_;
                if (!(ref instanceof String)) {
                    com.google.protobuf.ByteString bs =
                            (com.google.protobuf.ByteString) ref;
                    String s = bs.toStringUtf8();
                    updated_ = s;
                    return s;
                } else {
                    return (String) ref;
                }
            }

            /**
             * <pre>
             * The :ref:`ISO 8601&lt;metadata_date_time&gt;` time at which this Individual record
             * was updated.
             * </pre>
             *
             * <code>string updated = 6;</code>
             */
            public com.google.protobuf.ByteString
            getUpdatedBytes() {
                Object ref = updated_;
                if (ref instanceof String) {
                    com.google.protobuf.ByteString b =
                            com.google.protobuf.ByteString.copyFromUtf8(
                                    (String) ref);
                    updated_ = b;
                    return b;
                } else {
                    return (com.google.protobuf.ByteString) ref;
                }
            }

            /**
             * <pre>
             * The :ref:`ISO 8601&lt;metadata_date_time&gt;` time at which this Individual record
             * was updated.
             * </pre>
             *
             * <code>string updated = 6;</code>
             */
            public Builder setUpdated(
                    String value) {
                if (value == null) {
                    throw new NullPointerException();
                }

                updated_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * The :ref:`ISO 8601&lt;metadata_date_time&gt;` time at which this Individual record
             * was updated.
             * </pre>
             *
             * <code>string updated = 6;</code>
             */
            public Builder clearUpdated() {

                updated_ = getDefaultInstance().getUpdated();
                onChanged();
                return this;
            }

            /**
             * <pre>
             * The :ref:`ISO 8601&lt;metadata_date_time&gt;` time at which this Individual record
             * was updated.
             * </pre>
             *
             * <code>string updated = 6;</code>
             */
            public Builder setUpdatedBytes(
                    com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                checkByteStringIsUtf8(value);

                updated_ = value;
                onChanged();
                return this;
            }

            private Shared.OntologyTerm species_ = null;
            private com.google.protobuf.SingleFieldBuilderV3<
                    Shared.OntologyTerm, Shared.OntologyTerm.Builder, Shared.OntologyTermOrBuilder> speciesBuilder_;

            /**
             * <pre>
             * For a representation of an NCBI Taxon ID as an OntologyTerm, see
             * NCBITaxon Ontology
             *   http://www.obofoundry.org/ontology/ncbitaxon.html
             * For example, 'Homo sapiens' has the ID 9606. The NCBITaxon ontology ID for
             * this is NCBITaxon:9606, and therefore:
             *   species : { term_id: "NCBITaxon:9606", term : "Homo sapiens" }
             * </pre>
             *
             * <code>.OntologyTerm species = 7;</code>
             */
            public boolean hasSpecies() {
                return speciesBuilder_ != null || species_ != null;
            }

            /**
             * <pre>
             * For a representation of an NCBI Taxon ID as an OntologyTerm, see
             * NCBITaxon Ontology
             *   http://www.obofoundry.org/ontology/ncbitaxon.html
             * For example, 'Homo sapiens' has the ID 9606. The NCBITaxon ontology ID for
             * this is NCBITaxon:9606, and therefore:
             *   species : { term_id: "NCBITaxon:9606", term : "Homo sapiens" }
             * </pre>
             *
             * <code>.OntologyTerm species = 7;</code>
             */
            public Shared.OntologyTerm getSpecies() {
                if (speciesBuilder_ == null) {
                    return species_ == null ? Shared.OntologyTerm.getDefaultInstance() : species_;
                } else {
                    return speciesBuilder_.getMessage();
                }
            }

            /**
             * <pre>
             * For a representation of an NCBI Taxon ID as an OntologyTerm, see
             * NCBITaxon Ontology
             *   http://www.obofoundry.org/ontology/ncbitaxon.html
             * For example, 'Homo sapiens' has the ID 9606. The NCBITaxon ontology ID for
             * this is NCBITaxon:9606, and therefore:
             *   species : { term_id: "NCBITaxon:9606", term : "Homo sapiens" }
             * </pre>
             *
             * <code>.OntologyTerm species = 7;</code>
             */
            public Builder setSpecies(Shared.OntologyTerm value) {
                if (speciesBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    species_ = value;
                    onChanged();
                } else {
                    speciesBuilder_.setMessage(value);
                }

                return this;
            }

            /**
             * <pre>
             * For a representation of an NCBI Taxon ID as an OntologyTerm, see
             * NCBITaxon Ontology
             *   http://www.obofoundry.org/ontology/ncbitaxon.html
             * For example, 'Homo sapiens' has the ID 9606. The NCBITaxon ontology ID for
             * this is NCBITaxon:9606, and therefore:
             *   species : { term_id: "NCBITaxon:9606", term : "Homo sapiens" }
             * </pre>
             *
             * <code>.OntologyTerm species = 7;</code>
             */
            public Builder setSpecies(
                    Shared.OntologyTerm.Builder builderForValue) {
                if (speciesBuilder_ == null) {
                    species_ = builderForValue.build();
                    onChanged();
                } else {
                    speciesBuilder_.setMessage(builderForValue.build());
                }

                return this;
            }

            /**
             * <pre>
             * For a representation of an NCBI Taxon ID as an OntologyTerm, see
             * NCBITaxon Ontology
             *   http://www.obofoundry.org/ontology/ncbitaxon.html
             * For example, 'Homo sapiens' has the ID 9606. The NCBITaxon ontology ID for
             * this is NCBITaxon:9606, and therefore:
             *   species : { term_id: "NCBITaxon:9606", term : "Homo sapiens" }
             * </pre>
             *
             * <code>.OntologyTerm species = 7;</code>
             */
            public Builder mergeSpecies(Shared.OntologyTerm value) {
                if (speciesBuilder_ == null) {
                    if (species_ != null) {
                        species_ =
                                Shared.OntologyTerm.newBuilder(species_).mergeFrom(value).buildPartial();
                    } else {
                        species_ = value;
                    }
                    onChanged();
                } else {
                    speciesBuilder_.mergeFrom(value);
                }

                return this;
            }

            /**
             * <pre>
             * For a representation of an NCBI Taxon ID as an OntologyTerm, see
             * NCBITaxon Ontology
             *   http://www.obofoundry.org/ontology/ncbitaxon.html
             * For example, 'Homo sapiens' has the ID 9606. The NCBITaxon ontology ID for
             * this is NCBITaxon:9606, and therefore:
             *   species : { term_id: "NCBITaxon:9606", term : "Homo sapiens" }
             * </pre>
             *
             * <code>.OntologyTerm species = 7;</code>
             */
            public Builder clearSpecies() {
                if (speciesBuilder_ == null) {
                    species_ = null;
                    onChanged();
                } else {
                    species_ = null;
                    speciesBuilder_ = null;
                }

                return this;
            }

            /**
             * <pre>
             * For a representation of an NCBI Taxon ID as an OntologyTerm, see
             * NCBITaxon Ontology
             *   http://www.obofoundry.org/ontology/ncbitaxon.html
             * For example, 'Homo sapiens' has the ID 9606. The NCBITaxon ontology ID for
             * this is NCBITaxon:9606, and therefore:
             *   species : { term_id: "NCBITaxon:9606", term : "Homo sapiens" }
             * </pre>
             *
             * <code>.OntologyTerm species = 7;</code>
             */
            public Shared.OntologyTerm.Builder getSpeciesBuilder() {

                onChanged();
                return getSpeciesFieldBuilder().getBuilder();
            }

            /**
             * <pre>
             * For a representation of an NCBI Taxon ID as an OntologyTerm, see
             * NCBITaxon Ontology
             *   http://www.obofoundry.org/ontology/ncbitaxon.html
             * For example, 'Homo sapiens' has the ID 9606. The NCBITaxon ontology ID for
             * this is NCBITaxon:9606, and therefore:
             *   species : { term_id: "NCBITaxon:9606", term : "Homo sapiens" }
             * </pre>
             *
             * <code>.OntologyTerm species = 7;</code>
             */
            public Shared.OntologyTermOrBuilder getSpeciesOrBuilder() {
                if (speciesBuilder_ != null) {
                    return speciesBuilder_.getMessageOrBuilder();
                } else {
                    return species_ == null ?
                            Shared.OntologyTerm.getDefaultInstance() : species_;
                }
            }

            /**
             * <pre>
             * For a representation of an NCBI Taxon ID as an OntologyTerm, see
             * NCBITaxon Ontology
             *   http://www.obofoundry.org/ontology/ncbitaxon.html
             * For example, 'Homo sapiens' has the ID 9606. The NCBITaxon ontology ID for
             * this is NCBITaxon:9606, and therefore:
             *   species : { term_id: "NCBITaxon:9606", term : "Homo sapiens" }
             * </pre>
             *
             * <code>.OntologyTerm species = 7;</code>
             */
            private com.google.protobuf.SingleFieldBuilderV3<
                    Shared.OntologyTerm, Shared.OntologyTerm.Builder, Shared.OntologyTermOrBuilder>
            getSpeciesFieldBuilder() {
                if (speciesBuilder_ == null) {
                    speciesBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                            Shared.OntologyTerm, Shared.OntologyTerm.Builder, Shared.OntologyTermOrBuilder>(
                            getSpecies(),
                            getParentForChildren(),
                            isClean());
                    species_ = null;
                }
                return speciesBuilder_;
            }

            private Shared.OntologyTerm sex_ = null;
            private com.google.protobuf.SingleFieldBuilderV3<
                    Shared.OntologyTerm, Shared.OntologyTerm.Builder, Shared.OntologyTermOrBuilder> sexBuilder_;

            /**
             * <pre>
             * The genetic sex of this individual.
             * Use `null` when unknown or not applicable.
             * Recommended: PATO http://purl.obolibrary.org/obo/PATO_0020000 ...
             * Example:
             *   sex : { term_id: "PATO:0020000", term : "female genetic sex" }
             * </pre>
             *
             * <code>.OntologyTerm sex = 8;</code>
             */
            public boolean hasSex() {
                return sexBuilder_ != null || sex_ != null;
            }

            /**
             * <pre>
             * The genetic sex of this individual.
             * Use `null` when unknown or not applicable.
             * Recommended: PATO http://purl.obolibrary.org/obo/PATO_0020000 ...
             * Example:
             *   sex : { term_id: "PATO:0020000", term : "female genetic sex" }
             * </pre>
             *
             * <code>.OntologyTerm sex = 8;</code>
             */
            public Shared.OntologyTerm getSex() {
                if (sexBuilder_ == null) {
                    return sex_ == null ? Shared.OntologyTerm.getDefaultInstance() : sex_;
                } else {
                    return sexBuilder_.getMessage();
                }
            }

            /**
             * <pre>
             * The genetic sex of this individual.
             * Use `null` when unknown or not applicable.
             * Recommended: PATO http://purl.obolibrary.org/obo/PATO_0020000 ...
             * Example:
             *   sex : { term_id: "PATO:0020000", term : "female genetic sex" }
             * </pre>
             *
             * <code>.OntologyTerm sex = 8;</code>
             */
            public Builder setSex(Shared.OntologyTerm value) {
                if (sexBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    sex_ = value;
                    onChanged();
                } else {
                    sexBuilder_.setMessage(value);
                }

                return this;
            }

            /**
             * <pre>
             * The genetic sex of this individual.
             * Use `null` when unknown or not applicable.
             * Recommended: PATO http://purl.obolibrary.org/obo/PATO_0020000 ...
             * Example:
             *   sex : { term_id: "PATO:0020000", term : "female genetic sex" }
             * </pre>
             *
             * <code>.OntologyTerm sex = 8;</code>
             */
            public Builder setSex(
                    Shared.OntologyTerm.Builder builderForValue) {
                if (sexBuilder_ == null) {
                    sex_ = builderForValue.build();
                    onChanged();
                } else {
                    sexBuilder_.setMessage(builderForValue.build());
                }

                return this;
            }

            /**
             * <pre>
             * The genetic sex of this individual.
             * Use `null` when unknown or not applicable.
             * Recommended: PATO http://purl.obolibrary.org/obo/PATO_0020000 ...
             * Example:
             *   sex : { term_id: "PATO:0020000", term : "female genetic sex" }
             * </pre>
             *
             * <code>.OntologyTerm sex = 8;</code>
             */
            public Builder mergeSex(Shared.OntologyTerm value) {
                if (sexBuilder_ == null) {
                    if (sex_ != null) {
                        sex_ =
                                Shared.OntologyTerm.newBuilder(sex_).mergeFrom(value).buildPartial();
                    } else {
                        sex_ = value;
                    }
                    onChanged();
                } else {
                    sexBuilder_.mergeFrom(value);
                }

                return this;
            }

            /**
             * <pre>
             * The genetic sex of this individual.
             * Use `null` when unknown or not applicable.
             * Recommended: PATO http://purl.obolibrary.org/obo/PATO_0020000 ...
             * Example:
             *   sex : { term_id: "PATO:0020000", term : "female genetic sex" }
             * </pre>
             *
             * <code>.OntologyTerm sex = 8;</code>
             */
            public Builder clearSex() {
                if (sexBuilder_ == null) {
                    sex_ = null;
                    onChanged();
                } else {
                    sex_ = null;
                    sexBuilder_ = null;
                }

                return this;
            }

            /**
             * <pre>
             * The genetic sex of this individual.
             * Use `null` when unknown or not applicable.
             * Recommended: PATO http://purl.obolibrary.org/obo/PATO_0020000 ...
             * Example:
             *   sex : { term_id: "PATO:0020000", term : "female genetic sex" }
             * </pre>
             *
             * <code>.OntologyTerm sex = 8;</code>
             */
            public Shared.OntologyTerm.Builder getSexBuilder() {

                onChanged();
                return getSexFieldBuilder().getBuilder();
            }

            /**
             * <pre>
             * The genetic sex of this individual.
             * Use `null` when unknown or not applicable.
             * Recommended: PATO http://purl.obolibrary.org/obo/PATO_0020000 ...
             * Example:
             *   sex : { term_id: "PATO:0020000", term : "female genetic sex" }
             * </pre>
             *
             * <code>.OntologyTerm sex = 8;</code>
             */
            public Shared.OntologyTermOrBuilder getSexOrBuilder() {
                if (sexBuilder_ != null) {
                    return sexBuilder_.getMessageOrBuilder();
                } else {
                    return sex_ == null ?
                            Shared.OntologyTerm.getDefaultInstance() : sex_;
                }
            }

            /**
             * <pre>
             * The genetic sex of this individual.
             * Use `null` when unknown or not applicable.
             * Recommended: PATO http://purl.obolibrary.org/obo/PATO_0020000 ...
             * Example:
             *   sex : { term_id: "PATO:0020000", term : "female genetic sex" }
             * </pre>
             *
             * <code>.OntologyTerm sex = 8;</code>
             */
            private com.google.protobuf.SingleFieldBuilderV3<
                    Shared.OntologyTerm, Shared.OntologyTerm.Builder, Shared.OntologyTermOrBuilder>
            getSexFieldBuilder() {
                if (sexBuilder_ == null) {
                    sexBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                            Shared.OntologyTerm, Shared.OntologyTerm.Builder, Shared.OntologyTermOrBuilder>(
                            getSex(),
                            getParentForChildren(),
                            isClean());
                    sex_ = null;
                }
                return sexBuilder_;
            }

            private Shared.GeoLocation location_ = null;
            private com.google.protobuf.SingleFieldBuilderV3<
                    Shared.GeoLocation, Shared.GeoLocation.Builder, Shared.GeoLocationOrBuilder> locationBuilder_;

            /**
             * <pre>
             * The address coded as geolocation where this individual originated from.
             * It is recommended that this reflects the place of birth or main place of
             * living, not necessarily a current address.
             * </pre>
             *
             * <code>.GeoLocation location = 13;</code>
             */
            public boolean hasLocation() {
                return locationBuilder_ != null || location_ != null;
            }

            /**
             * <pre>
             * The address coded as geolocation where this individual originated from.
             * It is recommended that this reflects the place of birth or main place of
             * living, not necessarily a current address.
             * </pre>
             *
             * <code>.GeoLocation location = 13;</code>
             */
            public Shared.GeoLocation getLocation() {
                if (locationBuilder_ == null) {
                    return location_ == null ? Shared.GeoLocation.getDefaultInstance() : location_;
                } else {
                    return locationBuilder_.getMessage();
                }
            }

            /**
             * <pre>
             * The address coded as geolocation where this individual originated from.
             * It is recommended that this reflects the place of birth or main place of
             * living, not necessarily a current address.
             * </pre>
             *
             * <code>.GeoLocation location = 13;</code>
             */
            public Builder setLocation(Shared.GeoLocation value) {
                if (locationBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    location_ = value;
                    onChanged();
                } else {
                    locationBuilder_.setMessage(value);
                }

                return this;
            }

            /**
             * <pre>
             * The address coded as geolocation where this individual originated from.
             * It is recommended that this reflects the place of birth or main place of
             * living, not necessarily a current address.
             * </pre>
             *
             * <code>.GeoLocation location = 13;</code>
             */
            public Builder setLocation(
                    Shared.GeoLocation.Builder builderForValue) {
                if (locationBuilder_ == null) {
                    location_ = builderForValue.build();
                    onChanged();
                } else {
                    locationBuilder_.setMessage(builderForValue.build());
                }

                return this;
            }

            /**
             * <pre>
             * The address coded as geolocation where this individual originated from.
             * It is recommended that this reflects the place of birth or main place of
             * living, not necessarily a current address.
             * </pre>
             *
             * <code>.GeoLocation location = 13;</code>
             */
            public Builder mergeLocation(Shared.GeoLocation value) {
                if (locationBuilder_ == null) {
                    if (location_ != null) {
                        location_ =
                                Shared.GeoLocation.newBuilder(location_).mergeFrom(value).buildPartial();
                    } else {
                        location_ = value;
                    }
                    onChanged();
                } else {
                    locationBuilder_.mergeFrom(value);
                }

                return this;
            }

            /**
             * <pre>
             * The address coded as geolocation where this individual originated from.
             * It is recommended that this reflects the place of birth or main place of
             * living, not necessarily a current address.
             * </pre>
             *
             * <code>.GeoLocation location = 13;</code>
             */
            public Builder clearLocation() {
                if (locationBuilder_ == null) {
                    location_ = null;
                    onChanged();
                } else {
                    location_ = null;
                    locationBuilder_ = null;
                }

                return this;
            }

            /**
             * <pre>
             * The address coded as geolocation where this individual originated from.
             * It is recommended that this reflects the place of birth or main place of
             * living, not necessarily a current address.
             * </pre>
             *
             * <code>.GeoLocation location = 13;</code>
             */
            public Shared.GeoLocation.Builder getLocationBuilder() {

                onChanged();
                return getLocationFieldBuilder().getBuilder();
            }

            /**
             * <pre>
             * The address coded as geolocation where this individual originated from.
             * It is recommended that this reflects the place of birth or main place of
             * living, not necessarily a current address.
             * </pre>
             *
             * <code>.GeoLocation location = 13;</code>
             */
            public Shared.GeoLocationOrBuilder getLocationOrBuilder() {
                if (locationBuilder_ != null) {
                    return locationBuilder_.getMessageOrBuilder();
                } else {
                    return location_ == null ?
                            Shared.GeoLocation.getDefaultInstance() : location_;
                }
            }

            /**
             * <pre>
             * The address coded as geolocation where this individual originated from.
             * It is recommended that this reflects the place of birth or main place of
             * living, not necessarily a current address.
             * </pre>
             *
             * <code>.GeoLocation location = 13;</code>
             */
            private com.google.protobuf.SingleFieldBuilderV3<
                    Shared.GeoLocation, Shared.GeoLocation.Builder, Shared.GeoLocationOrBuilder>
            getLocationFieldBuilder() {
                if (locationBuilder_ == null) {
                    locationBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                            Shared.GeoLocation, Shared.GeoLocation.Builder, Shared.GeoLocationOrBuilder>(
                            getLocation(),
                            getParentForChildren(),
                            isClean());
                    location_ = null;
                }
                return locationBuilder_;
            }

            private Shared.Attributes attributes_ = null;
            private com.google.protobuf.SingleFieldBuilderV3<
                    Shared.Attributes, Shared.Attributes.Builder, Shared.AttributesOrBuilder> attributesBuilder_;

            /**
             * <pre>
             * A map of additional information regarding the Individual.
             * </pre>
             *
             * <code>.Attributes attributes = 10;</code>
             */
            public boolean hasAttributes() {
                return attributesBuilder_ != null || attributes_ != null;
            }

            /**
             * <pre>
             * A map of additional information regarding the Individual.
             * </pre>
             *
             * <code>.Attributes attributes = 10;</code>
             */
            public Shared.Attributes getAttributes() {
                if (attributesBuilder_ == null) {
                    return attributes_ == null ? Shared.Attributes.getDefaultInstance() : attributes_;
                } else {
                    return attributesBuilder_.getMessage();
                }
            }

            /**
             * <pre>
             * A map of additional information regarding the Individual.
             * </pre>
             *
             * <code>.Attributes attributes = 10;</code>
             */
            public Builder setAttributes(Shared.Attributes value) {
                if (attributesBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    attributes_ = value;
                    onChanged();
                } else {
                    attributesBuilder_.setMessage(value);
                }

                return this;
            }

            /**
             * <pre>
             * A map of additional information regarding the Individual.
             * </pre>
             *
             * <code>.Attributes attributes = 10;</code>
             */
            public Builder setAttributes(
                    Shared.Attributes.Builder builderForValue) {
                if (attributesBuilder_ == null) {
                    attributes_ = builderForValue.build();
                    onChanged();
                } else {
                    attributesBuilder_.setMessage(builderForValue.build());
                }

                return this;
            }

            /**
             * <pre>
             * A map of additional information regarding the Individual.
             * </pre>
             *
             * <code>.Attributes attributes = 10;</code>
             */
            public Builder mergeAttributes(Shared.Attributes value) {
                if (attributesBuilder_ == null) {
                    if (attributes_ != null) {
                        attributes_ =
                                Shared.Attributes.newBuilder(attributes_).mergeFrom(value).buildPartial();
                    } else {
                        attributes_ = value;
                    }
                    onChanged();
                } else {
                    attributesBuilder_.mergeFrom(value);
                }

                return this;
            }

            /**
             * <pre>
             * A map of additional information regarding the Individual.
             * </pre>
             *
             * <code>.Attributes attributes = 10;</code>
             */
            public Builder clearAttributes() {
                if (attributesBuilder_ == null) {
                    attributes_ = null;
                    onChanged();
                } else {
                    attributes_ = null;
                    attributesBuilder_ = null;
                }

                return this;
            }

            /**
             * <pre>
             * A map of additional information regarding the Individual.
             * </pre>
             *
             * <code>.Attributes attributes = 10;</code>
             */
            public Shared.Attributes.Builder getAttributesBuilder() {

                onChanged();
                return getAttributesFieldBuilder().getBuilder();
            }

            /**
             * <pre>
             * A map of additional information regarding the Individual.
             * </pre>
             *
             * <code>.Attributes attributes = 10;</code>
             */
            public Shared.AttributesOrBuilder getAttributesOrBuilder() {
                if (attributesBuilder_ != null) {
                    return attributesBuilder_.getMessageOrBuilder();
                } else {
                    return attributes_ == null ?
                            Shared.Attributes.getDefaultInstance() : attributes_;
                }
            }

            /**
             * <pre>
             * A map of additional information regarding the Individual.
             * </pre>
             *
             * <code>.Attributes attributes = 10;</code>
             */
            private com.google.protobuf.SingleFieldBuilderV3<
                    Shared.Attributes, Shared.Attributes.Builder, Shared.AttributesOrBuilder>
            getAttributesFieldBuilder() {
                if (attributesBuilder_ == null) {
                    attributesBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                            Shared.Attributes, Shared.Attributes.Builder, Shared.AttributesOrBuilder>(
                            getAttributes(),
                            getParentForChildren(),
                            isClean());
                    attributes_ = null;
                }
                return attributesBuilder_;
            }

            private java.util.List<Shared.ExternalIdentifier> externalIdentifiers_ =
                    java.util.Collections.emptyList();

            private void ensureExternalIdentifiersIsMutable() {
                if (!((bitField0_ & 0x00000800) == 0x00000800)) {
                    externalIdentifiers_ = new java.util.ArrayList<Shared.ExternalIdentifier>(externalIdentifiers_);
                    bitField0_ |= 0x00000800;
                }
            }

            private com.google.protobuf.RepeatedFieldBuilderV3<
                    Shared.ExternalIdentifier, Shared.ExternalIdentifier.Builder, Shared.ExternalIdentifierOrBuilder> externalIdentifiersBuilder_;

            /**
             * <pre>
             * External identifiers representing this individual. These are considered
             * different representation of the same record, not records which are in some
             * other relation with the record at hand.
             * </pre>
             *
             * <code>repeated .ExternalIdentifier external_identifiers = 11;</code>
             */
            public java.util.List<Shared.ExternalIdentifier> getExternalIdentifiersList() {
                if (externalIdentifiersBuilder_ == null) {
                    return java.util.Collections.unmodifiableList(externalIdentifiers_);
                } else {
                    return externalIdentifiersBuilder_.getMessageList();
                }
            }

            /**
             * <pre>
             * External identifiers representing this individual. These are considered
             * different representation of the same record, not records which are in some
             * other relation with the record at hand.
             * </pre>
             *
             * <code>repeated .ExternalIdentifier external_identifiers = 11;</code>
             */
            public int getExternalIdentifiersCount() {
                if (externalIdentifiersBuilder_ == null) {
                    return externalIdentifiers_.size();
                } else {
                    return externalIdentifiersBuilder_.getCount();
                }
            }

            /**
             * <pre>
             * External identifiers representing this individual. These are considered
             * different representation of the same record, not records which are in some
             * other relation with the record at hand.
             * </pre>
             *
             * <code>repeated .ExternalIdentifier external_identifiers = 11;</code>
             */
            public Shared.ExternalIdentifier getExternalIdentifiers(int index) {
                if (externalIdentifiersBuilder_ == null) {
                    return externalIdentifiers_.get(index);
                } else {
                    return externalIdentifiersBuilder_.getMessage(index);
                }
            }

            /**
             * <pre>
             * External identifiers representing this individual. These are considered
             * different representation of the same record, not records which are in some
             * other relation with the record at hand.
             * </pre>
             *
             * <code>repeated .ExternalIdentifier external_identifiers = 11;</code>
             */
            public Builder setExternalIdentifiers(
                    int index, Shared.ExternalIdentifier value) {
                if (externalIdentifiersBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureExternalIdentifiersIsMutable();
                    externalIdentifiers_.set(index, value);
                    onChanged();
                } else {
                    externalIdentifiersBuilder_.setMessage(index, value);
                }
                return this;
            }

            /**
             * <pre>
             * External identifiers representing this individual. These are considered
             * different representation of the same record, not records which are in some
             * other relation with the record at hand.
             * </pre>
             *
             * <code>repeated .ExternalIdentifier external_identifiers = 11;</code>
             */
            public Builder setExternalIdentifiers(
                    int index, Shared.ExternalIdentifier.Builder builderForValue) {
                if (externalIdentifiersBuilder_ == null) {
                    ensureExternalIdentifiersIsMutable();
                    externalIdentifiers_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    externalIdentifiersBuilder_.setMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <pre>
             * External identifiers representing this individual. These are considered
             * different representation of the same record, not records which are in some
             * other relation with the record at hand.
             * </pre>
             *
             * <code>repeated .ExternalIdentifier external_identifiers = 11;</code>
             */
            public Builder addExternalIdentifiers(Shared.ExternalIdentifier value) {
                if (externalIdentifiersBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureExternalIdentifiersIsMutable();
                    externalIdentifiers_.add(value);
                    onChanged();
                } else {
                    externalIdentifiersBuilder_.addMessage(value);
                }
                return this;
            }

            /**
             * <pre>
             * External identifiers representing this individual. These are considered
             * different representation of the same record, not records which are in some
             * other relation with the record at hand.
             * </pre>
             *
             * <code>repeated .ExternalIdentifier external_identifiers = 11;</code>
             */
            public Builder addExternalIdentifiers(
                    int index, Shared.ExternalIdentifier value) {
                if (externalIdentifiersBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureExternalIdentifiersIsMutable();
                    externalIdentifiers_.add(index, value);
                    onChanged();
                } else {
                    externalIdentifiersBuilder_.addMessage(index, value);
                }
                return this;
            }

            /**
             * <pre>
             * External identifiers representing this individual. These are considered
             * different representation of the same record, not records which are in some
             * other relation with the record at hand.
             * </pre>
             *
             * <code>repeated .ExternalIdentifier external_identifiers = 11;</code>
             */
            public Builder addExternalIdentifiers(
                    Shared.ExternalIdentifier.Builder builderForValue) {
                if (externalIdentifiersBuilder_ == null) {
                    ensureExternalIdentifiersIsMutable();
                    externalIdentifiers_.add(builderForValue.build());
                    onChanged();
                } else {
                    externalIdentifiersBuilder_.addMessage(builderForValue.build());
                }
                return this;
            }

            /**
             * <pre>
             * External identifiers representing this individual. These are considered
             * different representation of the same record, not records which are in some
             * other relation with the record at hand.
             * </pre>
             *
             * <code>repeated .ExternalIdentifier external_identifiers = 11;</code>
             */
            public Builder addExternalIdentifiers(
                    int index, Shared.ExternalIdentifier.Builder builderForValue) {
                if (externalIdentifiersBuilder_ == null) {
                    ensureExternalIdentifiersIsMutable();
                    externalIdentifiers_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    externalIdentifiersBuilder_.addMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <pre>
             * External identifiers representing this individual. These are considered
             * different representation of the same record, not records which are in some
             * other relation with the record at hand.
             * </pre>
             *
             * <code>repeated .ExternalIdentifier external_identifiers = 11;</code>
             */
            public Builder addAllExternalIdentifiers(
                    Iterable<? extends Shared.ExternalIdentifier> values) {
                if (externalIdentifiersBuilder_ == null) {
                    ensureExternalIdentifiersIsMutable();
                    com.google.protobuf.AbstractMessageLite.Builder.addAll(
                            values, externalIdentifiers_);
                    onChanged();
                } else {
                    externalIdentifiersBuilder_.addAllMessages(values);
                }
                return this;
            }

            /**
             * <pre>
             * External identifiers representing this individual. These are considered
             * different representation of the same record, not records which are in some
             * other relation with the record at hand.
             * </pre>
             *
             * <code>repeated .ExternalIdentifier external_identifiers = 11;</code>
             */
            public Builder clearExternalIdentifiers() {
                if (externalIdentifiersBuilder_ == null) {
                    externalIdentifiers_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000800);
                    onChanged();
                } else {
                    externalIdentifiersBuilder_.clear();
                }
                return this;
            }

            /**
             * <pre>
             * External identifiers representing this individual. These are considered
             * different representation of the same record, not records which are in some
             * other relation with the record at hand.
             * </pre>
             *
             * <code>repeated .ExternalIdentifier external_identifiers = 11;</code>
             */
            public Builder removeExternalIdentifiers(int index) {
                if (externalIdentifiersBuilder_ == null) {
                    ensureExternalIdentifiersIsMutable();
                    externalIdentifiers_.remove(index);
                    onChanged();
                } else {
                    externalIdentifiersBuilder_.remove(index);
                }
                return this;
            }

            /**
             * <pre>
             * External identifiers representing this individual. These are considered
             * different representation of the same record, not records which are in some
             * other relation with the record at hand.
             * </pre>
             *
             * <code>repeated .ExternalIdentifier external_identifiers = 11;</code>
             */
            public Shared.ExternalIdentifier.Builder getExternalIdentifiersBuilder(
                    int index) {
                return getExternalIdentifiersFieldBuilder().getBuilder(index);
            }

            /**
             * <pre>
             * External identifiers representing this individual. These are considered
             * different representation of the same record, not records which are in some
             * other relation with the record at hand.
             * </pre>
             *
             * <code>repeated .ExternalIdentifier external_identifiers = 11;</code>
             */
            public Shared.ExternalIdentifierOrBuilder getExternalIdentifiersOrBuilder(
                    int index) {
                if (externalIdentifiersBuilder_ == null) {
                    return externalIdentifiers_.get(index);
                } else {
                    return externalIdentifiersBuilder_.getMessageOrBuilder(index);
                }
            }

            /**
             * <pre>
             * External identifiers representing this individual. These are considered
             * different representation of the same record, not records which are in some
             * other relation with the record at hand.
             * </pre>
             *
             * <code>repeated .ExternalIdentifier external_identifiers = 11;</code>
             */
            public java.util.List<? extends Shared.ExternalIdentifierOrBuilder>
            getExternalIdentifiersOrBuilderList() {
                if (externalIdentifiersBuilder_ != null) {
                    return externalIdentifiersBuilder_.getMessageOrBuilderList();
                } else {
                    return java.util.Collections.unmodifiableList(externalIdentifiers_);
                }
            }

            /**
             * <pre>
             * External identifiers representing this individual. These are considered
             * different representation of the same record, not records which are in some
             * other relation with the record at hand.
             * </pre>
             *
             * <code>repeated .ExternalIdentifier external_identifiers = 11;</code>
             */
            public Shared.ExternalIdentifier.Builder addExternalIdentifiersBuilder() {
                return getExternalIdentifiersFieldBuilder().addBuilder(
                        Shared.ExternalIdentifier.getDefaultInstance());
            }

            /**
             * <pre>
             * External identifiers representing this individual. These are considered
             * different representation of the same record, not records which are in some
             * other relation with the record at hand.
             * </pre>
             *
             * <code>repeated .ExternalIdentifier external_identifiers = 11;</code>
             */
            public Shared.ExternalIdentifier.Builder addExternalIdentifiersBuilder(
                    int index) {
                return getExternalIdentifiersFieldBuilder().addBuilder(
                        index, Shared.ExternalIdentifier.getDefaultInstance());
            }

            /**
             * <pre>
             * External identifiers representing this individual. These are considered
             * different representation of the same record, not records which are in some
             * other relation with the record at hand.
             * </pre>
             *
             * <code>repeated .ExternalIdentifier external_identifiers = 11;</code>
             */
            public java.util.List<Shared.ExternalIdentifier.Builder>
            getExternalIdentifiersBuilderList() {
                return getExternalIdentifiersFieldBuilder().getBuilderList();
            }

            private com.google.protobuf.RepeatedFieldBuilderV3<
                    Shared.ExternalIdentifier, Shared.ExternalIdentifier.Builder, Shared.ExternalIdentifierOrBuilder>
            getExternalIdentifiersFieldBuilder() {
                if (externalIdentifiersBuilder_ == null) {
                    externalIdentifiersBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
                            Shared.ExternalIdentifier, Shared.ExternalIdentifier.Builder, Shared.ExternalIdentifierOrBuilder>(
                            externalIdentifiers_,
                            ((bitField0_ & 0x00000800) == 0x00000800),
                            getParentForChildren(),
                            isClean());
                    externalIdentifiers_ = null;
                }
                return externalIdentifiersBuilder_;
            }

            public final Builder setUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }

            public final Builder mergeUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }


            // @@protoc_insertion_point(builder_scope:Individual)
        }

        // @@protoc_insertion_point(class_scope:Individual)
        private static final Biometadata.Individual DEFAULT_INSTANCE;

        static {
            DEFAULT_INSTANCE = new Biometadata.Individual();
        }

        public static Biometadata.Individual getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        private static final com.google.protobuf.Parser<Individual>
                PARSER = new com.google.protobuf.AbstractParser<Individual>() {
            public Individual parsePartialFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return new Individual(input, extensionRegistry);
            }
        };

        public static com.google.protobuf.Parser<Individual> parser() {
            return PARSER;
        }

        @Override
        public com.google.protobuf.Parser<Individual> getParserForType() {
            return PARSER;
        }

        public Biometadata.Individual getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

    }

    public interface BiosampleOrBuilder extends
            // @@protoc_insertion_point(interface_extends:Biosample)
            com.google.protobuf.MessageOrBuilder {

        /**
         * <pre>
         * The Biosample :ref:`id &lt;apidesign_object_ids&gt;`. This is unique in the
         * context of the server instance.
         * </pre>
         *
         * <code>string id = 1;</code>
         */
        String getId();

        /**
         * <pre>
         * The Biosample :ref:`id &lt;apidesign_object_ids&gt;`. This is unique in the
         * context of the server instance.
         * </pre>
         *
         * <code>string id = 1;</code>
         */
        com.google.protobuf.ByteString
        getIdBytes();

        /**
         * <pre>
         * The ID of the dataset this Biosample belongs to.
         * </pre>
         *
         * <code>string dataset_id = 2;</code>
         */
        String getDatasetId();

        /**
         * <pre>
         * The ID of the dataset this Biosample belongs to.
         * </pre>
         *
         * <code>string dataset_id = 2;</code>
         */
        com.google.protobuf.ByteString
        getDatasetIdBytes();

        /**
         * <pre>
         * The Biosample's name This is a label or symbolic identifier for the biosample.
         * </pre>
         *
         * <code>string name = 3;</code>
         */
        String getName();

        /**
         * <pre>
         * The Biosample's name This is a label or symbolic identifier for the biosample.
         * </pre>
         *
         * <code>string name = 3;</code>
         */
        com.google.protobuf.ByteString
        getNameBytes();

        /**
         * <pre>
         * The biosample's description. This attribute contains human readable text.
         * The "description" attributes should not contain any structured data.
         * </pre>
         *
         * <code>string description = 4;</code>
         */
        String getDescription();

        /**
         * <pre>
         * The biosample's description. This attribute contains human readable text.
         * The "description" attributes should not contain any structured data.
         * </pre>
         *
         * <code>string description = 4;</code>
         */
        com.google.protobuf.ByteString
        getDescriptionBytes();

        /**
         * <pre>
         * characteristics object uses lists of BioCharacteristic objects to describe
         * diseases, phenotypes, source ... associated with this BioSample.
         * </pre>
         *
         * <code>repeated .BioCharacteristic bio_characteristics = 5;</code>
         */
        java.util.List<Biometadata.BioCharacteristic>
        getBioCharacteristicsList();

        /**
         * <pre>
         * characteristics object uses lists of BioCharacteristic objects to describe
         * diseases, phenotypes, source ... associated with this BioSample.
         * </pre>
         *
         * <code>repeated .BioCharacteristic bio_characteristics = 5;</code>
         */
        Biometadata.BioCharacteristic getBioCharacteristics(int index);

        /**
         * <pre>
         * characteristics object uses lists of BioCharacteristic objects to describe
         * diseases, phenotypes, source ... associated with this BioSample.
         * </pre>
         *
         * <code>repeated .BioCharacteristic bio_characteristics = 5;</code>
         */
        int getBioCharacteristicsCount();

        /**
         * <pre>
         * characteristics object uses lists of BioCharacteristic objects to describe
         * diseases, phenotypes, source ... associated with this BioSample.
         * </pre>
         *
         * <code>repeated .BioCharacteristic bio_characteristics = 5;</code>
         */
        java.util.List<? extends Biometadata.BioCharacteristicOrBuilder>
        getBioCharacteristicsOrBuilderList();

        /**
         * <pre>
         * characteristics object uses lists of BioCharacteristic objects to describe
         * diseases, phenotypes, source ... associated with this BioSample.
         * </pre>
         *
         * <code>repeated .BioCharacteristic bio_characteristics = 5;</code>
         */
        Biometadata.BioCharacteristicOrBuilder getBioCharacteristicsOrBuilder(
                int index);

        /**
         * <pre>
         * The :ref:`ISO 8601&lt;metadata_date_time&gt;` time at which this Biosample record
         * was created.
         * </pre>
         *
         * <code>string created = 6;</code>
         */
        String getCreated();

        /**
         * <pre>
         * The :ref:`ISO 8601&lt;metadata_date_time&gt;` time at which this Biosample record
         * was created.
         * </pre>
         *
         * <code>string created = 6;</code>
         */
        com.google.protobuf.ByteString
        getCreatedBytes();

        /**
         * <pre>
         * The :ref:`ISO 8601&lt;metadata_date_time&gt;` time at which this Biosample record was
         * updated.
         * </pre>
         *
         * <code>string updated = 7;</code>
         */
        String getUpdated();

        /**
         * <pre>
         * The :ref:`ISO 8601&lt;metadata_date_time&gt;` time at which this Biosample record was
         * updated.
         * </pre>
         *
         * <code>string updated = 7;</code>
         */
        com.google.protobuf.ByteString
        getUpdatedBytes();

        /**
         * <pre>
         * The individual this biosample was derived from.
         * </pre>
         *
         * <code>string individual_id = 8;</code>
         */
        String getIndividualId();

        /**
         * <pre>
         * The individual this biosample was derived from.
         * </pre>
         *
         * <code>string individual_id = 8;</code>
         */
        com.google.protobuf.ByteString
        getIndividualIdBytes();

        /**
         * <pre>
         * A map of additional information about the Biosample.
         * </pre>
         *
         * <code>.Attributes attributes = 10;</code>
         */
        boolean hasAttributes();

        /**
         * <pre>
         * A map of additional information about the Biosample.
         * </pre>
         *
         * <code>.Attributes attributes = 10;</code>
         */
        Shared.Attributes getAttributes();

        /**
         * <pre>
         * A map of additional information about the Biosample.
         * </pre>
         *
         * <code>.Attributes attributes = 10;</code>
         */
        Shared.AttributesOrBuilder getAttributesOrBuilder();

        /**
         * <pre>
         * External identifiers representing this biosample. These are considered
         * different representation of the same record, not records which are in some
         * other relation with the record at hand.
         * </pre>
         *
         * <code>repeated .ExternalIdentifier external_identifiers = 11;</code>
         */
        java.util.List<Shared.ExternalIdentifier>
        getExternalIdentifiersList();

        /**
         * <pre>
         * External identifiers representing this biosample. These are considered
         * different representation of the same record, not records which are in some
         * other relation with the record at hand.
         * </pre>
         *
         * <code>repeated .ExternalIdentifier external_identifiers = 11;</code>
         */
        Shared.ExternalIdentifier getExternalIdentifiers(int index);

        /**
         * <pre>
         * External identifiers representing this biosample. These are considered
         * different representation of the same record, not records which are in some
         * other relation with the record at hand.
         * </pre>
         *
         * <code>repeated .ExternalIdentifier external_identifiers = 11;</code>
         */
        int getExternalIdentifiersCount();

        /**
         * <pre>
         * External identifiers representing this biosample. These are considered
         * different representation of the same record, not records which are in some
         * other relation with the record at hand.
         * </pre>
         *
         * <code>repeated .ExternalIdentifier external_identifiers = 11;</code>
         */
        java.util.List<? extends Shared.ExternalIdentifierOrBuilder>
        getExternalIdentifiersOrBuilderList();

        /**
         * <pre>
         * External identifiers representing this biosample. These are considered
         * different representation of the same record, not records which are in some
         * other relation with the record at hand.
         * </pre>
         *
         * <code>repeated .ExternalIdentifier external_identifiers = 11;</code>
         */
        Shared.ExternalIdentifierOrBuilder getExternalIdentifiersOrBuilder(
                int index);

        /**
         * <pre>
         * An age object describing the age of the individual this biosample was
         * derived from at the time of collection. The Age object allows the encoding
         * of the age either as ISO8601 duraion or time interval (preferred), or
         * as ontology term object.
         * Example:
         *   "individual_age_at_collection": {
         *     "age": "P12Y0M",
         *     "age_class": {
         *         "term": "Juvenile onset",
         *         "term_id": "HP:0003621"
         *     }
         * },
         * </pre>
         *
         * <code>.Age individual_age_at_collection = 12;</code>
         */
        boolean hasIndividualAgeAtCollection();

        /**
         * <pre>
         * An age object describing the age of the individual this biosample was
         * derived from at the time of collection. The Age object allows the encoding
         * of the age either as ISO8601 duraion or time interval (preferred), or
         * as ontology term object.
         * Example:
         *   "individual_age_at_collection": {
         *     "age": "P12Y0M",
         *     "age_class": {
         *         "term": "Juvenile onset",
         *         "term_id": "HP:0003621"
         *     }
         * },
         * </pre>
         *
         * <code>.Age individual_age_at_collection = 12;</code>
         */
        Biometadata.Age getIndividualAgeAtCollection();

        /**
         * <pre>
         * An age object describing the age of the individual this biosample was
         * derived from at the time of collection. The Age object allows the encoding
         * of the age either as ISO8601 duraion or time interval (preferred), or
         * as ontology term object.
         * Example:
         *   "individual_age_at_collection": {
         *     "age": "P12Y0M",
         *     "age_class": {
         *         "term": "Juvenile onset",
         *         "term_id": "HP:0003621"
         *     }
         * },
         * </pre>
         *
         * <code>.Age individual_age_at_collection = 12;</code>
         */
        Biometadata.AgeOrBuilder getIndividualAgeAtCollectionOrBuilder();

        /**
         * <pre>
         * The address coded as GeoLocation where the biosample was collected.
         * </pre>
         *
         * <code>.GeoLocation location = 13;</code>
         */
        boolean hasLocation();

        /**
         * <pre>
         * The address coded as GeoLocation where the biosample was collected.
         * </pre>
         *
         * <code>.GeoLocation location = 13;</code>
         */
        Shared.GeoLocation getLocation();

        /**
         * <pre>
         * The address coded as GeoLocation where the biosample was collected.
         * </pre>
         *
         * <code>.GeoLocation location = 13;</code>
         */
        Shared.GeoLocationOrBuilder getLocationOrBuilder();
    }

    /**
     * Protobuf type {@code Biosample}
     */
    public static final class Biosample extends
            com.google.protobuf.GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:Biosample)
            BiosampleOrBuilder {
        // Use Biosample.newBuilder() to construct.
        private Biosample(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }

        private Biosample() {
            id_ = "";
            datasetId_ = "";
            name_ = "";
            description_ = "";
            bioCharacteristics_ = java.util.Collections.emptyList();
            created_ = "";
            updated_ = "";
            individualId_ = "";
            externalIdentifiers_ = java.util.Collections.emptyList();
        }

        @Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        private Biosample(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            this();
            int mutable_bitField0_ = 0;
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!input.skipField(tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 10: {
                            String s = input.readStringRequireUtf8();

                            id_ = s;
                            break;
                        }
                        case 18: {
                            String s = input.readStringRequireUtf8();

                            datasetId_ = s;
                            break;
                        }
                        case 26: {
                            String s = input.readStringRequireUtf8();

                            name_ = s;
                            break;
                        }
                        case 34: {
                            String s = input.readStringRequireUtf8();

                            description_ = s;
                            break;
                        }
                        case 42: {
                            if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                                bioCharacteristics_ = new java.util.ArrayList<Biometadata.BioCharacteristic>();
                                mutable_bitField0_ |= 0x00000010;
                            }
                            bioCharacteristics_.add(
                                    input.readMessage(Biometadata.BioCharacteristic.parser(), extensionRegistry));
                            break;
                        }
                        case 50: {
                            String s = input.readStringRequireUtf8();

                            created_ = s;
                            break;
                        }
                        case 58: {
                            String s = input.readStringRequireUtf8();

                            updated_ = s;
                            break;
                        }
                        case 66: {
                            String s = input.readStringRequireUtf8();

                            individualId_ = s;
                            break;
                        }
                        case 82: {
                            Shared.Attributes.Builder subBuilder = null;
                            if (attributes_ != null) {
                                subBuilder = attributes_.toBuilder();
                            }
                            attributes_ = input.readMessage(Shared.Attributes.parser(), extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom(attributes_);
                                attributes_ = subBuilder.buildPartial();
                            }

                            break;
                        }
                        case 90: {
                            if (!((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
                                externalIdentifiers_ = new java.util.ArrayList<Shared.ExternalIdentifier>();
                                mutable_bitField0_ |= 0x00000200;
                            }
                            externalIdentifiers_.add(
                                    input.readMessage(Shared.ExternalIdentifier.parser(), extensionRegistry));
                            break;
                        }
                        case 98: {
                            Biometadata.Age.Builder subBuilder = null;
                            if (individualAgeAtCollection_ != null) {
                                subBuilder = individualAgeAtCollection_.toBuilder();
                            }
                            individualAgeAtCollection_ = input.readMessage(Biometadata.Age.parser(), extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom(individualAgeAtCollection_);
                                individualAgeAtCollection_ = subBuilder.buildPartial();
                            }

                            break;
                        }
                        case 106: {
                            Shared.GeoLocation.Builder subBuilder = null;
                            if (location_ != null) {
                                subBuilder = location_.toBuilder();
                            }
                            location_ = input.readMessage(Shared.GeoLocation.parser(), extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom(location_);
                                location_ = subBuilder.buildPartial();
                            }

                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e).setUnfinishedMessage(this);
            } finally {
                if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                    bioCharacteristics_ = java.util.Collections.unmodifiableList(bioCharacteristics_);
                }
                if (((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
                    externalIdentifiers_ = java.util.Collections.unmodifiableList(externalIdentifiers_);
                }
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return Biometadata.internal_static_ga4ghmetadata_Biosample_descriptor;
        }

        protected FieldAccessorTable
        internalGetFieldAccessorTable() {
            return Biometadata.internal_static_ga4ghmetadata_Biosample_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            Biometadata.Biosample.class, Biometadata.Biosample.Builder.class);
        }

        private int bitField0_;
        public static final int ID_FIELD_NUMBER = 1;
        private volatile Object id_;

        /**
         * <pre>
         * The Biosample :ref:`id &lt;apidesign_object_ids&gt;`. This is unique in the
         * context of the server instance.
         * </pre>
         *
         * <code>string id = 1;</code>
         */
        public String getId() {
            Object ref = id_;
            if (ref instanceof String) {
                return (String) ref;
            } else {
                com.google.protobuf.ByteString bs =
                        (com.google.protobuf.ByteString) ref;
                String s = bs.toStringUtf8();
                id_ = s;
                return s;
            }
        }

        /**
         * <pre>
         * The Biosample :ref:`id &lt;apidesign_object_ids&gt;`. This is unique in the
         * context of the server instance.
         * </pre>
         *
         * <code>string id = 1;</code>
         */
        public com.google.protobuf.ByteString
        getIdBytes() {
            Object ref = id_;
            if (ref instanceof String) {
                com.google.protobuf.ByteString b =
                        com.google.protobuf.ByteString.copyFromUtf8(
                                (String) ref);
                id_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }

        public static final int DATASET_ID_FIELD_NUMBER = 2;
        private volatile Object datasetId_;

        /**
         * <pre>
         * The ID of the dataset this Biosample belongs to.
         * </pre>
         *
         * <code>string dataset_id = 2;</code>
         */
        public String getDatasetId() {
            Object ref = datasetId_;
            if (ref instanceof String) {
                return (String) ref;
            } else {
                com.google.protobuf.ByteString bs =
                        (com.google.protobuf.ByteString) ref;
                String s = bs.toStringUtf8();
                datasetId_ = s;
                return s;
            }
        }

        /**
         * <pre>
         * The ID of the dataset this Biosample belongs to.
         * </pre>
         *
         * <code>string dataset_id = 2;</code>
         */
        public com.google.protobuf.ByteString
        getDatasetIdBytes() {
            Object ref = datasetId_;
            if (ref instanceof String) {
                com.google.protobuf.ByteString b =
                        com.google.protobuf.ByteString.copyFromUtf8(
                                (String) ref);
                datasetId_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }

        public static final int NAME_FIELD_NUMBER = 3;
        private volatile Object name_;

        /**
         * <pre>
         * The Biosample's name This is a label or symbolic identifier for the biosample.
         * </pre>
         *
         * <code>string name = 3;</code>
         */
        public String getName() {
            Object ref = name_;
            if (ref instanceof String) {
                return (String) ref;
            } else {
                com.google.protobuf.ByteString bs =
                        (com.google.protobuf.ByteString) ref;
                String s = bs.toStringUtf8();
                name_ = s;
                return s;
            }
        }

        /**
         * <pre>
         * The Biosample's name This is a label or symbolic identifier for the biosample.
         * </pre>
         *
         * <code>string name = 3;</code>
         */
        public com.google.protobuf.ByteString
        getNameBytes() {
            Object ref = name_;
            if (ref instanceof String) {
                com.google.protobuf.ByteString b =
                        com.google.protobuf.ByteString.copyFromUtf8(
                                (String) ref);
                name_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }

        public static final int DESCRIPTION_FIELD_NUMBER = 4;
        private volatile Object description_;

        /**
         * <pre>
         * The biosample's description. This attribute contains human readable text.
         * The "description" attributes should not contain any structured data.
         * </pre>
         *
         * <code>string description = 4;</code>
         */
        public String getDescription() {
            Object ref = description_;
            if (ref instanceof String) {
                return (String) ref;
            } else {
                com.google.protobuf.ByteString bs =
                        (com.google.protobuf.ByteString) ref;
                String s = bs.toStringUtf8();
                description_ = s;
                return s;
            }
        }

        /**
         * <pre>
         * The biosample's description. This attribute contains human readable text.
         * The "description" attributes should not contain any structured data.
         * </pre>
         *
         * <code>string description = 4;</code>
         */
        public com.google.protobuf.ByteString
        getDescriptionBytes() {
            Object ref = description_;
            if (ref instanceof String) {
                com.google.protobuf.ByteString b =
                        com.google.protobuf.ByteString.copyFromUtf8(
                                (String) ref);
                description_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }

        public static final int BIO_CHARACTERISTICS_FIELD_NUMBER = 5;
        private java.util.List<Biometadata.BioCharacteristic> bioCharacteristics_;

        /**
         * <pre>
         * characteristics object uses lists of BioCharacteristic objects to describe
         * diseases, phenotypes, source ... associated with this BioSample.
         * </pre>
         *
         * <code>repeated .BioCharacteristic bio_characteristics = 5;</code>
         */
        public java.util.List<Biometadata.BioCharacteristic> getBioCharacteristicsList() {
            return bioCharacteristics_;
        }

        /**
         * <pre>
         * characteristics object uses lists of BioCharacteristic objects to describe
         * diseases, phenotypes, source ... associated with this BioSample.
         * </pre>
         *
         * <code>repeated .BioCharacteristic bio_characteristics = 5;</code>
         */
        public java.util.List<? extends Biometadata.BioCharacteristicOrBuilder>
        getBioCharacteristicsOrBuilderList() {
            return bioCharacteristics_;
        }

        /**
         * <pre>
         * characteristics object uses lists of BioCharacteristic objects to describe
         * diseases, phenotypes, source ... associated with this BioSample.
         * </pre>
         *
         * <code>repeated .BioCharacteristic bio_characteristics = 5;</code>
         */
        public int getBioCharacteristicsCount() {
            return bioCharacteristics_.size();
        }

        /**
         * <pre>
         * characteristics object uses lists of BioCharacteristic objects to describe
         * diseases, phenotypes, source ... associated with this BioSample.
         * </pre>
         *
         * <code>repeated .BioCharacteristic bio_characteristics = 5;</code>
         */
        public Biometadata.BioCharacteristic getBioCharacteristics(int index) {
            return bioCharacteristics_.get(index);
        }

        /**
         * <pre>
         * characteristics object uses lists of BioCharacteristic objects to describe
         * diseases, phenotypes, source ... associated with this BioSample.
         * </pre>
         *
         * <code>repeated .BioCharacteristic bio_characteristics = 5;</code>
         */
        public Biometadata.BioCharacteristicOrBuilder getBioCharacteristicsOrBuilder(
                int index) {
            return bioCharacteristics_.get(index);
        }

        public static final int CREATED_FIELD_NUMBER = 6;
        private volatile Object created_;

        /**
         * <pre>
         * The :ref:`ISO 8601&lt;metadata_date_time&gt;` time at which this Biosample record
         * was created.
         * </pre>
         *
         * <code>string created = 6;</code>
         */
        public String getCreated() {
            Object ref = created_;
            if (ref instanceof String) {
                return (String) ref;
            } else {
                com.google.protobuf.ByteString bs =
                        (com.google.protobuf.ByteString) ref;
                String s = bs.toStringUtf8();
                created_ = s;
                return s;
            }
        }

        /**
         * <pre>
         * The :ref:`ISO 8601&lt;metadata_date_time&gt;` time at which this Biosample record
         * was created.
         * </pre>
         *
         * <code>string created = 6;</code>
         */
        public com.google.protobuf.ByteString
        getCreatedBytes() {
            Object ref = created_;
            if (ref instanceof String) {
                com.google.protobuf.ByteString b =
                        com.google.protobuf.ByteString.copyFromUtf8(
                                (String) ref);
                created_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }

        public static final int UPDATED_FIELD_NUMBER = 7;
        private volatile Object updated_;

        /**
         * <pre>
         * The :ref:`ISO 8601&lt;metadata_date_time&gt;` time at which this Biosample record was
         * updated.
         * </pre>
         *
         * <code>string updated = 7;</code>
         */
        public String getUpdated() {
            Object ref = updated_;
            if (ref instanceof String) {
                return (String) ref;
            } else {
                com.google.protobuf.ByteString bs =
                        (com.google.protobuf.ByteString) ref;
                String s = bs.toStringUtf8();
                updated_ = s;
                return s;
            }
        }

        /**
         * <pre>
         * The :ref:`ISO 8601&lt;metadata_date_time&gt;` time at which this Biosample record was
         * updated.
         * </pre>
         *
         * <code>string updated = 7;</code>
         */
        public com.google.protobuf.ByteString
        getUpdatedBytes() {
            Object ref = updated_;
            if (ref instanceof String) {
                com.google.protobuf.ByteString b =
                        com.google.protobuf.ByteString.copyFromUtf8(
                                (String) ref);
                updated_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }

        public static final int INDIVIDUAL_ID_FIELD_NUMBER = 8;
        private volatile Object individualId_;

        /**
         * <pre>
         * The individual this biosample was derived from.
         * </pre>
         *
         * <code>string individual_id = 8;</code>
         */
        public String getIndividualId() {
            Object ref = individualId_;
            if (ref instanceof String) {
                return (String) ref;
            } else {
                com.google.protobuf.ByteString bs =
                        (com.google.protobuf.ByteString) ref;
                String s = bs.toStringUtf8();
                individualId_ = s;
                return s;
            }
        }

        /**
         * <pre>
         * The individual this biosample was derived from.
         * </pre>
         *
         * <code>string individual_id = 8;</code>
         */
        public com.google.protobuf.ByteString
        getIndividualIdBytes() {
            Object ref = individualId_;
            if (ref instanceof String) {
                com.google.protobuf.ByteString b =
                        com.google.protobuf.ByteString.copyFromUtf8(
                                (String) ref);
                individualId_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }

        public static final int ATTRIBUTES_FIELD_NUMBER = 10;
        private Shared.Attributes attributes_;

        /**
         * <pre>
         * A map of additional information about the Biosample.
         * </pre>
         *
         * <code>.Attributes attributes = 10;</code>
         */
        public boolean hasAttributes() {
            return attributes_ != null;
        }

        /**
         * <pre>
         * A map of additional information about the Biosample.
         * </pre>
         *
         * <code>.Attributes attributes = 10;</code>
         */
        public Shared.Attributes getAttributes() {
            return attributes_ == null ? Shared.Attributes.getDefaultInstance() : attributes_;
        }

        /**
         * <pre>
         * A map of additional information about the Biosample.
         * </pre>
         *
         * <code>.Attributes attributes = 10;</code>
         */
        public Shared.AttributesOrBuilder getAttributesOrBuilder() {
            return getAttributes();
        }

        public static final int EXTERNAL_IDENTIFIERS_FIELD_NUMBER = 11;
        private java.util.List<Shared.ExternalIdentifier> externalIdentifiers_;

        /**
         * <pre>
         * External identifiers representing this biosample. These are considered
         * different representation of the same record, not records which are in some
         * other relation with the record at hand.
         * </pre>
         *
         * <code>repeated .ExternalIdentifier external_identifiers = 11;</code>
         */
        public java.util.List<Shared.ExternalIdentifier> getExternalIdentifiersList() {
            return externalIdentifiers_;
        }

        /**
         * <pre>
         * External identifiers representing this biosample. These are considered
         * different representation of the same record, not records which are in some
         * other relation with the record at hand.
         * </pre>
         *
         * <code>repeated .ExternalIdentifier external_identifiers = 11;</code>
         */
        public java.util.List<? extends Shared.ExternalIdentifierOrBuilder>
        getExternalIdentifiersOrBuilderList() {
            return externalIdentifiers_;
        }

        /**
         * <pre>
         * External identifiers representing this biosample. These are considered
         * different representation of the same record, not records which are in some
         * other relation with the record at hand.
         * </pre>
         *
         * <code>repeated .ExternalIdentifier external_identifiers = 11;</code>
         */
        public int getExternalIdentifiersCount() {
            return externalIdentifiers_.size();
        }

        /**
         * <pre>
         * External identifiers representing this biosample. These are considered
         * different representation of the same record, not records which are in some
         * other relation with the record at hand.
         * </pre>
         *
         * <code>repeated .ExternalIdentifier external_identifiers = 11;</code>
         */
        public Shared.ExternalIdentifier getExternalIdentifiers(int index) {
            return externalIdentifiers_.get(index);
        }

        /**
         * <pre>
         * External identifiers representing this biosample. These are considered
         * different representation of the same record, not records which are in some
         * other relation with the record at hand.
         * </pre>
         *
         * <code>repeated .ExternalIdentifier external_identifiers = 11;</code>
         */
        public Shared.ExternalIdentifierOrBuilder getExternalIdentifiersOrBuilder(
                int index) {
            return externalIdentifiers_.get(index);
        }

        public static final int INDIVIDUAL_AGE_AT_COLLECTION_FIELD_NUMBER = 12;
        private Biometadata.Age individualAgeAtCollection_;

        /**
         * <pre>
         * An age object describing the age of the individual this biosample was
         * derived from at the time of collection. The Age object allows the encoding
         * of the age either as ISO8601 duraion or time interval (preferred), or
         * as ontology term object.
         * Example:
         *   "individual_age_at_collection": {
         *     "age": "P12Y0M",
         *     "age_class": {
         *         "term": "Juvenile onset",
         *         "term_id": "HP:0003621"
         *     }
         * },
         * </pre>
         *
         * <code>.Age individual_age_at_collection = 12;</code>
         */
        public boolean hasIndividualAgeAtCollection() {
            return individualAgeAtCollection_ != null;
        }

        /**
         * <pre>
         * An age object describing the age of the individual this biosample was
         * derived from at the time of collection. The Age object allows the encoding
         * of the age either as ISO8601 duraion or time interval (preferred), or
         * as ontology term object.
         * Example:
         *   "individual_age_at_collection": {
         *     "age": "P12Y0M",
         *     "age_class": {
         *         "term": "Juvenile onset",
         *         "term_id": "HP:0003621"
         *     }
         * },
         * </pre>
         *
         * <code>.Age individual_age_at_collection = 12;</code>
         */
        public Biometadata.Age getIndividualAgeAtCollection() {
            return individualAgeAtCollection_ == null ? Biometadata.Age.getDefaultInstance() : individualAgeAtCollection_;
        }

        /**
         * <pre>
         * An age object describing the age of the individual this biosample was
         * derived from at the time of collection. The Age object allows the encoding
         * of the age either as ISO8601 duraion or time interval (preferred), or
         * as ontology term object.
         * Example:
         *   "individual_age_at_collection": {
         *     "age": "P12Y0M",
         *     "age_class": {
         *         "term": "Juvenile onset",
         *         "term_id": "HP:0003621"
         *     }
         * },
         * </pre>
         *
         * <code>.Age individual_age_at_collection = 12;</code>
         */
        public Biometadata.AgeOrBuilder getIndividualAgeAtCollectionOrBuilder() {
            return getIndividualAgeAtCollection();
        }

        public static final int LOCATION_FIELD_NUMBER = 13;
        private Shared.GeoLocation location_;

        /**
         * <pre>
         * The address coded as GeoLocation where the biosample was collected.
         * </pre>
         *
         * <code>.GeoLocation location = 13;</code>
         */
        public boolean hasLocation() {
            return location_ != null;
        }

        /**
         * <pre>
         * The address coded as GeoLocation where the biosample was collected.
         * </pre>
         *
         * <code>.GeoLocation location = 13;</code>
         */
        public Shared.GeoLocation getLocation() {
            return location_ == null ? Shared.GeoLocation.getDefaultInstance() : location_;
        }

        /**
         * <pre>
         * The address coded as GeoLocation where the biosample was collected.
         * </pre>
         *
         * <code>.GeoLocation location = 13;</code>
         */
        public Shared.GeoLocationOrBuilder getLocationOrBuilder() {
            return getLocation();
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            if (!getIdBytes().isEmpty()) {
                com.google.protobuf.GeneratedMessageV3.writeString(output, 1, id_);
            }
            if (!getDatasetIdBytes().isEmpty()) {
                com.google.protobuf.GeneratedMessageV3.writeString(output, 2, datasetId_);
            }
            if (!getNameBytes().isEmpty()) {
                com.google.protobuf.GeneratedMessageV3.writeString(output, 3, name_);
            }
            if (!getDescriptionBytes().isEmpty()) {
                com.google.protobuf.GeneratedMessageV3.writeString(output, 4, description_);
            }
            for (int i = 0; i < bioCharacteristics_.size(); i++) {
                output.writeMessage(5, bioCharacteristics_.get(i));
            }
            if (!getCreatedBytes().isEmpty()) {
                com.google.protobuf.GeneratedMessageV3.writeString(output, 6, created_);
            }
            if (!getUpdatedBytes().isEmpty()) {
                com.google.protobuf.GeneratedMessageV3.writeString(output, 7, updated_);
            }
            if (!getIndividualIdBytes().isEmpty()) {
                com.google.protobuf.GeneratedMessageV3.writeString(output, 8, individualId_);
            }
            if (attributes_ != null) {
                output.writeMessage(10, getAttributes());
            }
            for (int i = 0; i < externalIdentifiers_.size(); i++) {
                output.writeMessage(11, externalIdentifiers_.get(i));
            }
            if (individualAgeAtCollection_ != null) {
                output.writeMessage(12, getIndividualAgeAtCollection());
            }
            if (location_ != null) {
                output.writeMessage(13, getLocation());
            }
        }

        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            if (!getIdBytes().isEmpty()) {
                size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, id_);
            }
            if (!getDatasetIdBytes().isEmpty()) {
                size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, datasetId_);
            }
            if (!getNameBytes().isEmpty()) {
                size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, name_);
            }
            if (!getDescriptionBytes().isEmpty()) {
                size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, description_);
            }
            for (int i = 0; i < bioCharacteristics_.size(); i++) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(5, bioCharacteristics_.get(i));
            }
            if (!getCreatedBytes().isEmpty()) {
                size += com.google.protobuf.GeneratedMessageV3.computeStringSize(6, created_);
            }
            if (!getUpdatedBytes().isEmpty()) {
                size += com.google.protobuf.GeneratedMessageV3.computeStringSize(7, updated_);
            }
            if (!getIndividualIdBytes().isEmpty()) {
                size += com.google.protobuf.GeneratedMessageV3.computeStringSize(8, individualId_);
            }
            if (attributes_ != null) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(10, getAttributes());
            }
            for (int i = 0; i < externalIdentifiers_.size(); i++) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(11, externalIdentifiers_.get(i));
            }
            if (individualAgeAtCollection_ != null) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(12, getIndividualAgeAtCollection());
            }
            if (location_ != null) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(13, getLocation());
            }
            memoizedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @Override
        public boolean equals(final Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof Biometadata.Biosample)) {
                return super.equals(obj);
            }
            Biometadata.Biosample other = (Biometadata.Biosample) obj;

            boolean result = true;
            result = result && getId()
                    .equals(other.getId());
            result = result && getDatasetId()
                    .equals(other.getDatasetId());
            result = result && getName()
                    .equals(other.getName());
            result = result && getDescription()
                    .equals(other.getDescription());
            result = result && getBioCharacteristicsList()
                    .equals(other.getBioCharacteristicsList());
            result = result && getCreated()
                    .equals(other.getCreated());
            result = result && getUpdated()
                    .equals(other.getUpdated());
            result = result && getIndividualId()
                    .equals(other.getIndividualId());
            result = result && (hasAttributes() == other.hasAttributes());
            if (hasAttributes()) {
                result = result && getAttributes()
                        .equals(other.getAttributes());
            }
            result = result && getExternalIdentifiersList()
                    .equals(other.getExternalIdentifiersList());
            result = result && (hasIndividualAgeAtCollection() == other.hasIndividualAgeAtCollection());
            if (hasIndividualAgeAtCollection()) {
                result = result && getIndividualAgeAtCollection()
                        .equals(other.getIndividualAgeAtCollection());
            }
            result = result && (hasLocation() == other.hasLocation());
            if (hasLocation()) {
                result = result && getLocation()
                        .equals(other.getLocation());
            }
            return result;
        }

        @Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            hash = (37 * hash) + ID_FIELD_NUMBER;
            hash = (53 * hash) + getId().hashCode();
            hash = (37 * hash) + DATASET_ID_FIELD_NUMBER;
            hash = (53 * hash) + getDatasetId().hashCode();
            hash = (37 * hash) + NAME_FIELD_NUMBER;
            hash = (53 * hash) + getName().hashCode();
            hash = (37 * hash) + DESCRIPTION_FIELD_NUMBER;
            hash = (53 * hash) + getDescription().hashCode();
            if (getBioCharacteristicsCount() > 0) {
                hash = (37 * hash) + BIO_CHARACTERISTICS_FIELD_NUMBER;
                hash = (53 * hash) + getBioCharacteristicsList().hashCode();
            }
            hash = (37 * hash) + CREATED_FIELD_NUMBER;
            hash = (53 * hash) + getCreated().hashCode();
            hash = (37 * hash) + UPDATED_FIELD_NUMBER;
            hash = (53 * hash) + getUpdated().hashCode();
            hash = (37 * hash) + INDIVIDUAL_ID_FIELD_NUMBER;
            hash = (53 * hash) + getIndividualId().hashCode();
            if (hasAttributes()) {
                hash = (37 * hash) + ATTRIBUTES_FIELD_NUMBER;
                hash = (53 * hash) + getAttributes().hashCode();
            }
            if (getExternalIdentifiersCount() > 0) {
                hash = (37 * hash) + EXTERNAL_IDENTIFIERS_FIELD_NUMBER;
                hash = (53 * hash) + getExternalIdentifiersList().hashCode();
            }
            if (hasIndividualAgeAtCollection()) {
                hash = (37 * hash) + INDIVIDUAL_AGE_AT_COLLECTION_FIELD_NUMBER;
                hash = (53 * hash) + getIndividualAgeAtCollection().hashCode();
            }
            if (hasLocation()) {
                hash = (37 * hash) + LOCATION_FIELD_NUMBER;
                hash = (53 * hash) + getLocation().hashCode();
            }
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        public static Biometadata.Biosample parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static Biometadata.Biosample parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static Biometadata.Biosample parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static Biometadata.Biosample parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static Biometadata.Biosample parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static Biometadata.Biosample parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static Biometadata.Biosample parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input);
        }

        public static Biometadata.Biosample parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }

        public static Biometadata.Biosample parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static Biometadata.Biosample parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(Biometadata.Biosample prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                    ? new Builder() : new Builder().mergeFrom(this);
        }

        @Override
        protected Builder newBuilderForType(
                BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * Protobuf type {@code Biosample}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:Biosample)
                Biometadata.BiosampleOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return Biometadata.internal_static_ga4ghmetadata_Biosample_descriptor;
            }

            protected FieldAccessorTable
            internalGetFieldAccessorTable() {
                return Biometadata.internal_static_ga4ghmetadata_Biosample_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                Biometadata.Biosample.class, Biometadata.Biosample.Builder.class);
            }

            // Construct using Biometadata.Biosample.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessageV3
                        .alwaysUseFieldBuilders) {
                    getBioCharacteristicsFieldBuilder();
                    getExternalIdentifiersFieldBuilder();
                }
            }

            public Builder clear() {
                super.clear();
                id_ = "";

                datasetId_ = "";

                name_ = "";

                description_ = "";

                if (bioCharacteristicsBuilder_ == null) {
                    bioCharacteristics_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000010);
                } else {
                    bioCharacteristicsBuilder_.clear();
                }
                created_ = "";

                updated_ = "";

                individualId_ = "";

                if (attributesBuilder_ == null) {
                    attributes_ = null;
                } else {
                    attributes_ = null;
                    attributesBuilder_ = null;
                }
                if (externalIdentifiersBuilder_ == null) {
                    externalIdentifiers_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000200);
                } else {
                    externalIdentifiersBuilder_.clear();
                }
                if (individualAgeAtCollectionBuilder_ == null) {
                    individualAgeAtCollection_ = null;
                } else {
                    individualAgeAtCollection_ = null;
                    individualAgeAtCollectionBuilder_ = null;
                }
                if (locationBuilder_ == null) {
                    location_ = null;
                } else {
                    location_ = null;
                    locationBuilder_ = null;
                }
                return this;
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return Biometadata.internal_static_ga4ghmetadata_Biosample_descriptor;
            }

            public Biometadata.Biosample getDefaultInstanceForType() {
                return Biometadata.Biosample.getDefaultInstance();
            }

            public Biometadata.Biosample build() {
                Biometadata.Biosample result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public Biometadata.Biosample buildPartial() {
                Biometadata.Biosample result = new Biometadata.Biosample(this);
                int from_bitField0_ = bitField0_;
                int to_bitField0_ = 0;
                result.id_ = id_;
                result.datasetId_ = datasetId_;
                result.name_ = name_;
                result.description_ = description_;
                if (bioCharacteristicsBuilder_ == null) {
                    if (((bitField0_ & 0x00000010) == 0x00000010)) {
                        bioCharacteristics_ = java.util.Collections.unmodifiableList(bioCharacteristics_);
                        bitField0_ = (bitField0_ & ~0x00000010);
                    }
                    result.bioCharacteristics_ = bioCharacteristics_;
                } else {
                    result.bioCharacteristics_ = bioCharacteristicsBuilder_.build();
                }
                result.created_ = created_;
                result.updated_ = updated_;
                result.individualId_ = individualId_;
                if (attributesBuilder_ == null) {
                    result.attributes_ = attributes_;
                } else {
                    result.attributes_ = attributesBuilder_.build();
                }
                if (externalIdentifiersBuilder_ == null) {
                    if (((bitField0_ & 0x00000200) == 0x00000200)) {
                        externalIdentifiers_ = java.util.Collections.unmodifiableList(externalIdentifiers_);
                        bitField0_ = (bitField0_ & ~0x00000200);
                    }
                    result.externalIdentifiers_ = externalIdentifiers_;
                } else {
                    result.externalIdentifiers_ = externalIdentifiersBuilder_.build();
                }
                if (individualAgeAtCollectionBuilder_ == null) {
                    result.individualAgeAtCollection_ = individualAgeAtCollection_;
                } else {
                    result.individualAgeAtCollection_ = individualAgeAtCollectionBuilder_.build();
                }
                if (locationBuilder_ == null) {
                    result.location_ = location_;
                } else {
                    result.location_ = locationBuilder_.build();
                }
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder clone() {
                return (Builder) super.clone();
            }

            public Builder setField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.setField(field, value);
            }

            public Builder clearField(
                    com.google.protobuf.Descriptors.FieldDescriptor field) {
                return (Builder) super.clearField(field);
            }

            public Builder clearOneof(
                    com.google.protobuf.Descriptors.OneofDescriptor oneof) {
                return (Builder) super.clearOneof(oneof);
            }

            public Builder setRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    int index, Object value) {
                return (Builder) super.setRepeatedField(field, index, value);
            }

            public Builder addRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.addRepeatedField(field, value);
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof Biometadata.Biosample) {
                    return mergeFrom((Biometadata.Biosample) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(Biometadata.Biosample other) {
                if (other == Biometadata.Biosample.getDefaultInstance()) return this;
                if (!other.getId().isEmpty()) {
                    id_ = other.id_;
                    onChanged();
                }
                if (!other.getDatasetId().isEmpty()) {
                    datasetId_ = other.datasetId_;
                    onChanged();
                }
                if (!other.getName().isEmpty()) {
                    name_ = other.name_;
                    onChanged();
                }
                if (!other.getDescription().isEmpty()) {
                    description_ = other.description_;
                    onChanged();
                }
                if (bioCharacteristicsBuilder_ == null) {
                    if (!other.bioCharacteristics_.isEmpty()) {
                        if (bioCharacteristics_.isEmpty()) {
                            bioCharacteristics_ = other.bioCharacteristics_;
                            bitField0_ = (bitField0_ & ~0x00000010);
                        } else {
                            ensureBioCharacteristicsIsMutable();
                            bioCharacteristics_.addAll(other.bioCharacteristics_);
                        }
                        onChanged();
                    }
                } else {
                    if (!other.bioCharacteristics_.isEmpty()) {
                        if (bioCharacteristicsBuilder_.isEmpty()) {
                            bioCharacteristicsBuilder_.dispose();
                            bioCharacteristicsBuilder_ = null;
                            bioCharacteristics_ = other.bioCharacteristics_;
                            bitField0_ = (bitField0_ & ~0x00000010);
                            bioCharacteristicsBuilder_ =
                                    com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                                            getBioCharacteristicsFieldBuilder() : null;
                        } else {
                            bioCharacteristicsBuilder_.addAllMessages(other.bioCharacteristics_);
                        }
                    }
                }
                if (!other.getCreated().isEmpty()) {
                    created_ = other.created_;
                    onChanged();
                }
                if (!other.getUpdated().isEmpty()) {
                    updated_ = other.updated_;
                    onChanged();
                }
                if (!other.getIndividualId().isEmpty()) {
                    individualId_ = other.individualId_;
                    onChanged();
                }
                if (other.hasAttributes()) {
                    mergeAttributes(other.getAttributes());
                }
                if (externalIdentifiersBuilder_ == null) {
                    if (!other.externalIdentifiers_.isEmpty()) {
                        if (externalIdentifiers_.isEmpty()) {
                            externalIdentifiers_ = other.externalIdentifiers_;
                            bitField0_ = (bitField0_ & ~0x00000200);
                        } else {
                            ensureExternalIdentifiersIsMutable();
                            externalIdentifiers_.addAll(other.externalIdentifiers_);
                        }
                        onChanged();
                    }
                } else {
                    if (!other.externalIdentifiers_.isEmpty()) {
                        if (externalIdentifiersBuilder_.isEmpty()) {
                            externalIdentifiersBuilder_.dispose();
                            externalIdentifiersBuilder_ = null;
                            externalIdentifiers_ = other.externalIdentifiers_;
                            bitField0_ = (bitField0_ & ~0x00000200);
                            externalIdentifiersBuilder_ =
                                    com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                                            getExternalIdentifiersFieldBuilder() : null;
                        } else {
                            externalIdentifiersBuilder_.addAllMessages(other.externalIdentifiers_);
                        }
                    }
                }
                if (other.hasIndividualAgeAtCollection()) {
                    mergeIndividualAgeAtCollection(other.getIndividualAgeAtCollection());
                }
                if (other.hasLocation()) {
                    mergeLocation(other.getLocation());
                }
                onChanged();
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                Biometadata.Biosample parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (Biometadata.Biosample) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private int bitField0_;

            private Object id_ = "";

            /**
             * <pre>
             * The Biosample :ref:`id &lt;apidesign_object_ids&gt;`. This is unique in the
             * context of the server instance.
             * </pre>
             *
             * <code>string id = 1;</code>
             */
            public String getId() {
                Object ref = id_;
                if (!(ref instanceof String)) {
                    com.google.protobuf.ByteString bs =
                            (com.google.protobuf.ByteString) ref;
                    String s = bs.toStringUtf8();
                    id_ = s;
                    return s;
                } else {
                    return (String) ref;
                }
            }

            /**
             * <pre>
             * The Biosample :ref:`id &lt;apidesign_object_ids&gt;`. This is unique in the
             * context of the server instance.
             * </pre>
             *
             * <code>string id = 1;</code>
             */
            public com.google.protobuf.ByteString
            getIdBytes() {
                Object ref = id_;
                if (ref instanceof String) {
                    com.google.protobuf.ByteString b =
                            com.google.protobuf.ByteString.copyFromUtf8(
                                    (String) ref);
                    id_ = b;
                    return b;
                } else {
                    return (com.google.protobuf.ByteString) ref;
                }
            }

            /**
             * <pre>
             * The Biosample :ref:`id &lt;apidesign_object_ids&gt;`. This is unique in the
             * context of the server instance.
             * </pre>
             *
             * <code>string id = 1;</code>
             */
            public Builder setId(
                    String value) {
                if (value == null) {
                    throw new NullPointerException();
                }

                id_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * The Biosample :ref:`id &lt;apidesign_object_ids&gt;`. This is unique in the
             * context of the server instance.
             * </pre>
             *
             * <code>string id = 1;</code>
             */
            public Builder clearId() {

                id_ = getDefaultInstance().getId();
                onChanged();
                return this;
            }

            /**
             * <pre>
             * The Biosample :ref:`id &lt;apidesign_object_ids&gt;`. This is unique in the
             * context of the server instance.
             * </pre>
             *
             * <code>string id = 1;</code>
             */
            public Builder setIdBytes(
                    com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                checkByteStringIsUtf8(value);

                id_ = value;
                onChanged();
                return this;
            }

            private Object datasetId_ = "";

            /**
             * <pre>
             * The ID of the dataset this Biosample belongs to.
             * </pre>
             *
             * <code>string dataset_id = 2;</code>
             */
            public String getDatasetId() {
                Object ref = datasetId_;
                if (!(ref instanceof String)) {
                    com.google.protobuf.ByteString bs =
                            (com.google.protobuf.ByteString) ref;
                    String s = bs.toStringUtf8();
                    datasetId_ = s;
                    return s;
                } else {
                    return (String) ref;
                }
            }

            /**
             * <pre>
             * The ID of the dataset this Biosample belongs to.
             * </pre>
             *
             * <code>string dataset_id = 2;</code>
             */
            public com.google.protobuf.ByteString
            getDatasetIdBytes() {
                Object ref = datasetId_;
                if (ref instanceof String) {
                    com.google.protobuf.ByteString b =
                            com.google.protobuf.ByteString.copyFromUtf8(
                                    (String) ref);
                    datasetId_ = b;
                    return b;
                } else {
                    return (com.google.protobuf.ByteString) ref;
                }
            }

            /**
             * <pre>
             * The ID of the dataset this Biosample belongs to.
             * </pre>
             *
             * <code>string dataset_id = 2;</code>
             */
            public Builder setDatasetId(
                    String value) {
                if (value == null) {
                    throw new NullPointerException();
                }

                datasetId_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * The ID of the dataset this Biosample belongs to.
             * </pre>
             *
             * <code>string dataset_id = 2;</code>
             */
            public Builder clearDatasetId() {

                datasetId_ = getDefaultInstance().getDatasetId();
                onChanged();
                return this;
            }

            /**
             * <pre>
             * The ID of the dataset this Biosample belongs to.
             * </pre>
             *
             * <code>string dataset_id = 2;</code>
             */
            public Builder setDatasetIdBytes(
                    com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                checkByteStringIsUtf8(value);

                datasetId_ = value;
                onChanged();
                return this;
            }

            private Object name_ = "";

            /**
             * <pre>
             * The Biosample's name This is a label or symbolic identifier for the biosample.
             * </pre>
             *
             * <code>string name = 3;</code>
             */
            public String getName() {
                Object ref = name_;
                if (!(ref instanceof String)) {
                    com.google.protobuf.ByteString bs =
                            (com.google.protobuf.ByteString) ref;
                    String s = bs.toStringUtf8();
                    name_ = s;
                    return s;
                } else {
                    return (String) ref;
                }
            }

            /**
             * <pre>
             * The Biosample's name This is a label or symbolic identifier for the biosample.
             * </pre>
             *
             * <code>string name = 3;</code>
             */
            public com.google.protobuf.ByteString
            getNameBytes() {
                Object ref = name_;
                if (ref instanceof String) {
                    com.google.protobuf.ByteString b =
                            com.google.protobuf.ByteString.copyFromUtf8(
                                    (String) ref);
                    name_ = b;
                    return b;
                } else {
                    return (com.google.protobuf.ByteString) ref;
                }
            }

            /**
             * <pre>
             * The Biosample's name This is a label or symbolic identifier for the biosample.
             * </pre>
             *
             * <code>string name = 3;</code>
             */
            public Builder setName(
                    String value) {
                if (value == null) {
                    throw new NullPointerException();
                }

                name_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * The Biosample's name This is a label or symbolic identifier for the biosample.
             * </pre>
             *
             * <code>string name = 3;</code>
             */
            public Builder clearName() {

                name_ = getDefaultInstance().getName();
                onChanged();
                return this;
            }

            /**
             * <pre>
             * The Biosample's name This is a label or symbolic identifier for the biosample.
             * </pre>
             *
             * <code>string name = 3;</code>
             */
            public Builder setNameBytes(
                    com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                checkByteStringIsUtf8(value);

                name_ = value;
                onChanged();
                return this;
            }

            private Object description_ = "";

            /**
             * <pre>
             * The biosample's description. This attribute contains human readable text.
             * The "description" attributes should not contain any structured data.
             * </pre>
             *
             * <code>string description = 4;</code>
             */
            public String getDescription() {
                Object ref = description_;
                if (!(ref instanceof String)) {
                    com.google.protobuf.ByteString bs =
                            (com.google.protobuf.ByteString) ref;
                    String s = bs.toStringUtf8();
                    description_ = s;
                    return s;
                } else {
                    return (String) ref;
                }
            }

            /**
             * <pre>
             * The biosample's description. This attribute contains human readable text.
             * The "description" attributes should not contain any structured data.
             * </pre>
             *
             * <code>string description = 4;</code>
             */
            public com.google.protobuf.ByteString
            getDescriptionBytes() {
                Object ref = description_;
                if (ref instanceof String) {
                    com.google.protobuf.ByteString b =
                            com.google.protobuf.ByteString.copyFromUtf8(
                                    (String) ref);
                    description_ = b;
                    return b;
                } else {
                    return (com.google.protobuf.ByteString) ref;
                }
            }

            /**
             * <pre>
             * The biosample's description. This attribute contains human readable text.
             * The "description" attributes should not contain any structured data.
             * </pre>
             *
             * <code>string description = 4;</code>
             */
            public Builder setDescription(
                    String value) {
                if (value == null) {
                    throw new NullPointerException();
                }

                description_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * The biosample's description. This attribute contains human readable text.
             * The "description" attributes should not contain any structured data.
             * </pre>
             *
             * <code>string description = 4;</code>
             */
            public Builder clearDescription() {

                description_ = getDefaultInstance().getDescription();
                onChanged();
                return this;
            }

            /**
             * <pre>
             * The biosample's description. This attribute contains human readable text.
             * The "description" attributes should not contain any structured data.
             * </pre>
             *
             * <code>string description = 4;</code>
             */
            public Builder setDescriptionBytes(
                    com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                checkByteStringIsUtf8(value);

                description_ = value;
                onChanged();
                return this;
            }

            private java.util.List<Biometadata.BioCharacteristic> bioCharacteristics_ =
                    java.util.Collections.emptyList();

            private void ensureBioCharacteristicsIsMutable() {
                if (!((bitField0_ & 0x00000010) == 0x00000010)) {
                    bioCharacteristics_ = new java.util.ArrayList<Biometadata.BioCharacteristic>(bioCharacteristics_);
                    bitField0_ |= 0x00000010;
                }
            }

            private com.google.protobuf.RepeatedFieldBuilderV3<
                    Biometadata.BioCharacteristic, Biometadata.BioCharacteristic.Builder, Biometadata.BioCharacteristicOrBuilder> bioCharacteristicsBuilder_;

            /**
             * <pre>
             * characteristics object uses lists of BioCharacteristic objects to describe
             * diseases, phenotypes, source ... associated with this BioSample.
             * </pre>
             *
             * <code>repeated .BioCharacteristic bio_characteristics = 5;</code>
             */
            public java.util.List<Biometadata.BioCharacteristic> getBioCharacteristicsList() {
                if (bioCharacteristicsBuilder_ == null) {
                    return java.util.Collections.unmodifiableList(bioCharacteristics_);
                } else {
                    return bioCharacteristicsBuilder_.getMessageList();
                }
            }

            /**
             * <pre>
             * characteristics object uses lists of BioCharacteristic objects to describe
             * diseases, phenotypes, source ... associated with this BioSample.
             * </pre>
             *
             * <code>repeated .BioCharacteristic bio_characteristics = 5;</code>
             */
            public int getBioCharacteristicsCount() {
                if (bioCharacteristicsBuilder_ == null) {
                    return bioCharacteristics_.size();
                } else {
                    return bioCharacteristicsBuilder_.getCount();
                }
            }

            /**
             * <pre>
             * characteristics object uses lists of BioCharacteristic objects to describe
             * diseases, phenotypes, source ... associated with this BioSample.
             * </pre>
             *
             * <code>repeated .BioCharacteristic bio_characteristics = 5;</code>
             */
            public Biometadata.BioCharacteristic getBioCharacteristics(int index) {
                if (bioCharacteristicsBuilder_ == null) {
                    return bioCharacteristics_.get(index);
                } else {
                    return bioCharacteristicsBuilder_.getMessage(index);
                }
            }

            /**
             * <pre>
             * characteristics object uses lists of BioCharacteristic objects to describe
             * diseases, phenotypes, source ... associated with this BioSample.
             * </pre>
             *
             * <code>repeated .BioCharacteristic bio_characteristics = 5;</code>
             */
            public Builder setBioCharacteristics(
                    int index, Biometadata.BioCharacteristic value) {
                if (bioCharacteristicsBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureBioCharacteristicsIsMutable();
                    bioCharacteristics_.set(index, value);
                    onChanged();
                } else {
                    bioCharacteristicsBuilder_.setMessage(index, value);
                }
                return this;
            }

            /**
             * <pre>
             * characteristics object uses lists of BioCharacteristic objects to describe
             * diseases, phenotypes, source ... associated with this BioSample.
             * </pre>
             *
             * <code>repeated .BioCharacteristic bio_characteristics = 5;</code>
             */
            public Builder setBioCharacteristics(
                    int index, Biometadata.BioCharacteristic.Builder builderForValue) {
                if (bioCharacteristicsBuilder_ == null) {
                    ensureBioCharacteristicsIsMutable();
                    bioCharacteristics_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    bioCharacteristicsBuilder_.setMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <pre>
             * characteristics object uses lists of BioCharacteristic objects to describe
             * diseases, phenotypes, source ... associated with this BioSample.
             * </pre>
             *
             * <code>repeated .BioCharacteristic bio_characteristics = 5;</code>
             */
            public Builder addBioCharacteristics(Biometadata.BioCharacteristic value) {
                if (bioCharacteristicsBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureBioCharacteristicsIsMutable();
                    bioCharacteristics_.add(value);
                    onChanged();
                } else {
                    bioCharacteristicsBuilder_.addMessage(value);
                }
                return this;
            }

            /**
             * <pre>
             * characteristics object uses lists of BioCharacteristic objects to describe
             * diseases, phenotypes, source ... associated with this BioSample.
             * </pre>
             *
             * <code>repeated .BioCharacteristic bio_characteristics = 5;</code>
             */
            public Builder addBioCharacteristics(
                    int index, Biometadata.BioCharacteristic value) {
                if (bioCharacteristicsBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureBioCharacteristicsIsMutable();
                    bioCharacteristics_.add(index, value);
                    onChanged();
                } else {
                    bioCharacteristicsBuilder_.addMessage(index, value);
                }
                return this;
            }

            /**
             * <pre>
             * characteristics object uses lists of BioCharacteristic objects to describe
             * diseases, phenotypes, source ... associated with this BioSample.
             * </pre>
             *
             * <code>repeated .BioCharacteristic bio_characteristics = 5;</code>
             */
            public Builder addBioCharacteristics(
                    Biometadata.BioCharacteristic.Builder builderForValue) {
                if (bioCharacteristicsBuilder_ == null) {
                    ensureBioCharacteristicsIsMutable();
                    bioCharacteristics_.add(builderForValue.build());
                    onChanged();
                } else {
                    bioCharacteristicsBuilder_.addMessage(builderForValue.build());
                }
                return this;
            }

            /**
             * <pre>
             * characteristics object uses lists of BioCharacteristic objects to describe
             * diseases, phenotypes, source ... associated with this BioSample.
             * </pre>
             *
             * <code>repeated .BioCharacteristic bio_characteristics = 5;</code>
             */
            public Builder addBioCharacteristics(
                    int index, Biometadata.BioCharacteristic.Builder builderForValue) {
                if (bioCharacteristicsBuilder_ == null) {
                    ensureBioCharacteristicsIsMutable();
                    bioCharacteristics_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    bioCharacteristicsBuilder_.addMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <pre>
             * characteristics object uses lists of BioCharacteristic objects to describe
             * diseases, phenotypes, source ... associated with this BioSample.
             * </pre>
             *
             * <code>repeated .BioCharacteristic bio_characteristics = 5;</code>
             */
            public Builder addAllBioCharacteristics(
                    Iterable<? extends Biometadata.BioCharacteristic> values) {
                if (bioCharacteristicsBuilder_ == null) {
                    ensureBioCharacteristicsIsMutable();
                    com.google.protobuf.AbstractMessageLite.Builder.addAll(
                            values, bioCharacteristics_);
                    onChanged();
                } else {
                    bioCharacteristicsBuilder_.addAllMessages(values);
                }
                return this;
            }

            /**
             * <pre>
             * characteristics object uses lists of BioCharacteristic objects to describe
             * diseases, phenotypes, source ... associated with this BioSample.
             * </pre>
             *
             * <code>repeated .BioCharacteristic bio_characteristics = 5;</code>
             */
            public Builder clearBioCharacteristics() {
                if (bioCharacteristicsBuilder_ == null) {
                    bioCharacteristics_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000010);
                    onChanged();
                } else {
                    bioCharacteristicsBuilder_.clear();
                }
                return this;
            }

            /**
             * <pre>
             * characteristics object uses lists of BioCharacteristic objects to describe
             * diseases, phenotypes, source ... associated with this BioSample.
             * </pre>
             *
             * <code>repeated .BioCharacteristic bio_characteristics = 5;</code>
             */
            public Builder removeBioCharacteristics(int index) {
                if (bioCharacteristicsBuilder_ == null) {
                    ensureBioCharacteristicsIsMutable();
                    bioCharacteristics_.remove(index);
                    onChanged();
                } else {
                    bioCharacteristicsBuilder_.remove(index);
                }
                return this;
            }

            /**
             * <pre>
             * characteristics object uses lists of BioCharacteristic objects to describe
             * diseases, phenotypes, source ... associated with this BioSample.
             * </pre>
             *
             * <code>repeated .BioCharacteristic bio_characteristics = 5;</code>
             */
            public Biometadata.BioCharacteristic.Builder getBioCharacteristicsBuilder(
                    int index) {
                return getBioCharacteristicsFieldBuilder().getBuilder(index);
            }

            /**
             * <pre>
             * characteristics object uses lists of BioCharacteristic objects to describe
             * diseases, phenotypes, source ... associated with this BioSample.
             * </pre>
             *
             * <code>repeated .BioCharacteristic bio_characteristics = 5;</code>
             */
            public Biometadata.BioCharacteristicOrBuilder getBioCharacteristicsOrBuilder(
                    int index) {
                if (bioCharacteristicsBuilder_ == null) {
                    return bioCharacteristics_.get(index);
                } else {
                    return bioCharacteristicsBuilder_.getMessageOrBuilder(index);
                }
            }

            /**
             * <pre>
             * characteristics object uses lists of BioCharacteristic objects to describe
             * diseases, phenotypes, source ... associated with this BioSample.
             * </pre>
             *
             * <code>repeated .BioCharacteristic bio_characteristics = 5;</code>
             */
            public java.util.List<? extends Biometadata.BioCharacteristicOrBuilder>
            getBioCharacteristicsOrBuilderList() {
                if (bioCharacteristicsBuilder_ != null) {
                    return bioCharacteristicsBuilder_.getMessageOrBuilderList();
                } else {
                    return java.util.Collections.unmodifiableList(bioCharacteristics_);
                }
            }

            /**
             * <pre>
             * characteristics object uses lists of BioCharacteristic objects to describe
             * diseases, phenotypes, source ... associated with this BioSample.
             * </pre>
             *
             * <code>repeated .BioCharacteristic bio_characteristics = 5;</code>
             */
            public Biometadata.BioCharacteristic.Builder addBioCharacteristicsBuilder() {
                return getBioCharacteristicsFieldBuilder().addBuilder(
                        Biometadata.BioCharacteristic.getDefaultInstance());
            }

            /**
             * <pre>
             * characteristics object uses lists of BioCharacteristic objects to describe
             * diseases, phenotypes, source ... associated with this BioSample.
             * </pre>
             *
             * <code>repeated .BioCharacteristic bio_characteristics = 5;</code>
             */
            public Biometadata.BioCharacteristic.Builder addBioCharacteristicsBuilder(
                    int index) {
                return getBioCharacteristicsFieldBuilder().addBuilder(
                        index, Biometadata.BioCharacteristic.getDefaultInstance());
            }

            /**
             * <pre>
             * characteristics object uses lists of BioCharacteristic objects to describe
             * diseases, phenotypes, source ... associated with this BioSample.
             * </pre>
             *
             * <code>repeated .BioCharacteristic bio_characteristics = 5;</code>
             */
            public java.util.List<Biometadata.BioCharacteristic.Builder>
            getBioCharacteristicsBuilderList() {
                return getBioCharacteristicsFieldBuilder().getBuilderList();
            }

            private com.google.protobuf.RepeatedFieldBuilderV3<
                    Biometadata.BioCharacteristic, Biometadata.BioCharacteristic.Builder, Biometadata.BioCharacteristicOrBuilder>
            getBioCharacteristicsFieldBuilder() {
                if (bioCharacteristicsBuilder_ == null) {
                    bioCharacteristicsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
                            Biometadata.BioCharacteristic, Biometadata.BioCharacteristic.Builder, Biometadata.BioCharacteristicOrBuilder>(
                            bioCharacteristics_,
                            ((bitField0_ & 0x00000010) == 0x00000010),
                            getParentForChildren(),
                            isClean());
                    bioCharacteristics_ = null;
                }
                return bioCharacteristicsBuilder_;
            }

            private Object created_ = "";

            /**
             * <pre>
             * The :ref:`ISO 8601&lt;metadata_date_time&gt;` time at which this Biosample record
             * was created.
             * </pre>
             *
             * <code>string created = 6;</code>
             */
            public String getCreated() {
                Object ref = created_;
                if (!(ref instanceof String)) {
                    com.google.protobuf.ByteString bs =
                            (com.google.protobuf.ByteString) ref;
                    String s = bs.toStringUtf8();
                    created_ = s;
                    return s;
                } else {
                    return (String) ref;
                }
            }

            /**
             * <pre>
             * The :ref:`ISO 8601&lt;metadata_date_time&gt;` time at which this Biosample record
             * was created.
             * </pre>
             *
             * <code>string created = 6;</code>
             */
            public com.google.protobuf.ByteString
            getCreatedBytes() {
                Object ref = created_;
                if (ref instanceof String) {
                    com.google.protobuf.ByteString b =
                            com.google.protobuf.ByteString.copyFromUtf8(
                                    (String) ref);
                    created_ = b;
                    return b;
                } else {
                    return (com.google.protobuf.ByteString) ref;
                }
            }

            /**
             * <pre>
             * The :ref:`ISO 8601&lt;metadata_date_time&gt;` time at which this Biosample record
             * was created.
             * </pre>
             *
             * <code>string created = 6;</code>
             */
            public Builder setCreated(
                    String value) {
                if (value == null) {
                    throw new NullPointerException();
                }

                created_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * The :ref:`ISO 8601&lt;metadata_date_time&gt;` time at which this Biosample record
             * was created.
             * </pre>
             *
             * <code>string created = 6;</code>
             */
            public Builder clearCreated() {

                created_ = getDefaultInstance().getCreated();
                onChanged();
                return this;
            }

            /**
             * <pre>
             * The :ref:`ISO 8601&lt;metadata_date_time&gt;` time at which this Biosample record
             * was created.
             * </pre>
             *
             * <code>string created = 6;</code>
             */
            public Builder setCreatedBytes(
                    com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                checkByteStringIsUtf8(value);

                created_ = value;
                onChanged();
                return this;
            }

            private Object updated_ = "";

            /**
             * <pre>
             * The :ref:`ISO 8601&lt;metadata_date_time&gt;` time at which this Biosample record was
             * updated.
             * </pre>
             *
             * <code>string updated = 7;</code>
             */
            public String getUpdated() {
                Object ref = updated_;
                if (!(ref instanceof String)) {
                    com.google.protobuf.ByteString bs =
                            (com.google.protobuf.ByteString) ref;
                    String s = bs.toStringUtf8();
                    updated_ = s;
                    return s;
                } else {
                    return (String) ref;
                }
            }

            /**
             * <pre>
             * The :ref:`ISO 8601&lt;metadata_date_time&gt;` time at which this Biosample record was
             * updated.
             * </pre>
             *
             * <code>string updated = 7;</code>
             */
            public com.google.protobuf.ByteString
            getUpdatedBytes() {
                Object ref = updated_;
                if (ref instanceof String) {
                    com.google.protobuf.ByteString b =
                            com.google.protobuf.ByteString.copyFromUtf8(
                                    (String) ref);
                    updated_ = b;
                    return b;
                } else {
                    return (com.google.protobuf.ByteString) ref;
                }
            }

            /**
             * <pre>
             * The :ref:`ISO 8601&lt;metadata_date_time&gt;` time at which this Biosample record was
             * updated.
             * </pre>
             *
             * <code>string updated = 7;</code>
             */
            public Builder setUpdated(
                    String value) {
                if (value == null) {
                    throw new NullPointerException();
                }

                updated_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * The :ref:`ISO 8601&lt;metadata_date_time&gt;` time at which this Biosample record was
             * updated.
             * </pre>
             *
             * <code>string updated = 7;</code>
             */
            public Builder clearUpdated() {

                updated_ = getDefaultInstance().getUpdated();
                onChanged();
                return this;
            }

            /**
             * <pre>
             * The :ref:`ISO 8601&lt;metadata_date_time&gt;` time at which this Biosample record was
             * updated.
             * </pre>
             *
             * <code>string updated = 7;</code>
             */
            public Builder setUpdatedBytes(
                    com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                checkByteStringIsUtf8(value);

                updated_ = value;
                onChanged();
                return this;
            }

            private Object individualId_ = "";

            /**
             * <pre>
             * The individual this biosample was derived from.
             * </pre>
             *
             * <code>string individual_id = 8;</code>
             */
            public String getIndividualId() {
                Object ref = individualId_;
                if (!(ref instanceof String)) {
                    com.google.protobuf.ByteString bs =
                            (com.google.protobuf.ByteString) ref;
                    String s = bs.toStringUtf8();
                    individualId_ = s;
                    return s;
                } else {
                    return (String) ref;
                }
            }

            /**
             * <pre>
             * The individual this biosample was derived from.
             * </pre>
             *
             * <code>string individual_id = 8;</code>
             */
            public com.google.protobuf.ByteString
            getIndividualIdBytes() {
                Object ref = individualId_;
                if (ref instanceof String) {
                    com.google.protobuf.ByteString b =
                            com.google.protobuf.ByteString.copyFromUtf8(
                                    (String) ref);
                    individualId_ = b;
                    return b;
                } else {
                    return (com.google.protobuf.ByteString) ref;
                }
            }

            /**
             * <pre>
             * The individual this biosample was derived from.
             * </pre>
             *
             * <code>string individual_id = 8;</code>
             */
            public Builder setIndividualId(
                    String value) {
                if (value == null) {
                    throw new NullPointerException();
                }

                individualId_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * The individual this biosample was derived from.
             * </pre>
             *
             * <code>string individual_id = 8;</code>
             */
            public Builder clearIndividualId() {

                individualId_ = getDefaultInstance().getIndividualId();
                onChanged();
                return this;
            }

            /**
             * <pre>
             * The individual this biosample was derived from.
             * </pre>
             *
             * <code>string individual_id = 8;</code>
             */
            public Builder setIndividualIdBytes(
                    com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                checkByteStringIsUtf8(value);

                individualId_ = value;
                onChanged();
                return this;
            }

            private Shared.Attributes attributes_ = null;
            private com.google.protobuf.SingleFieldBuilderV3<
                    Shared.Attributes, Shared.Attributes.Builder, Shared.AttributesOrBuilder> attributesBuilder_;

            /**
             * <pre>
             * A map of additional information about the Biosample.
             * </pre>
             *
             * <code>.Attributes attributes = 10;</code>
             */
            public boolean hasAttributes() {
                return attributesBuilder_ != null || attributes_ != null;
            }

            /**
             * <pre>
             * A map of additional information about the Biosample.
             * </pre>
             *
             * <code>.Attributes attributes = 10;</code>
             */
            public Shared.Attributes getAttributes() {
                if (attributesBuilder_ == null) {
                    return attributes_ == null ? Shared.Attributes.getDefaultInstance() : attributes_;
                } else {
                    return attributesBuilder_.getMessage();
                }
            }

            /**
             * <pre>
             * A map of additional information about the Biosample.
             * </pre>
             *
             * <code>.Attributes attributes = 10;</code>
             */
            public Builder setAttributes(Shared.Attributes value) {
                if (attributesBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    attributes_ = value;
                    onChanged();
                } else {
                    attributesBuilder_.setMessage(value);
                }

                return this;
            }

            /**
             * <pre>
             * A map of additional information about the Biosample.
             * </pre>
             *
             * <code>.Attributes attributes = 10;</code>
             */
            public Builder setAttributes(
                    Shared.Attributes.Builder builderForValue) {
                if (attributesBuilder_ == null) {
                    attributes_ = builderForValue.build();
                    onChanged();
                } else {
                    attributesBuilder_.setMessage(builderForValue.build());
                }

                return this;
            }

            /**
             * <pre>
             * A map of additional information about the Biosample.
             * </pre>
             *
             * <code>.Attributes attributes = 10;</code>
             */
            public Builder mergeAttributes(Shared.Attributes value) {
                if (attributesBuilder_ == null) {
                    if (attributes_ != null) {
                        attributes_ =
                                Shared.Attributes.newBuilder(attributes_).mergeFrom(value).buildPartial();
                    } else {
                        attributes_ = value;
                    }
                    onChanged();
                } else {
                    attributesBuilder_.mergeFrom(value);
                }

                return this;
            }

            /**
             * <pre>
             * A map of additional information about the Biosample.
             * </pre>
             *
             * <code>.Attributes attributes = 10;</code>
             */
            public Builder clearAttributes() {
                if (attributesBuilder_ == null) {
                    attributes_ = null;
                    onChanged();
                } else {
                    attributes_ = null;
                    attributesBuilder_ = null;
                }

                return this;
            }

            /**
             * <pre>
             * A map of additional information about the Biosample.
             * </pre>
             *
             * <code>.Attributes attributes = 10;</code>
             */
            public Shared.Attributes.Builder getAttributesBuilder() {

                onChanged();
                return getAttributesFieldBuilder().getBuilder();
            }

            /**
             * <pre>
             * A map of additional information about the Biosample.
             * </pre>
             *
             * <code>.Attributes attributes = 10;</code>
             */
            public Shared.AttributesOrBuilder getAttributesOrBuilder() {
                if (attributesBuilder_ != null) {
                    return attributesBuilder_.getMessageOrBuilder();
                } else {
                    return attributes_ == null ?
                            Shared.Attributes.getDefaultInstance() : attributes_;
                }
            }

            /**
             * <pre>
             * A map of additional information about the Biosample.
             * </pre>
             *
             * <code>.Attributes attributes = 10;</code>
             */
            private com.google.protobuf.SingleFieldBuilderV3<
                    Shared.Attributes, Shared.Attributes.Builder, Shared.AttributesOrBuilder>
            getAttributesFieldBuilder() {
                if (attributesBuilder_ == null) {
                    attributesBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                            Shared.Attributes, Shared.Attributes.Builder, Shared.AttributesOrBuilder>(
                            getAttributes(),
                            getParentForChildren(),
                            isClean());
                    attributes_ = null;
                }
                return attributesBuilder_;
            }

            private java.util.List<Shared.ExternalIdentifier> externalIdentifiers_ =
                    java.util.Collections.emptyList();

            private void ensureExternalIdentifiersIsMutable() {
                if (!((bitField0_ & 0x00000200) == 0x00000200)) {
                    externalIdentifiers_ = new java.util.ArrayList<Shared.ExternalIdentifier>(externalIdentifiers_);
                    bitField0_ |= 0x00000200;
                }
            }

            private com.google.protobuf.RepeatedFieldBuilderV3<
                    Shared.ExternalIdentifier, Shared.ExternalIdentifier.Builder, Shared.ExternalIdentifierOrBuilder> externalIdentifiersBuilder_;

            /**
             * <pre>
             * External identifiers representing this biosample. These are considered
             * different representation of the same record, not records which are in some
             * other relation with the record at hand.
             * </pre>
             *
             * <code>repeated .ExternalIdentifier external_identifiers = 11;</code>
             */
            public java.util.List<Shared.ExternalIdentifier> getExternalIdentifiersList() {
                if (externalIdentifiersBuilder_ == null) {
                    return java.util.Collections.unmodifiableList(externalIdentifiers_);
                } else {
                    return externalIdentifiersBuilder_.getMessageList();
                }
            }

            /**
             * <pre>
             * External identifiers representing this biosample. These are considered
             * different representation of the same record, not records which are in some
             * other relation with the record at hand.
             * </pre>
             *
             * <code>repeated .ExternalIdentifier external_identifiers = 11;</code>
             */
            public int getExternalIdentifiersCount() {
                if (externalIdentifiersBuilder_ == null) {
                    return externalIdentifiers_.size();
                } else {
                    return externalIdentifiersBuilder_.getCount();
                }
            }

            /**
             * <pre>
             * External identifiers representing this biosample. These are considered
             * different representation of the same record, not records which are in some
             * other relation with the record at hand.
             * </pre>
             *
             * <code>repeated .ExternalIdentifier external_identifiers = 11;</code>
             */
            public Shared.ExternalIdentifier getExternalIdentifiers(int index) {
                if (externalIdentifiersBuilder_ == null) {
                    return externalIdentifiers_.get(index);
                } else {
                    return externalIdentifiersBuilder_.getMessage(index);
                }
            }

            /**
             * <pre>
             * External identifiers representing this biosample. These are considered
             * different representation of the same record, not records which are in some
             * other relation with the record at hand.
             * </pre>
             *
             * <code>repeated .ExternalIdentifier external_identifiers = 11;</code>
             */
            public Builder setExternalIdentifiers(
                    int index, Shared.ExternalIdentifier value) {
                if (externalIdentifiersBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureExternalIdentifiersIsMutable();
                    externalIdentifiers_.set(index, value);
                    onChanged();
                } else {
                    externalIdentifiersBuilder_.setMessage(index, value);
                }
                return this;
            }

            /**
             * <pre>
             * External identifiers representing this biosample. These are considered
             * different representation of the same record, not records which are in some
             * other relation with the record at hand.
             * </pre>
             *
             * <code>repeated .ExternalIdentifier external_identifiers = 11;</code>
             */
            public Builder setExternalIdentifiers(
                    int index, Shared.ExternalIdentifier.Builder builderForValue) {
                if (externalIdentifiersBuilder_ == null) {
                    ensureExternalIdentifiersIsMutable();
                    externalIdentifiers_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    externalIdentifiersBuilder_.setMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <pre>
             * External identifiers representing this biosample. These are considered
             * different representation of the same record, not records which are in some
             * other relation with the record at hand.
             * </pre>
             *
             * <code>repeated .ExternalIdentifier external_identifiers = 11;</code>
             */
            public Builder addExternalIdentifiers(Shared.ExternalIdentifier value) {
                if (externalIdentifiersBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureExternalIdentifiersIsMutable();
                    externalIdentifiers_.add(value);
                    onChanged();
                } else {
                    externalIdentifiersBuilder_.addMessage(value);
                }
                return this;
            }

            /**
             * <pre>
             * External identifiers representing this biosample. These are considered
             * different representation of the same record, not records which are in some
             * other relation with the record at hand.
             * </pre>
             *
             * <code>repeated .ExternalIdentifier external_identifiers = 11;</code>
             */
            public Builder addExternalIdentifiers(
                    int index, Shared.ExternalIdentifier value) {
                if (externalIdentifiersBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureExternalIdentifiersIsMutable();
                    externalIdentifiers_.add(index, value);
                    onChanged();
                } else {
                    externalIdentifiersBuilder_.addMessage(index, value);
                }
                return this;
            }

            /**
             * <pre>
             * External identifiers representing this biosample. These are considered
             * different representation of the same record, not records which are in some
             * other relation with the record at hand.
             * </pre>
             *
             * <code>repeated .ExternalIdentifier external_identifiers = 11;</code>
             */
            public Builder addExternalIdentifiers(
                    Shared.ExternalIdentifier.Builder builderForValue) {
                if (externalIdentifiersBuilder_ == null) {
                    ensureExternalIdentifiersIsMutable();
                    externalIdentifiers_.add(builderForValue.build());
                    onChanged();
                } else {
                    externalIdentifiersBuilder_.addMessage(builderForValue.build());
                }
                return this;
            }

            /**
             * <pre>
             * External identifiers representing this biosample. These are considered
             * different representation of the same record, not records which are in some
             * other relation with the record at hand.
             * </pre>
             *
             * <code>repeated .ExternalIdentifier external_identifiers = 11;</code>
             */
            public Builder addExternalIdentifiers(
                    int index, Shared.ExternalIdentifier.Builder builderForValue) {
                if (externalIdentifiersBuilder_ == null) {
                    ensureExternalIdentifiersIsMutable();
                    externalIdentifiers_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    externalIdentifiersBuilder_.addMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <pre>
             * External identifiers representing this biosample. These are considered
             * different representation of the same record, not records which are in some
             * other relation with the record at hand.
             * </pre>
             *
             * <code>repeated .ExternalIdentifier external_identifiers = 11;</code>
             */
            public Builder addAllExternalIdentifiers(
                    Iterable<? extends Shared.ExternalIdentifier> values) {
                if (externalIdentifiersBuilder_ == null) {
                    ensureExternalIdentifiersIsMutable();
                    com.google.protobuf.AbstractMessageLite.Builder.addAll(
                            values, externalIdentifiers_);
                    onChanged();
                } else {
                    externalIdentifiersBuilder_.addAllMessages(values);
                }
                return this;
            }

            /**
             * <pre>
             * External identifiers representing this biosample. These are considered
             * different representation of the same record, not records which are in some
             * other relation with the record at hand.
             * </pre>
             *
             * <code>repeated .ExternalIdentifier external_identifiers = 11;</code>
             */
            public Builder clearExternalIdentifiers() {
                if (externalIdentifiersBuilder_ == null) {
                    externalIdentifiers_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000200);
                    onChanged();
                } else {
                    externalIdentifiersBuilder_.clear();
                }
                return this;
            }

            /**
             * <pre>
             * External identifiers representing this biosample. These are considered
             * different representation of the same record, not records which are in some
             * other relation with the record at hand.
             * </pre>
             *
             * <code>repeated .ExternalIdentifier external_identifiers = 11;</code>
             */
            public Builder removeExternalIdentifiers(int index) {
                if (externalIdentifiersBuilder_ == null) {
                    ensureExternalIdentifiersIsMutable();
                    externalIdentifiers_.remove(index);
                    onChanged();
                } else {
                    externalIdentifiersBuilder_.remove(index);
                }
                return this;
            }

            /**
             * <pre>
             * External identifiers representing this biosample. These are considered
             * different representation of the same record, not records which are in some
             * other relation with the record at hand.
             * </pre>
             *
             * <code>repeated .ExternalIdentifier external_identifiers = 11;</code>
             */
            public Shared.ExternalIdentifier.Builder getExternalIdentifiersBuilder(
                    int index) {
                return getExternalIdentifiersFieldBuilder().getBuilder(index);
            }

            /**
             * <pre>
             * External identifiers representing this biosample. These are considered
             * different representation of the same record, not records which are in some
             * other relation with the record at hand.
             * </pre>
             *
             * <code>repeated .ExternalIdentifier external_identifiers = 11;</code>
             */
            public Shared.ExternalIdentifierOrBuilder getExternalIdentifiersOrBuilder(
                    int index) {
                if (externalIdentifiersBuilder_ == null) {
                    return externalIdentifiers_.get(index);
                } else {
                    return externalIdentifiersBuilder_.getMessageOrBuilder(index);
                }
            }

            /**
             * <pre>
             * External identifiers representing this biosample. These are considered
             * different representation of the same record, not records which are in some
             * other relation with the record at hand.
             * </pre>
             *
             * <code>repeated .ExternalIdentifier external_identifiers = 11;</code>
             */
            public java.util.List<? extends Shared.ExternalIdentifierOrBuilder>
            getExternalIdentifiersOrBuilderList() {
                if (externalIdentifiersBuilder_ != null) {
                    return externalIdentifiersBuilder_.getMessageOrBuilderList();
                } else {
                    return java.util.Collections.unmodifiableList(externalIdentifiers_);
                }
            }

            /**
             * <pre>
             * External identifiers representing this biosample. These are considered
             * different representation of the same record, not records which are in some
             * other relation with the record at hand.
             * </pre>
             *
             * <code>repeated .ExternalIdentifier external_identifiers = 11;</code>
             */
            public Shared.ExternalIdentifier.Builder addExternalIdentifiersBuilder() {
                return getExternalIdentifiersFieldBuilder().addBuilder(
                        Shared.ExternalIdentifier.getDefaultInstance());
            }

            /**
             * <pre>
             * External identifiers representing this biosample. These are considered
             * different representation of the same record, not records which are in some
             * other relation with the record at hand.
             * </pre>
             *
             * <code>repeated .ExternalIdentifier external_identifiers = 11;</code>
             */
            public Shared.ExternalIdentifier.Builder addExternalIdentifiersBuilder(
                    int index) {
                return getExternalIdentifiersFieldBuilder().addBuilder(
                        index, Shared.ExternalIdentifier.getDefaultInstance());
            }

            /**
             * <pre>
             * External identifiers representing this biosample. These are considered
             * different representation of the same record, not records which are in some
             * other relation with the record at hand.
             * </pre>
             *
             * <code>repeated .ExternalIdentifier external_identifiers = 11;</code>
             */
            public java.util.List<Shared.ExternalIdentifier.Builder>
            getExternalIdentifiersBuilderList() {
                return getExternalIdentifiersFieldBuilder().getBuilderList();
            }

            private com.google.protobuf.RepeatedFieldBuilderV3<
                    Shared.ExternalIdentifier, Shared.ExternalIdentifier.Builder, Shared.ExternalIdentifierOrBuilder>
            getExternalIdentifiersFieldBuilder() {
                if (externalIdentifiersBuilder_ == null) {
                    externalIdentifiersBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
                            Shared.ExternalIdentifier, Shared.ExternalIdentifier.Builder, Shared.ExternalIdentifierOrBuilder>(
                            externalIdentifiers_,
                            ((bitField0_ & 0x00000200) == 0x00000200),
                            getParentForChildren(),
                            isClean());
                    externalIdentifiers_ = null;
                }
                return externalIdentifiersBuilder_;
            }

            private Biometadata.Age individualAgeAtCollection_ = null;
            private com.google.protobuf.SingleFieldBuilderV3<
                    Biometadata.Age, Biometadata.Age.Builder, Biometadata.AgeOrBuilder> individualAgeAtCollectionBuilder_;

            /**
             * <pre>
             * An age object describing the age of the individual this biosample was
             * derived from at the time of collection. The Age object allows the encoding
             * of the age either as ISO8601 duraion or time interval (preferred), or
             * as ontology term object.
             * Example:
             *   "individual_age_at_collection": {
             *     "age": "P12Y0M",
             *     "age_class": {
             *         "term": "Juvenile onset",
             *         "term_id": "HP:0003621"
             *     }
             * },
             * </pre>
             *
             * <code>.Age individual_age_at_collection = 12;</code>
             */
            public boolean hasIndividualAgeAtCollection() {
                return individualAgeAtCollectionBuilder_ != null || individualAgeAtCollection_ != null;
            }

            /**
             * <pre>
             * An age object describing the age of the individual this biosample was
             * derived from at the time of collection. The Age object allows the encoding
             * of the age either as ISO8601 duraion or time interval (preferred), or
             * as ontology term object.
             * Example:
             *   "individual_age_at_collection": {
             *     "age": "P12Y0M",
             *     "age_class": {
             *         "term": "Juvenile onset",
             *         "term_id": "HP:0003621"
             *     }
             * },
             * </pre>
             *
             * <code>.Age individual_age_at_collection = 12;</code>
             */
            public Biometadata.Age getIndividualAgeAtCollection() {
                if (individualAgeAtCollectionBuilder_ == null) {
                    return individualAgeAtCollection_ == null ? Biometadata.Age.getDefaultInstance() : individualAgeAtCollection_;
                } else {
                    return individualAgeAtCollectionBuilder_.getMessage();
                }
            }

            /**
             * <pre>
             * An age object describing the age of the individual this biosample was
             * derived from at the time of collection. The Age object allows the encoding
             * of the age either as ISO8601 duraion or time interval (preferred), or
             * as ontology term object.
             * Example:
             *   "individual_age_at_collection": {
             *     "age": "P12Y0M",
             *     "age_class": {
             *         "term": "Juvenile onset",
             *         "term_id": "HP:0003621"
             *     }
             * },
             * </pre>
             *
             * <code>.Age individual_age_at_collection = 12;</code>
             */
            public Builder setIndividualAgeAtCollection(Biometadata.Age value) {
                if (individualAgeAtCollectionBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    individualAgeAtCollection_ = value;
                    onChanged();
                } else {
                    individualAgeAtCollectionBuilder_.setMessage(value);
                }

                return this;
            }

            /**
             * <pre>
             * An age object describing the age of the individual this biosample was
             * derived from at the time of collection. The Age object allows the encoding
             * of the age either as ISO8601 duraion or time interval (preferred), or
             * as ontology term object.
             * Example:
             *   "individual_age_at_collection": {
             *     "age": "P12Y0M",
             *     "age_class": {
             *         "term": "Juvenile onset",
             *         "term_id": "HP:0003621"
             *     }
             * },
             * </pre>
             *
             * <code>.Age individual_age_at_collection = 12;</code>
             */
            public Builder setIndividualAgeAtCollection(
                    Biometadata.Age.Builder builderForValue) {
                if (individualAgeAtCollectionBuilder_ == null) {
                    individualAgeAtCollection_ = builderForValue.build();
                    onChanged();
                } else {
                    individualAgeAtCollectionBuilder_.setMessage(builderForValue.build());
                }

                return this;
            }

            /**
             * <pre>
             * An age object describing the age of the individual this biosample was
             * derived from at the time of collection. The Age object allows the encoding
             * of the age either as ISO8601 duraion or time interval (preferred), or
             * as ontology term object.
             * Example:
             *   "individual_age_at_collection": {
             *     "age": "P12Y0M",
             *     "age_class": {
             *         "term": "Juvenile onset",
             *         "term_id": "HP:0003621"
             *     }
             * },
             * </pre>
             *
             * <code>.Age individual_age_at_collection = 12;</code>
             */
            public Builder mergeIndividualAgeAtCollection(Biometadata.Age value) {
                if (individualAgeAtCollectionBuilder_ == null) {
                    if (individualAgeAtCollection_ != null) {
                        individualAgeAtCollection_ =
                                Biometadata.Age.newBuilder(individualAgeAtCollection_).mergeFrom(value).buildPartial();
                    } else {
                        individualAgeAtCollection_ = value;
                    }
                    onChanged();
                } else {
                    individualAgeAtCollectionBuilder_.mergeFrom(value);
                }

                return this;
            }

            /**
             * <pre>
             * An age object describing the age of the individual this biosample was
             * derived from at the time of collection. The Age object allows the encoding
             * of the age either as ISO8601 duraion or time interval (preferred), or
             * as ontology term object.
             * Example:
             *   "individual_age_at_collection": {
             *     "age": "P12Y0M",
             *     "age_class": {
             *         "term": "Juvenile onset",
             *         "term_id": "HP:0003621"
             *     }
             * },
             * </pre>
             *
             * <code>.Age individual_age_at_collection = 12;</code>
             */
            public Builder clearIndividualAgeAtCollection() {
                if (individualAgeAtCollectionBuilder_ == null) {
                    individualAgeAtCollection_ = null;
                    onChanged();
                } else {
                    individualAgeAtCollection_ = null;
                    individualAgeAtCollectionBuilder_ = null;
                }

                return this;
            }

            /**
             * <pre>
             * An age object describing the age of the individual this biosample was
             * derived from at the time of collection. The Age object allows the encoding
             * of the age either as ISO8601 duraion or time interval (preferred), or
             * as ontology term object.
             * Example:
             *   "individual_age_at_collection": {
             *     "age": "P12Y0M",
             *     "age_class": {
             *         "term": "Juvenile onset",
             *         "term_id": "HP:0003621"
             *     }
             * },
             * </pre>
             *
             * <code>.Age individual_age_at_collection = 12;</code>
             */
            public Biometadata.Age.Builder getIndividualAgeAtCollectionBuilder() {

                onChanged();
                return getIndividualAgeAtCollectionFieldBuilder().getBuilder();
            }

            /**
             * <pre>
             * An age object describing the age of the individual this biosample was
             * derived from at the time of collection. The Age object allows the encoding
             * of the age either as ISO8601 duraion or time interval (preferred), or
             * as ontology term object.
             * Example:
             *   "individual_age_at_collection": {
             *     "age": "P12Y0M",
             *     "age_class": {
             *         "term": "Juvenile onset",
             *         "term_id": "HP:0003621"
             *     }
             * },
             * </pre>
             *
             * <code>.Age individual_age_at_collection = 12;</code>
             */
            public Biometadata.AgeOrBuilder getIndividualAgeAtCollectionOrBuilder() {
                if (individualAgeAtCollectionBuilder_ != null) {
                    return individualAgeAtCollectionBuilder_.getMessageOrBuilder();
                } else {
                    return individualAgeAtCollection_ == null ?
                            Biometadata.Age.getDefaultInstance() : individualAgeAtCollection_;
                }
            }

            /**
             * <pre>
             * An age object describing the age of the individual this biosample was
             * derived from at the time of collection. The Age object allows the encoding
             * of the age either as ISO8601 duraion or time interval (preferred), or
             * as ontology term object.
             * Example:
             *   "individual_age_at_collection": {
             *     "age": "P12Y0M",
             *     "age_class": {
             *         "term": "Juvenile onset",
             *         "term_id": "HP:0003621"
             *     }
             * },
             * </pre>
             *
             * <code>.Age individual_age_at_collection = 12;</code>
             */
            private com.google.protobuf.SingleFieldBuilderV3<
                    Biometadata.Age, Biometadata.Age.Builder, Biometadata.AgeOrBuilder>
            getIndividualAgeAtCollectionFieldBuilder() {
                if (individualAgeAtCollectionBuilder_ == null) {
                    individualAgeAtCollectionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                            Biometadata.Age, Biometadata.Age.Builder, Biometadata.AgeOrBuilder>(
                            getIndividualAgeAtCollection(),
                            getParentForChildren(),
                            isClean());
                    individualAgeAtCollection_ = null;
                }
                return individualAgeAtCollectionBuilder_;
            }

            private Shared.GeoLocation location_ = null;
            private com.google.protobuf.SingleFieldBuilderV3<
                    Shared.GeoLocation, Shared.GeoLocation.Builder, Shared.GeoLocationOrBuilder> locationBuilder_;

            /**
             * <pre>
             * The address coded as GeoLocation where the biosample was collected.
             * </pre>
             *
             * <code>.GeoLocation location = 13;</code>
             */
            public boolean hasLocation() {
                return locationBuilder_ != null || location_ != null;
            }

            /**
             * <pre>
             * The address coded as GeoLocation where the biosample was collected.
             * </pre>
             *
             * <code>.GeoLocation location = 13;</code>
             */
            public Shared.GeoLocation getLocation() {
                if (locationBuilder_ == null) {
                    return location_ == null ? Shared.GeoLocation.getDefaultInstance() : location_;
                } else {
                    return locationBuilder_.getMessage();
                }
            }

            /**
             * <pre>
             * The address coded as GeoLocation where the biosample was collected.
             * </pre>
             *
             * <code>.GeoLocation location = 13;</code>
             */
            public Builder setLocation(Shared.GeoLocation value) {
                if (locationBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    location_ = value;
                    onChanged();
                } else {
                    locationBuilder_.setMessage(value);
                }

                return this;
            }

            /**
             * <pre>
             * The address coded as GeoLocation where the biosample was collected.
             * </pre>
             *
             * <code>.GeoLocation location = 13;</code>
             */
            public Builder setLocation(
                    Shared.GeoLocation.Builder builderForValue) {
                if (locationBuilder_ == null) {
                    location_ = builderForValue.build();
                    onChanged();
                } else {
                    locationBuilder_.setMessage(builderForValue.build());
                }

                return this;
            }

            /**
             * <pre>
             * The address coded as GeoLocation where the biosample was collected.
             * </pre>
             *
             * <code>.GeoLocation location = 13;</code>
             */
            public Builder mergeLocation(Shared.GeoLocation value) {
                if (locationBuilder_ == null) {
                    if (location_ != null) {
                        location_ =
                                Shared.GeoLocation.newBuilder(location_).mergeFrom(value).buildPartial();
                    } else {
                        location_ = value;
                    }
                    onChanged();
                } else {
                    locationBuilder_.mergeFrom(value);
                }

                return this;
            }

            /**
             * <pre>
             * The address coded as GeoLocation where the biosample was collected.
             * </pre>
             *
             * <code>.GeoLocation location = 13;</code>
             */
            public Builder clearLocation() {
                if (locationBuilder_ == null) {
                    location_ = null;
                    onChanged();
                } else {
                    location_ = null;
                    locationBuilder_ = null;
                }

                return this;
            }

            /**
             * <pre>
             * The address coded as GeoLocation where the biosample was collected.
             * </pre>
             *
             * <code>.GeoLocation location = 13;</code>
             */
            public Shared.GeoLocation.Builder getLocationBuilder() {

                onChanged();
                return getLocationFieldBuilder().getBuilder();
            }

            /**
             * <pre>
             * The address coded as GeoLocation where the biosample was collected.
             * </pre>
             *
             * <code>.GeoLocation location = 13;</code>
             */
            public Shared.GeoLocationOrBuilder getLocationOrBuilder() {
                if (locationBuilder_ != null) {
                    return locationBuilder_.getMessageOrBuilder();
                } else {
                    return location_ == null ?
                            Shared.GeoLocation.getDefaultInstance() : location_;
                }
            }

            /**
             * <pre>
             * The address coded as GeoLocation where the biosample was collected.
             * </pre>
             *
             * <code>.GeoLocation location = 13;</code>
             */
            private com.google.protobuf.SingleFieldBuilderV3<
                    Shared.GeoLocation, Shared.GeoLocation.Builder, Shared.GeoLocationOrBuilder>
            getLocationFieldBuilder() {
                if (locationBuilder_ == null) {
                    locationBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                            Shared.GeoLocation, Shared.GeoLocation.Builder, Shared.GeoLocationOrBuilder>(
                            getLocation(),
                            getParentForChildren(),
                            isClean());
                    location_ = null;
                }
                return locationBuilder_;
            }

            public final Builder setUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }

            public final Builder mergeUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }


            // @@protoc_insertion_point(builder_scope:Biosample)
        }

        // @@protoc_insertion_point(class_scope:Biosample)
        private static final Biometadata.Biosample DEFAULT_INSTANCE;

        static {
            DEFAULT_INSTANCE = new Biometadata.Biosample();
        }

        public static Biometadata.Biosample getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        private static final com.google.protobuf.Parser<Biosample>
                PARSER = new com.google.protobuf.AbstractParser<Biosample>() {
            public Biosample parsePartialFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return new Biosample(input, extensionRegistry);
            }
        };

        public static com.google.protobuf.Parser<Biosample> parser() {
            return PARSER;
        }

        @Override
        public com.google.protobuf.Parser<Biosample> getParserForType() {
            return PARSER;
        }

        public Biometadata.Biosample getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

    }

    public interface AgeOrBuilder extends
            // @@protoc_insertion_point(interface_extends:Age)
            com.google.protobuf.MessageOrBuilder {

        /**
         * <pre>
         * The :ref:`ISO 8601&lt;metadata_date_time&gt;` age of this object as ISO8601
         * duration or time intervals. The use of time intervals makes an additional
         * anchor unnecessary (i.e. DOB and age can be represented as start-anchored
         * time interval, e.g. 1967-11-21/P40Y10M05D)
         * TODO: Anonymous reference time attribute/pointer?
         * </pre>
         *
         * <code>string age = 1;</code>
         */
        String getAge();

        /**
         * <pre>
         * The :ref:`ISO 8601&lt;metadata_date_time&gt;` age of this object as ISO8601
         * duration or time intervals. The use of time intervals makes an additional
         * anchor unnecessary (i.e. DOB and age can be represented as start-anchored
         * time interval, e.g. 1967-11-21/P40Y10M05D)
         * TODO: Anonymous reference time attribute/pointer?
         * </pre>
         *
         * <code>string age = 1;</code>
         */
        com.google.protobuf.ByteString
        getAgeBytes();

        /**
         * <pre>
         * An age class, e.g. corresponding to the use of "age of onset" in HPO.
         * HPO is recommended, for example, subclasses of "Onnset":
         * http://purl.obolibrary.org/obo/HP_0003674
         * Example:
         *  age_class : { term_id : "HP:0003596", term : "Middle age onset" }
         * </pre>
         *
         * <code>.OntologyTerm age_class = 2;</code>
         */
        boolean hasAgeClass();

        /**
         * <pre>
         * An age class, e.g. corresponding to the use of "age of onset" in HPO.
         * HPO is recommended, for example, subclasses of "Onnset":
         * http://purl.obolibrary.org/obo/HP_0003674
         * Example:
         *  age_class : { term_id : "HP:0003596", term : "Middle age onset" }
         * </pre>
         *
         * <code>.OntologyTerm age_class = 2;</code>
         */
        Shared.OntologyTerm getAgeClass();

        /**
         * <pre>
         * An age class, e.g. corresponding to the use of "age of onset" in HPO.
         * HPO is recommended, for example, subclasses of "Onnset":
         * http://purl.obolibrary.org/obo/HP_0003674
         * Example:
         *  age_class : { term_id : "HP:0003596", term : "Middle age onset" }
         * </pre>
         *
         * <code>.OntologyTerm age_class = 2;</code>
         */
        Shared.OntologyTermOrBuilder getAgeClassOrBuilder();
    }

    /**
     * <pre>
     * The age object permits both the (considered default) encoding of an age
     * value in ISO8601, with arbitrary granularity; and the representation of an
     * "age class" as qualitative ontology term.
     * If available, a quantitative value should be used &amp; take precedence over the
     * age class, and class assignment should be performed at user/API level.
     * </pre>
     * <p>
     * Protobuf type {@code Age}
     */
    public static final class Age extends
            com.google.protobuf.GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:Age)
            AgeOrBuilder {
        // Use Age.newBuilder() to construct.
        private Age(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }

        private Age() {
            age_ = "";
        }

        @Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        private Age(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            this();
            int mutable_bitField0_ = 0;
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!input.skipField(tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 10: {
                            String s = input.readStringRequireUtf8();

                            age_ = s;
                            break;
                        }
                        case 18: {
                            Shared.OntologyTerm.Builder subBuilder = null;
                            if (ageClass_ != null) {
                                subBuilder = ageClass_.toBuilder();
                            }
                            ageClass_ = input.readMessage(Shared.OntologyTerm.parser(), extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom(ageClass_);
                                ageClass_ = subBuilder.buildPartial();
                            }

                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e).setUnfinishedMessage(this);
            } finally {
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return Biometadata.internal_static_ga4ghmetadata_Age_descriptor;
        }

        protected FieldAccessorTable
        internalGetFieldAccessorTable() {
            return Biometadata.internal_static_ga4ghmetadata_Age_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            Biometadata.Age.class, Biometadata.Age.Builder.class);
        }

        public static final int AGE_FIELD_NUMBER = 1;
        private volatile Object age_;

        /**
         * <pre>
         * The :ref:`ISO 8601&lt;metadata_date_time&gt;` age of this object as ISO8601
         * duration or time intervals. The use of time intervals makes an additional
         * anchor unnecessary (i.e. DOB and age can be represented as start-anchored
         * time interval, e.g. 1967-11-21/P40Y10M05D)
         * TODO: Anonymous reference time attribute/pointer?
         * </pre>
         *
         * <code>string age = 1;</code>
         */
        public String getAge() {
            Object ref = age_;
            if (ref instanceof String) {
                return (String) ref;
            } else {
                com.google.protobuf.ByteString bs =
                        (com.google.protobuf.ByteString) ref;
                String s = bs.toStringUtf8();
                age_ = s;
                return s;
            }
        }

        /**
         * <pre>
         * The :ref:`ISO 8601&lt;metadata_date_time&gt;` age of this object as ISO8601
         * duration or time intervals. The use of time intervals makes an additional
         * anchor unnecessary (i.e. DOB and age can be represented as start-anchored
         * time interval, e.g. 1967-11-21/P40Y10M05D)
         * TODO: Anonymous reference time attribute/pointer?
         * </pre>
         *
         * <code>string age = 1;</code>
         */
        public com.google.protobuf.ByteString
        getAgeBytes() {
            Object ref = age_;
            if (ref instanceof String) {
                com.google.protobuf.ByteString b =
                        com.google.protobuf.ByteString.copyFromUtf8(
                                (String) ref);
                age_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }

        public static final int AGE_CLASS_FIELD_NUMBER = 2;
        private Shared.OntologyTerm ageClass_;

        /**
         * <pre>
         * An age class, e.g. corresponding to the use of "age of onset" in HPO.
         * HPO is recommended, for example, subclasses of "Onnset":
         * http://purl.obolibrary.org/obo/HP_0003674
         * Example:
         *  age_class : { term_id : "HP:0003596", term : "Middle age onset" }
         * </pre>
         *
         * <code>.OntologyTerm age_class = 2;</code>
         */
        public boolean hasAgeClass() {
            return ageClass_ != null;
        }

        /**
         * <pre>
         * An age class, e.g. corresponding to the use of "age of onset" in HPO.
         * HPO is recommended, for example, subclasses of "Onnset":
         * http://purl.obolibrary.org/obo/HP_0003674
         * Example:
         *  age_class : { term_id : "HP:0003596", term : "Middle age onset" }
         * </pre>
         *
         * <code>.OntologyTerm age_class = 2;</code>
         */
        public Shared.OntologyTerm getAgeClass() {
            return ageClass_ == null ? Shared.OntologyTerm.getDefaultInstance() : ageClass_;
        }

        /**
         * <pre>
         * An age class, e.g. corresponding to the use of "age of onset" in HPO.
         * HPO is recommended, for example, subclasses of "Onnset":
         * http://purl.obolibrary.org/obo/HP_0003674
         * Example:
         *  age_class : { term_id : "HP:0003596", term : "Middle age onset" }
         * </pre>
         *
         * <code>.OntologyTerm age_class = 2;</code>
         */
        public Shared.OntologyTermOrBuilder getAgeClassOrBuilder() {
            return getAgeClass();
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            if (!getAgeBytes().isEmpty()) {
                com.google.protobuf.GeneratedMessageV3.writeString(output, 1, age_);
            }
            if (ageClass_ != null) {
                output.writeMessage(2, getAgeClass());
            }
        }

        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            if (!getAgeBytes().isEmpty()) {
                size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, age_);
            }
            if (ageClass_ != null) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(2, getAgeClass());
            }
            memoizedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @Override
        public boolean equals(final Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof Biometadata.Age)) {
                return super.equals(obj);
            }
            Biometadata.Age other = (Biometadata.Age) obj;

            boolean result = true;
            result = result && getAge()
                    .equals(other.getAge());
            result = result && (hasAgeClass() == other.hasAgeClass());
            if (hasAgeClass()) {
                result = result && getAgeClass()
                        .equals(other.getAgeClass());
            }
            return result;
        }

        @Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            hash = (37 * hash) + AGE_FIELD_NUMBER;
            hash = (53 * hash) + getAge().hashCode();
            if (hasAgeClass()) {
                hash = (37 * hash) + AGE_CLASS_FIELD_NUMBER;
                hash = (53 * hash) + getAgeClass().hashCode();
            }
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        public static Biometadata.Age parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static Biometadata.Age parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static Biometadata.Age parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static Biometadata.Age parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static Biometadata.Age parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static Biometadata.Age parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static Biometadata.Age parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input);
        }

        public static Biometadata.Age parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }

        public static Biometadata.Age parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static Biometadata.Age parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(Biometadata.Age prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                    ? new Builder() : new Builder().mergeFrom(this);
        }

        @Override
        protected Builder newBuilderForType(
                BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * <pre>
         * The age object permits both the (considered default) encoding of an age
         * value in ISO8601, with arbitrary granularity; and the representation of an
         * "age class" as qualitative ontology term.
         * If available, a quantitative value should be used &amp; take precedence over the
         * age class, and class assignment should be performed at user/API level.
         * </pre>
         * <p>
         * Protobuf type {@code Age}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:Age)
                Biometadata.AgeOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return Biometadata.internal_static_ga4ghmetadata_Age_descriptor;
            }

            protected FieldAccessorTable
            internalGetFieldAccessorTable() {
                return Biometadata.internal_static_ga4ghmetadata_Age_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                Biometadata.Age.class, Biometadata.Age.Builder.class);
            }

            // Construct using Biometadata.Age.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessageV3
                        .alwaysUseFieldBuilders) {
                }
            }

            public Builder clear() {
                super.clear();
                age_ = "";

                if (ageClassBuilder_ == null) {
                    ageClass_ = null;
                } else {
                    ageClass_ = null;
                    ageClassBuilder_ = null;
                }
                return this;
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return Biometadata.internal_static_ga4ghmetadata_Age_descriptor;
            }

            public Biometadata.Age getDefaultInstanceForType() {
                return Biometadata.Age.getDefaultInstance();
            }

            public Biometadata.Age build() {
                Biometadata.Age result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public Biometadata.Age buildPartial() {
                Biometadata.Age result = new Biometadata.Age(this);
                result.age_ = age_;
                if (ageClassBuilder_ == null) {
                    result.ageClass_ = ageClass_;
                } else {
                    result.ageClass_ = ageClassBuilder_.build();
                }
                onBuilt();
                return result;
            }

            public Builder clone() {
                return (Builder) super.clone();
            }

            public Builder setField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.setField(field, value);
            }

            public Builder clearField(
                    com.google.protobuf.Descriptors.FieldDescriptor field) {
                return (Builder) super.clearField(field);
            }

            public Builder clearOneof(
                    com.google.protobuf.Descriptors.OneofDescriptor oneof) {
                return (Builder) super.clearOneof(oneof);
            }

            public Builder setRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    int index, Object value) {
                return (Builder) super.setRepeatedField(field, index, value);
            }

            public Builder addRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.addRepeatedField(field, value);
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof Biometadata.Age) {
                    return mergeFrom((Biometadata.Age) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(Biometadata.Age other) {
                if (other == Biometadata.Age.getDefaultInstance()) return this;
                if (!other.getAge().isEmpty()) {
                    age_ = other.age_;
                    onChanged();
                }
                if (other.hasAgeClass()) {
                    mergeAgeClass(other.getAgeClass());
                }
                onChanged();
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                Biometadata.Age parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (Biometadata.Age) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private Object age_ = "";

            /**
             * <pre>
             * The :ref:`ISO 8601&lt;metadata_date_time&gt;` age of this object as ISO8601
             * duration or time intervals. The use of time intervals makes an additional
             * anchor unnecessary (i.e. DOB and age can be represented as start-anchored
             * time interval, e.g. 1967-11-21/P40Y10M05D)
             * TODO: Anonymous reference time attribute/pointer?
             * </pre>
             *
             * <code>string age = 1;</code>
             */
            public String getAge() {
                Object ref = age_;
                if (!(ref instanceof String)) {
                    com.google.protobuf.ByteString bs =
                            (com.google.protobuf.ByteString) ref;
                    String s = bs.toStringUtf8();
                    age_ = s;
                    return s;
                } else {
                    return (String) ref;
                }
            }

            /**
             * <pre>
             * The :ref:`ISO 8601&lt;metadata_date_time&gt;` age of this object as ISO8601
             * duration or time intervals. The use of time intervals makes an additional
             * anchor unnecessary (i.e. DOB and age can be represented as start-anchored
             * time interval, e.g. 1967-11-21/P40Y10M05D)
             * TODO: Anonymous reference time attribute/pointer?
             * </pre>
             *
             * <code>string age = 1;</code>
             */
            public com.google.protobuf.ByteString
            getAgeBytes() {
                Object ref = age_;
                if (ref instanceof String) {
                    com.google.protobuf.ByteString b =
                            com.google.protobuf.ByteString.copyFromUtf8(
                                    (String) ref);
                    age_ = b;
                    return b;
                } else {
                    return (com.google.protobuf.ByteString) ref;
                }
            }

            /**
             * <pre>
             * The :ref:`ISO 8601&lt;metadata_date_time&gt;` age of this object as ISO8601
             * duration or time intervals. The use of time intervals makes an additional
             * anchor unnecessary (i.e. DOB and age can be represented as start-anchored
             * time interval, e.g. 1967-11-21/P40Y10M05D)
             * TODO: Anonymous reference time attribute/pointer?
             * </pre>
             *
             * <code>string age = 1;</code>
             */
            public Builder setAge(
                    String value) {
                if (value == null) {
                    throw new NullPointerException();
                }

                age_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * The :ref:`ISO 8601&lt;metadata_date_time&gt;` age of this object as ISO8601
             * duration or time intervals. The use of time intervals makes an additional
             * anchor unnecessary (i.e. DOB and age can be represented as start-anchored
             * time interval, e.g. 1967-11-21/P40Y10M05D)
             * TODO: Anonymous reference time attribute/pointer?
             * </pre>
             *
             * <code>string age = 1;</code>
             */
            public Builder clearAge() {

                age_ = getDefaultInstance().getAge();
                onChanged();
                return this;
            }

            /**
             * <pre>
             * The :ref:`ISO 8601&lt;metadata_date_time&gt;` age of this object as ISO8601
             * duration or time intervals. The use of time intervals makes an additional
             * anchor unnecessary (i.e. DOB and age can be represented as start-anchored
             * time interval, e.g. 1967-11-21/P40Y10M05D)
             * TODO: Anonymous reference time attribute/pointer?
             * </pre>
             *
             * <code>string age = 1;</code>
             */
            public Builder setAgeBytes(
                    com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                checkByteStringIsUtf8(value);

                age_ = value;
                onChanged();
                return this;
            }

            private Shared.OntologyTerm ageClass_ = null;
            private com.google.protobuf.SingleFieldBuilderV3<
                    Shared.OntologyTerm, Shared.OntologyTerm.Builder, Shared.OntologyTermOrBuilder> ageClassBuilder_;

            /**
             * <pre>
             * An age class, e.g. corresponding to the use of "age of onset" in HPO.
             * HPO is recommended, for example, subclasses of "Onnset":
             * http://purl.obolibrary.org/obo/HP_0003674
             * Example:
             *  age_class : { term_id : "HP:0003596", term : "Middle age onset" }
             * </pre>
             *
             * <code>.OntologyTerm age_class = 2;</code>
             */
            public boolean hasAgeClass() {
                return ageClassBuilder_ != null || ageClass_ != null;
            }

            /**
             * <pre>
             * An age class, e.g. corresponding to the use of "age of onset" in HPO.
             * HPO is recommended, for example, subclasses of "Onnset":
             * http://purl.obolibrary.org/obo/HP_0003674
             * Example:
             *  age_class : { term_id : "HP:0003596", term : "Middle age onset" }
             * </pre>
             *
             * <code>.OntologyTerm age_class = 2;</code>
             */
            public Shared.OntologyTerm getAgeClass() {
                if (ageClassBuilder_ == null) {
                    return ageClass_ == null ? Shared.OntologyTerm.getDefaultInstance() : ageClass_;
                } else {
                    return ageClassBuilder_.getMessage();
                }
            }

            /**
             * <pre>
             * An age class, e.g. corresponding to the use of "age of onset" in HPO.
             * HPO is recommended, for example, subclasses of "Onnset":
             * http://purl.obolibrary.org/obo/HP_0003674
             * Example:
             *  age_class : { term_id : "HP:0003596", term : "Middle age onset" }
             * </pre>
             *
             * <code>.OntologyTerm age_class = 2;</code>
             */
            public Builder setAgeClass(Shared.OntologyTerm value) {
                if (ageClassBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ageClass_ = value;
                    onChanged();
                } else {
                    ageClassBuilder_.setMessage(value);
                }

                return this;
            }

            /**
             * <pre>
             * An age class, e.g. corresponding to the use of "age of onset" in HPO.
             * HPO is recommended, for example, subclasses of "Onnset":
             * http://purl.obolibrary.org/obo/HP_0003674
             * Example:
             *  age_class : { term_id : "HP:0003596", term : "Middle age onset" }
             * </pre>
             *
             * <code>.OntologyTerm age_class = 2;</code>
             */
            public Builder setAgeClass(
                    Shared.OntologyTerm.Builder builderForValue) {
                if (ageClassBuilder_ == null) {
                    ageClass_ = builderForValue.build();
                    onChanged();
                } else {
                    ageClassBuilder_.setMessage(builderForValue.build());
                }

                return this;
            }

            /**
             * <pre>
             * An age class, e.g. corresponding to the use of "age of onset" in HPO.
             * HPO is recommended, for example, subclasses of "Onnset":
             * http://purl.obolibrary.org/obo/HP_0003674
             * Example:
             *  age_class : { term_id : "HP:0003596", term : "Middle age onset" }
             * </pre>
             *
             * <code>.OntologyTerm age_class = 2;</code>
             */
            public Builder mergeAgeClass(Shared.OntologyTerm value) {
                if (ageClassBuilder_ == null) {
                    if (ageClass_ != null) {
                        ageClass_ =
                                Shared.OntologyTerm.newBuilder(ageClass_).mergeFrom(value).buildPartial();
                    } else {
                        ageClass_ = value;
                    }
                    onChanged();
                } else {
                    ageClassBuilder_.mergeFrom(value);
                }

                return this;
            }

            /**
             * <pre>
             * An age class, e.g. corresponding to the use of "age of onset" in HPO.
             * HPO is recommended, for example, subclasses of "Onnset":
             * http://purl.obolibrary.org/obo/HP_0003674
             * Example:
             *  age_class : { term_id : "HP:0003596", term : "Middle age onset" }
             * </pre>
             *
             * <code>.OntologyTerm age_class = 2;</code>
             */
            public Builder clearAgeClass() {
                if (ageClassBuilder_ == null) {
                    ageClass_ = null;
                    onChanged();
                } else {
                    ageClass_ = null;
                    ageClassBuilder_ = null;
                }

                return this;
            }

            /**
             * <pre>
             * An age class, e.g. corresponding to the use of "age of onset" in HPO.
             * HPO is recommended, for example, subclasses of "Onnset":
             * http://purl.obolibrary.org/obo/HP_0003674
             * Example:
             *  age_class : { term_id : "HP:0003596", term : "Middle age onset" }
             * </pre>
             *
             * <code>.OntologyTerm age_class = 2;</code>
             */
            public Shared.OntologyTerm.Builder getAgeClassBuilder() {

                onChanged();
                return getAgeClassFieldBuilder().getBuilder();
            }

            /**
             * <pre>
             * An age class, e.g. corresponding to the use of "age of onset" in HPO.
             * HPO is recommended, for example, subclasses of "Onnset":
             * http://purl.obolibrary.org/obo/HP_0003674
             * Example:
             *  age_class : { term_id : "HP:0003596", term : "Middle age onset" }
             * </pre>
             *
             * <code>.OntologyTerm age_class = 2;</code>
             */
            public Shared.OntologyTermOrBuilder getAgeClassOrBuilder() {
                if (ageClassBuilder_ != null) {
                    return ageClassBuilder_.getMessageOrBuilder();
                } else {
                    return ageClass_ == null ?
                            Shared.OntologyTerm.getDefaultInstance() : ageClass_;
                }
            }

            /**
             * <pre>
             * An age class, e.g. corresponding to the use of "age of onset" in HPO.
             * HPO is recommended, for example, subclasses of "Onnset":
             * http://purl.obolibrary.org/obo/HP_0003674
             * Example:
             *  age_class : { term_id : "HP:0003596", term : "Middle age onset" }
             * </pre>
             *
             * <code>.OntologyTerm age_class = 2;</code>
             */
            private com.google.protobuf.SingleFieldBuilderV3<
                    Shared.OntologyTerm, Shared.OntologyTerm.Builder, Shared.OntologyTermOrBuilder>
            getAgeClassFieldBuilder() {
                if (ageClassBuilder_ == null) {
                    ageClassBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                            Shared.OntologyTerm, Shared.OntologyTerm.Builder, Shared.OntologyTermOrBuilder>(
                            getAgeClass(),
                            getParentForChildren(),
                            isClean());
                    ageClass_ = null;
                }
                return ageClassBuilder_;
            }

            public final Builder setUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }

            public final Builder mergeUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }


            // @@protoc_insertion_point(builder_scope:Age)
        }

        // @@protoc_insertion_point(class_scope:Age)
        private static final Biometadata.Age DEFAULT_INSTANCE;

        static {
            DEFAULT_INSTANCE = new Biometadata.Age();
        }

        public static Biometadata.Age getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        private static final com.google.protobuf.Parser<Age>
                PARSER = new com.google.protobuf.AbstractParser<Age>() {
            public Age parsePartialFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return new Age(input, extensionRegistry);
            }
        };

        public static com.google.protobuf.Parser<Age> parser() {
            return PARSER;
        }

        @Override
        public com.google.protobuf.Parser<Age> getParserForType() {
            return PARSER;
        }

        public Biometadata.Age getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

    }

    public interface BioCharacteristicOrBuilder extends
            // @@protoc_insertion_point(interface_extends:BioCharacteristic)
            com.google.protobuf.MessageOrBuilder {

        /**
         * <pre>
         * A free text description of the specific disease diagnosis or phenotype
         * here, which is then characterized by zero or more OntologyTerm objects.
         * The description should be concise and should not include data points
         * better expressed through specific attributes elsewhere in the schema.
         * Example (for a single disease item):
         *   "squamous cell carcinoma, base of tongue, stage 2"
         * </pre>
         *
         * <code>string description = 1;</code>
         */
        String getDescription();

        /**
         * <pre>
         * A free text description of the specific disease diagnosis or phenotype
         * here, which is then characterized by zero or more OntologyTerm objects.
         * The description should be concise and should not include data points
         * better expressed through specific attributes elsewhere in the schema.
         * Example (for a single disease item):
         *   "squamous cell carcinoma, base of tongue, stage 2"
         * </pre>
         *
         * <code>string description = 1;</code>
         */
        com.google.protobuf.ByteString
        getDescriptionBytes();

        /**
         * <pre>
         * The ontologyTerms attribute contains a list of zero (discouraged) or more
         * OntologyTerm objects covering the characteristic (e.g. disease diagnosis,
         * phenotype) reorted here.
         * Example (for a single diagnosis "squamous cell carcinoma, base of tongue"):
         *     term_id: "DOID:0050865",
         *     term: "tongue squamous cell carcinoma",
         *     term_id: "UBERON:0006919",
         *     term: "tongue squamous epithelium",
         *     term_id: "UBERON:0010033",
         *     term: "posterior part of tongue",
         * </pre>
         *
         * <code>repeated .OntologyTerm ontology_terms = 2;</code>
         */
        java.util.List<Shared.OntologyTerm>
        getOntologyTermsList();

        /**
         * <pre>
         * The ontologyTerms attribute contains a list of zero (discouraged) or more
         * OntologyTerm objects covering the characteristic (e.g. disease diagnosis,
         * phenotype) reorted here.
         * Example (for a single diagnosis "squamous cell carcinoma, base of tongue"):
         *     term_id: "DOID:0050865",
         *     term: "tongue squamous cell carcinoma",
         *     term_id: "UBERON:0006919",
         *     term: "tongue squamous epithelium",
         *     term_id: "UBERON:0010033",
         *     term: "posterior part of tongue",
         * </pre>
         *
         * <code>repeated .OntologyTerm ontology_terms = 2;</code>
         */
        Shared.OntologyTerm getOntologyTerms(int index);

        /**
         * <pre>
         * The ontologyTerms attribute contains a list of zero (discouraged) or more
         * OntologyTerm objects covering the characteristic (e.g. disease diagnosis,
         * phenotype) reorted here.
         * Example (for a single diagnosis "squamous cell carcinoma, base of tongue"):
         *     term_id: "DOID:0050865",
         *     term: "tongue squamous cell carcinoma",
         *     term_id: "UBERON:0006919",
         *     term: "tongue squamous epithelium",
         *     term_id: "UBERON:0010033",
         *     term: "posterior part of tongue",
         * </pre>
         *
         * <code>repeated .OntologyTerm ontology_terms = 2;</code>
         */
        int getOntologyTermsCount();

        /**
         * <pre>
         * The ontologyTerms attribute contains a list of zero (discouraged) or more
         * OntologyTerm objects covering the characteristic (e.g. disease diagnosis,
         * phenotype) reorted here.
         * Example (for a single diagnosis "squamous cell carcinoma, base of tongue"):
         *     term_id: "DOID:0050865",
         *     term: "tongue squamous cell carcinoma",
         *     term_id: "UBERON:0006919",
         *     term: "tongue squamous epithelium",
         *     term_id: "UBERON:0010033",
         *     term: "posterior part of tongue",
         * </pre>
         *
         * <code>repeated .OntologyTerm ontology_terms = 2;</code>
         */
        java.util.List<? extends Shared.OntologyTermOrBuilder>
        getOntologyTermsOrBuilderList();

        /**
         * <pre>
         * The ontologyTerms attribute contains a list of zero (discouraged) or more
         * OntologyTerm objects covering the characteristic (e.g. disease diagnosis,
         * phenotype) reorted here.
         * Example (for a single diagnosis "squamous cell carcinoma, base of tongue"):
         *     term_id: "DOID:0050865",
         *     term: "tongue squamous cell carcinoma",
         *     term_id: "UBERON:0006919",
         *     term: "tongue squamous epithelium",
         *     term_id: "UBERON:0010033",
         *     term: "posterior part of tongue",
         * </pre>
         *
         * <code>repeated .OntologyTerm ontology_terms = 2;</code>
         */
        Shared.OntologyTermOrBuilder getOntologyTermsOrBuilder(
                int index);

        /**
         * <pre>
         * negatedOntologyTerms are used to describe features which are explicitely
         * not part of the BioCharacteristic.
         * Example: For a phenotype
         *      description: "Bilateral ventricle anomalies (but not hypertrophy)"
         *   ...  one could use the ontologyTerms
         *      term_id: "HP:0001711"
         *      term: "Abnormality of the left ventricle"
         *      id: "HP:0001707"
         *      term: "Abnormality of the right ventricle"
         *   ... and add to negatedOntologyTerms
         *      term_id: "HP:0001714"
         *      term: "Ventricular hypertrophy"
         * </pre>
         *
         * <code>repeated .OntologyTerm negated_ontology_terms = 3;</code>
         */
        java.util.List<Shared.OntologyTerm>
        getNegatedOntologyTermsList();

        /**
         * <pre>
         * negatedOntologyTerms are used to describe features which are explicitely
         * not part of the BioCharacteristic.
         * Example: For a phenotype
         *      description: "Bilateral ventricle anomalies (but not hypertrophy)"
         *   ...  one could use the ontologyTerms
         *      term_id: "HP:0001711"
         *      term: "Abnormality of the left ventricle"
         *      id: "HP:0001707"
         *      term: "Abnormality of the right ventricle"
         *   ... and add to negatedOntologyTerms
         *      term_id: "HP:0001714"
         *      term: "Ventricular hypertrophy"
         * </pre>
         *
         * <code>repeated .OntologyTerm negated_ontology_terms = 3;</code>
         */
        Shared.OntologyTerm getNegatedOntologyTerms(int index);

        /**
         * <pre>
         * negatedOntologyTerms are used to describe features which are explicitely
         * not part of the BioCharacteristic.
         * Example: For a phenotype
         *      description: "Bilateral ventricle anomalies (but not hypertrophy)"
         *   ...  one could use the ontologyTerms
         *      term_id: "HP:0001711"
         *      term: "Abnormality of the left ventricle"
         *      id: "HP:0001707"
         *      term: "Abnormality of the right ventricle"
         *   ... and add to negatedOntologyTerms
         *      term_id: "HP:0001714"
         *      term: "Ventricular hypertrophy"
         * </pre>
         *
         * <code>repeated .OntologyTerm negated_ontology_terms = 3;</code>
         */
        int getNegatedOntologyTermsCount();

        /**
         * <pre>
         * negatedOntologyTerms are used to describe features which are explicitely
         * not part of the BioCharacteristic.
         * Example: For a phenotype
         *      description: "Bilateral ventricle anomalies (but not hypertrophy)"
         *   ...  one could use the ontologyTerms
         *      term_id: "HP:0001711"
         *      term: "Abnormality of the left ventricle"
         *      id: "HP:0001707"
         *      term: "Abnormality of the right ventricle"
         *   ... and add to negatedOntologyTerms
         *      term_id: "HP:0001714"
         *      term: "Ventricular hypertrophy"
         * </pre>
         *
         * <code>repeated .OntologyTerm negated_ontology_terms = 3;</code>
         */
        java.util.List<? extends Shared.OntologyTermOrBuilder>
        getNegatedOntologyTermsOrBuilderList();

        /**
         * <pre>
         * negatedOntologyTerms are used to describe features which are explicitely
         * not part of the BioCharacteristic.
         * Example: For a phenotype
         *      description: "Bilateral ventricle anomalies (but not hypertrophy)"
         *   ...  one could use the ontologyTerms
         *      term_id: "HP:0001711"
         *      term: "Abnormality of the left ventricle"
         *      id: "HP:0001707"
         *      term: "Abnormality of the right ventricle"
         *   ... and add to negatedOntologyTerms
         *      term_id: "HP:0001714"
         *      term: "Ventricular hypertrophy"
         * </pre>
         *
         * <code>repeated .OntologyTerm negated_ontology_terms = 3;</code>
         */
        Shared.OntologyTermOrBuilder getNegatedOntologyTermsOrBuilder(
                int index);

        /**
         * <pre>
         * Logical scope of this BioCharacteristic. Typical examples
         * could be "phenotype", "disease", "observation", "source".
         * TODO:  This may be modified into an enumeration or expressed through
         *        an OntologyTerm.
         * </pre>
         *
         * <code>string scope = 4;</code>
         */
        String getScope();

        /**
         * <pre>
         * Logical scope of this BioCharacteristic. Typical examples
         * could be "phenotype", "disease", "observation", "source".
         * TODO:  This may be modified into an enumeration or expressed through
         *        an OntologyTerm.
         * </pre>
         *
         * <code>string scope = 4;</code>
         */
        com.google.protobuf.ByteString
        getScopeBytes();
    }

    /**
     * <pre>
     * BioCharacteristic is a prototype wrapper object for single instances
     * of phenotypes, diseases ... which may be described through one or several
     * ontology terms
     * </pre>
     * <p>
     * Protobuf type {@code BioCharacteristic}
     */
    public static final class BioCharacteristic extends
            com.google.protobuf.GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:BioCharacteristic)
            BioCharacteristicOrBuilder {
        // Use BioCharacteristic.newBuilder() to construct.
        private BioCharacteristic(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }

        private BioCharacteristic() {
            description_ = "";
            ontologyTerms_ = java.util.Collections.emptyList();
            negatedOntologyTerms_ = java.util.Collections.emptyList();
            scope_ = "";
        }

        @Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        private BioCharacteristic(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            this();
            int mutable_bitField0_ = 0;
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!input.skipField(tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 10: {
                            String s = input.readStringRequireUtf8();

                            description_ = s;
                            break;
                        }
                        case 18: {
                            if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                                ontologyTerms_ = new java.util.ArrayList<Shared.OntologyTerm>();
                                mutable_bitField0_ |= 0x00000002;
                            }
                            ontologyTerms_.add(
                                    input.readMessage(Shared.OntologyTerm.parser(), extensionRegistry));
                            break;
                        }
                        case 26: {
                            if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                                negatedOntologyTerms_ = new java.util.ArrayList<Shared.OntologyTerm>();
                                mutable_bitField0_ |= 0x00000004;
                            }
                            negatedOntologyTerms_.add(
                                    input.readMessage(Shared.OntologyTerm.parser(), extensionRegistry));
                            break;
                        }
                        case 34: {
                            String s = input.readStringRequireUtf8();

                            scope_ = s;
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e).setUnfinishedMessage(this);
            } finally {
                if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                    ontologyTerms_ = java.util.Collections.unmodifiableList(ontologyTerms_);
                }
                if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                    negatedOntologyTerms_ = java.util.Collections.unmodifiableList(negatedOntologyTerms_);
                }
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return Biometadata.internal_static_ga4ghmetadata_BioCharacteristic_descriptor;
        }

        protected FieldAccessorTable
        internalGetFieldAccessorTable() {
            return Biometadata.internal_static_ga4ghmetadata_BioCharacteristic_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            Biometadata.BioCharacteristic.class, Biometadata.BioCharacteristic.Builder.class);
        }

        private int bitField0_;
        public static final int DESCRIPTION_FIELD_NUMBER = 1;
        private volatile Object description_;

        /**
         * <pre>
         * A free text description of the specific disease diagnosis or phenotype
         * here, which is then characterized by zero or more OntologyTerm objects.
         * The description should be concise and should not include data points
         * better expressed through specific attributes elsewhere in the schema.
         * Example (for a single disease item):
         *   "squamous cell carcinoma, base of tongue, stage 2"
         * </pre>
         *
         * <code>string description = 1;</code>
         */
        public String getDescription() {
            Object ref = description_;
            if (ref instanceof String) {
                return (String) ref;
            } else {
                com.google.protobuf.ByteString bs =
                        (com.google.protobuf.ByteString) ref;
                String s = bs.toStringUtf8();
                description_ = s;
                return s;
            }
        }

        /**
         * <pre>
         * A free text description of the specific disease diagnosis or phenotype
         * here, which is then characterized by zero or more OntologyTerm objects.
         * The description should be concise and should not include data points
         * better expressed through specific attributes elsewhere in the schema.
         * Example (for a single disease item):
         *   "squamous cell carcinoma, base of tongue, stage 2"
         * </pre>
         *
         * <code>string description = 1;</code>
         */
        public com.google.protobuf.ByteString
        getDescriptionBytes() {
            Object ref = description_;
            if (ref instanceof String) {
                com.google.protobuf.ByteString b =
                        com.google.protobuf.ByteString.copyFromUtf8(
                                (String) ref);
                description_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }

        public static final int ONTOLOGY_TERMS_FIELD_NUMBER = 2;
        private java.util.List<Shared.OntologyTerm> ontologyTerms_;

        /**
         * <pre>
         * The ontologyTerms attribute contains a list of zero (discouraged) or more
         * OntologyTerm objects covering the characteristic (e.g. disease diagnosis,
         * phenotype) reorted here.
         * Example (for a single diagnosis "squamous cell carcinoma, base of tongue"):
         *     term_id: "DOID:0050865",
         *     term: "tongue squamous cell carcinoma",
         *     term_id: "UBERON:0006919",
         *     term: "tongue squamous epithelium",
         *     term_id: "UBERON:0010033",
         *     term: "posterior part of tongue",
         * </pre>
         *
         * <code>repeated .OntologyTerm ontology_terms = 2;</code>
         */
        public java.util.List<Shared.OntologyTerm> getOntologyTermsList() {
            return ontologyTerms_;
        }

        /**
         * <pre>
         * The ontologyTerms attribute contains a list of zero (discouraged) or more
         * OntologyTerm objects covering the characteristic (e.g. disease diagnosis,
         * phenotype) reorted here.
         * Example (for a single diagnosis "squamous cell carcinoma, base of tongue"):
         *     term_id: "DOID:0050865",
         *     term: "tongue squamous cell carcinoma",
         *     term_id: "UBERON:0006919",
         *     term: "tongue squamous epithelium",
         *     term_id: "UBERON:0010033",
         *     term: "posterior part of tongue",
         * </pre>
         *
         * <code>repeated .OntologyTerm ontology_terms = 2;</code>
         */
        public java.util.List<? extends Shared.OntologyTermOrBuilder>
        getOntologyTermsOrBuilderList() {
            return ontologyTerms_;
        }

        /**
         * <pre>
         * The ontologyTerms attribute contains a list of zero (discouraged) or more
         * OntologyTerm objects covering the characteristic (e.g. disease diagnosis,
         * phenotype) reorted here.
         * Example (for a single diagnosis "squamous cell carcinoma, base of tongue"):
         *     term_id: "DOID:0050865",
         *     term: "tongue squamous cell carcinoma",
         *     term_id: "UBERON:0006919",
         *     term: "tongue squamous epithelium",
         *     term_id: "UBERON:0010033",
         *     term: "posterior part of tongue",
         * </pre>
         *
         * <code>repeated .OntologyTerm ontology_terms = 2;</code>
         */
        public int getOntologyTermsCount() {
            return ontologyTerms_.size();
        }

        /**
         * <pre>
         * The ontologyTerms attribute contains a list of zero (discouraged) or more
         * OntologyTerm objects covering the characteristic (e.g. disease diagnosis,
         * phenotype) reorted here.
         * Example (for a single diagnosis "squamous cell carcinoma, base of tongue"):
         *     term_id: "DOID:0050865",
         *     term: "tongue squamous cell carcinoma",
         *     term_id: "UBERON:0006919",
         *     term: "tongue squamous epithelium",
         *     term_id: "UBERON:0010033",
         *     term: "posterior part of tongue",
         * </pre>
         *
         * <code>repeated .OntologyTerm ontology_terms = 2;</code>
         */
        public Shared.OntologyTerm getOntologyTerms(int index) {
            return ontologyTerms_.get(index);
        }

        /**
         * <pre>
         * The ontologyTerms attribute contains a list of zero (discouraged) or more
         * OntologyTerm objects covering the characteristic (e.g. disease diagnosis,
         * phenotype) reorted here.
         * Example (for a single diagnosis "squamous cell carcinoma, base of tongue"):
         *     term_id: "DOID:0050865",
         *     term: "tongue squamous cell carcinoma",
         *     term_id: "UBERON:0006919",
         *     term: "tongue squamous epithelium",
         *     term_id: "UBERON:0010033",
         *     term: "posterior part of tongue",
         * </pre>
         *
         * <code>repeated .OntologyTerm ontology_terms = 2;</code>
         */
        public Shared.OntologyTermOrBuilder getOntologyTermsOrBuilder(
                int index) {
            return ontologyTerms_.get(index);
        }

        public static final int NEGATED_ONTOLOGY_TERMS_FIELD_NUMBER = 3;
        private java.util.List<Shared.OntologyTerm> negatedOntologyTerms_;

        /**
         * <pre>
         * negatedOntologyTerms are used to describe features which are explicitely
         * not part of the BioCharacteristic.
         * Example: For a phenotype
         *      description: "Bilateral ventricle anomalies (but not hypertrophy)"
         *   ...  one could use the ontologyTerms
         *      term_id: "HP:0001711"
         *      term: "Abnormality of the left ventricle"
         *      id: "HP:0001707"
         *      term: "Abnormality of the right ventricle"
         *   ... and add to negatedOntologyTerms
         *      term_id: "HP:0001714"
         *      term: "Ventricular hypertrophy"
         * </pre>
         *
         * <code>repeated .OntologyTerm negated_ontology_terms = 3;</code>
         */
        public java.util.List<Shared.OntologyTerm> getNegatedOntologyTermsList() {
            return negatedOntologyTerms_;
        }

        /**
         * <pre>
         * negatedOntologyTerms are used to describe features which are explicitely
         * not part of the BioCharacteristic.
         * Example: For a phenotype
         *      description: "Bilateral ventricle anomalies (but not hypertrophy)"
         *   ...  one could use the ontologyTerms
         *      term_id: "HP:0001711"
         *      term: "Abnormality of the left ventricle"
         *      id: "HP:0001707"
         *      term: "Abnormality of the right ventricle"
         *   ... and add to negatedOntologyTerms
         *      term_id: "HP:0001714"
         *      term: "Ventricular hypertrophy"
         * </pre>
         *
         * <code>repeated .OntologyTerm negated_ontology_terms = 3;</code>
         */
        public java.util.List<? extends Shared.OntologyTermOrBuilder>
        getNegatedOntologyTermsOrBuilderList() {
            return negatedOntologyTerms_;
        }

        /**
         * <pre>
         * negatedOntologyTerms are used to describe features which are explicitely
         * not part of the BioCharacteristic.
         * Example: For a phenotype
         *      description: "Bilateral ventricle anomalies (but not hypertrophy)"
         *   ...  one could use the ontologyTerms
         *      term_id: "HP:0001711"
         *      term: "Abnormality of the left ventricle"
         *      id: "HP:0001707"
         *      term: "Abnormality of the right ventricle"
         *   ... and add to negatedOntologyTerms
         *      term_id: "HP:0001714"
         *      term: "Ventricular hypertrophy"
         * </pre>
         *
         * <code>repeated .OntologyTerm negated_ontology_terms = 3;</code>
         */
        public int getNegatedOntologyTermsCount() {
            return negatedOntologyTerms_.size();
        }

        /**
         * <pre>
         * negatedOntologyTerms are used to describe features which are explicitely
         * not part of the BioCharacteristic.
         * Example: For a phenotype
         *      description: "Bilateral ventricle anomalies (but not hypertrophy)"
         *   ...  one could use the ontologyTerms
         *      term_id: "HP:0001711"
         *      term: "Abnormality of the left ventricle"
         *      id: "HP:0001707"
         *      term: "Abnormality of the right ventricle"
         *   ... and add to negatedOntologyTerms
         *      term_id: "HP:0001714"
         *      term: "Ventricular hypertrophy"
         * </pre>
         *
         * <code>repeated .OntologyTerm negated_ontology_terms = 3;</code>
         */
        public Shared.OntologyTerm getNegatedOntologyTerms(int index) {
            return negatedOntologyTerms_.get(index);
        }

        /**
         * <pre>
         * negatedOntologyTerms are used to describe features which are explicitely
         * not part of the BioCharacteristic.
         * Example: For a phenotype
         *      description: "Bilateral ventricle anomalies (but not hypertrophy)"
         *   ...  one could use the ontologyTerms
         *      term_id: "HP:0001711"
         *      term: "Abnormality of the left ventricle"
         *      id: "HP:0001707"
         *      term: "Abnormality of the right ventricle"
         *   ... and add to negatedOntologyTerms
         *      term_id: "HP:0001714"
         *      term: "Ventricular hypertrophy"
         * </pre>
         *
         * <code>repeated .OntologyTerm negated_ontology_terms = 3;</code>
         */
        public Shared.OntologyTermOrBuilder getNegatedOntologyTermsOrBuilder(
                int index) {
            return negatedOntologyTerms_.get(index);
        }

        public static final int SCOPE_FIELD_NUMBER = 4;
        private volatile Object scope_;

        /**
         * <pre>
         * Logical scope of this BioCharacteristic. Typical examples
         * could be "phenotype", "disease", "observation", "source".
         * TODO:  This may be modified into an enumeration or expressed through
         *        an OntologyTerm.
         * </pre>
         *
         * <code>string scope = 4;</code>
         */
        public String getScope() {
            Object ref = scope_;
            if (ref instanceof String) {
                return (String) ref;
            } else {
                com.google.protobuf.ByteString bs =
                        (com.google.protobuf.ByteString) ref;
                String s = bs.toStringUtf8();
                scope_ = s;
                return s;
            }
        }

        /**
         * <pre>
         * Logical scope of this BioCharacteristic. Typical examples
         * could be "phenotype", "disease", "observation", "source".
         * TODO:  This may be modified into an enumeration or expressed through
         *        an OntologyTerm.
         * </pre>
         *
         * <code>string scope = 4;</code>
         */
        public com.google.protobuf.ByteString
        getScopeBytes() {
            Object ref = scope_;
            if (ref instanceof String) {
                com.google.protobuf.ByteString b =
                        com.google.protobuf.ByteString.copyFromUtf8(
                                (String) ref);
                scope_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            if (!getDescriptionBytes().isEmpty()) {
                com.google.protobuf.GeneratedMessageV3.writeString(output, 1, description_);
            }
            for (int i = 0; i < ontologyTerms_.size(); i++) {
                output.writeMessage(2, ontologyTerms_.get(i));
            }
            for (int i = 0; i < negatedOntologyTerms_.size(); i++) {
                output.writeMessage(3, negatedOntologyTerms_.get(i));
            }
            if (!getScopeBytes().isEmpty()) {
                com.google.protobuf.GeneratedMessageV3.writeString(output, 4, scope_);
            }
        }

        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            if (!getDescriptionBytes().isEmpty()) {
                size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, description_);
            }
            for (int i = 0; i < ontologyTerms_.size(); i++) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(2, ontologyTerms_.get(i));
            }
            for (int i = 0; i < negatedOntologyTerms_.size(); i++) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(3, negatedOntologyTerms_.get(i));
            }
            if (!getScopeBytes().isEmpty()) {
                size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, scope_);
            }
            memoizedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @Override
        public boolean equals(final Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof Biometadata.BioCharacteristic)) {
                return super.equals(obj);
            }
            Biometadata.BioCharacteristic other = (Biometadata.BioCharacteristic) obj;

            boolean result = true;
            result = result && getDescription()
                    .equals(other.getDescription());
            result = result && getOntologyTermsList()
                    .equals(other.getOntologyTermsList());
            result = result && getNegatedOntologyTermsList()
                    .equals(other.getNegatedOntologyTermsList());
            result = result && getScope()
                    .equals(other.getScope());
            return result;
        }

        @Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            hash = (37 * hash) + DESCRIPTION_FIELD_NUMBER;
            hash = (53 * hash) + getDescription().hashCode();
            if (getOntologyTermsCount() > 0) {
                hash = (37 * hash) + ONTOLOGY_TERMS_FIELD_NUMBER;
                hash = (53 * hash) + getOntologyTermsList().hashCode();
            }
            if (getNegatedOntologyTermsCount() > 0) {
                hash = (37 * hash) + NEGATED_ONTOLOGY_TERMS_FIELD_NUMBER;
                hash = (53 * hash) + getNegatedOntologyTermsList().hashCode();
            }
            hash = (37 * hash) + SCOPE_FIELD_NUMBER;
            hash = (53 * hash) + getScope().hashCode();
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        public static Biometadata.BioCharacteristic parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static Biometadata.BioCharacteristic parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static Biometadata.BioCharacteristic parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static Biometadata.BioCharacteristic parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static Biometadata.BioCharacteristic parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static Biometadata.BioCharacteristic parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static Biometadata.BioCharacteristic parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input);
        }

        public static Biometadata.BioCharacteristic parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }

        public static Biometadata.BioCharacteristic parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static Biometadata.BioCharacteristic parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(Biometadata.BioCharacteristic prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                    ? new Builder() : new Builder().mergeFrom(this);
        }

        @Override
        protected Builder newBuilderForType(
                BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * <pre>
         * BioCharacteristic is a prototype wrapper object for single instances
         * of phenotypes, diseases ... which may be described through one or several
         * ontology terms
         * </pre>
         * <p>
         * Protobuf type {@code BioCharacteristic}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:BioCharacteristic)
                Biometadata.BioCharacteristicOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return Biometadata.internal_static_ga4ghmetadata_BioCharacteristic_descriptor;
            }

            protected FieldAccessorTable
            internalGetFieldAccessorTable() {
                return Biometadata.internal_static_ga4ghmetadata_BioCharacteristic_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                Biometadata.BioCharacteristic.class, Biometadata.BioCharacteristic.Builder.class);
            }

            // Construct using Biometadata.BioCharacteristic.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessageV3
                        .alwaysUseFieldBuilders) {
                    getOntologyTermsFieldBuilder();
                    getNegatedOntologyTermsFieldBuilder();
                }
            }

            public Builder clear() {
                super.clear();
                description_ = "";

                if (ontologyTermsBuilder_ == null) {
                    ontologyTerms_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000002);
                } else {
                    ontologyTermsBuilder_.clear();
                }
                if (negatedOntologyTermsBuilder_ == null) {
                    negatedOntologyTerms_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000004);
                } else {
                    negatedOntologyTermsBuilder_.clear();
                }
                scope_ = "";

                return this;
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return Biometadata.internal_static_ga4ghmetadata_BioCharacteristic_descriptor;
            }

            public Biometadata.BioCharacteristic getDefaultInstanceForType() {
                return Biometadata.BioCharacteristic.getDefaultInstance();
            }

            public Biometadata.BioCharacteristic build() {
                Biometadata.BioCharacteristic result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public Biometadata.BioCharacteristic buildPartial() {
                Biometadata.BioCharacteristic result = new Biometadata.BioCharacteristic(this);
                int from_bitField0_ = bitField0_;
                int to_bitField0_ = 0;
                result.description_ = description_;
                if (ontologyTermsBuilder_ == null) {
                    if (((bitField0_ & 0x00000002) == 0x00000002)) {
                        ontologyTerms_ = java.util.Collections.unmodifiableList(ontologyTerms_);
                        bitField0_ = (bitField0_ & ~0x00000002);
                    }
                    result.ontologyTerms_ = ontologyTerms_;
                } else {
                    result.ontologyTerms_ = ontologyTermsBuilder_.build();
                }
                if (negatedOntologyTermsBuilder_ == null) {
                    if (((bitField0_ & 0x00000004) == 0x00000004)) {
                        negatedOntologyTerms_ = java.util.Collections.unmodifiableList(negatedOntologyTerms_);
                        bitField0_ = (bitField0_ & ~0x00000004);
                    }
                    result.negatedOntologyTerms_ = negatedOntologyTerms_;
                } else {
                    result.negatedOntologyTerms_ = negatedOntologyTermsBuilder_.build();
                }
                result.scope_ = scope_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder clone() {
                return (Builder) super.clone();
            }

            public Builder setField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.setField(field, value);
            }

            public Builder clearField(
                    com.google.protobuf.Descriptors.FieldDescriptor field) {
                return (Builder) super.clearField(field);
            }

            public Builder clearOneof(
                    com.google.protobuf.Descriptors.OneofDescriptor oneof) {
                return (Builder) super.clearOneof(oneof);
            }

            public Builder setRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    int index, Object value) {
                return (Builder) super.setRepeatedField(field, index, value);
            }

            public Builder addRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.addRepeatedField(field, value);
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof Biometadata.BioCharacteristic) {
                    return mergeFrom((Biometadata.BioCharacteristic) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(Biometadata.BioCharacteristic other) {
                if (other == Biometadata.BioCharacteristic.getDefaultInstance()) return this;
                if (!other.getDescription().isEmpty()) {
                    description_ = other.description_;
                    onChanged();
                }
                if (ontologyTermsBuilder_ == null) {
                    if (!other.ontologyTerms_.isEmpty()) {
                        if (ontologyTerms_.isEmpty()) {
                            ontologyTerms_ = other.ontologyTerms_;
                            bitField0_ = (bitField0_ & ~0x00000002);
                        } else {
                            ensureOntologyTermsIsMutable();
                            ontologyTerms_.addAll(other.ontologyTerms_);
                        }
                        onChanged();
                    }
                } else {
                    if (!other.ontologyTerms_.isEmpty()) {
                        if (ontologyTermsBuilder_.isEmpty()) {
                            ontologyTermsBuilder_.dispose();
                            ontologyTermsBuilder_ = null;
                            ontologyTerms_ = other.ontologyTerms_;
                            bitField0_ = (bitField0_ & ~0x00000002);
                            ontologyTermsBuilder_ =
                                    com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                                            getOntologyTermsFieldBuilder() : null;
                        } else {
                            ontologyTermsBuilder_.addAllMessages(other.ontologyTerms_);
                        }
                    }
                }
                if (negatedOntologyTermsBuilder_ == null) {
                    if (!other.negatedOntologyTerms_.isEmpty()) {
                        if (negatedOntologyTerms_.isEmpty()) {
                            negatedOntologyTerms_ = other.negatedOntologyTerms_;
                            bitField0_ = (bitField0_ & ~0x00000004);
                        } else {
                            ensureNegatedOntologyTermsIsMutable();
                            negatedOntologyTerms_.addAll(other.negatedOntologyTerms_);
                        }
                        onChanged();
                    }
                } else {
                    if (!other.negatedOntologyTerms_.isEmpty()) {
                        if (negatedOntologyTermsBuilder_.isEmpty()) {
                            negatedOntologyTermsBuilder_.dispose();
                            negatedOntologyTermsBuilder_ = null;
                            negatedOntologyTerms_ = other.negatedOntologyTerms_;
                            bitField0_ = (bitField0_ & ~0x00000004);
                            negatedOntologyTermsBuilder_ =
                                    com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                                            getNegatedOntologyTermsFieldBuilder() : null;
                        } else {
                            negatedOntologyTermsBuilder_.addAllMessages(other.negatedOntologyTerms_);
                        }
                    }
                }
                if (!other.getScope().isEmpty()) {
                    scope_ = other.scope_;
                    onChanged();
                }
                onChanged();
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                Biometadata.BioCharacteristic parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (Biometadata.BioCharacteristic) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private int bitField0_;

            private Object description_ = "";

            /**
             * <pre>
             * A free text description of the specific disease diagnosis or phenotype
             * here, which is then characterized by zero or more OntologyTerm objects.
             * The description should be concise and should not include data points
             * better expressed through specific attributes elsewhere in the schema.
             * Example (for a single disease item):
             *   "squamous cell carcinoma, base of tongue, stage 2"
             * </pre>
             *
             * <code>string description = 1;</code>
             */
            public String getDescription() {
                Object ref = description_;
                if (!(ref instanceof String)) {
                    com.google.protobuf.ByteString bs =
                            (com.google.protobuf.ByteString) ref;
                    String s = bs.toStringUtf8();
                    description_ = s;
                    return s;
                } else {
                    return (String) ref;
                }
            }

            /**
             * <pre>
             * A free text description of the specific disease diagnosis or phenotype
             * here, which is then characterized by zero or more OntologyTerm objects.
             * The description should be concise and should not include data points
             * better expressed through specific attributes elsewhere in the schema.
             * Example (for a single disease item):
             *   "squamous cell carcinoma, base of tongue, stage 2"
             * </pre>
             *
             * <code>string description = 1;</code>
             */
            public com.google.protobuf.ByteString
            getDescriptionBytes() {
                Object ref = description_;
                if (ref instanceof String) {
                    com.google.protobuf.ByteString b =
                            com.google.protobuf.ByteString.copyFromUtf8(
                                    (String) ref);
                    description_ = b;
                    return b;
                } else {
                    return (com.google.protobuf.ByteString) ref;
                }
            }

            /**
             * <pre>
             * A free text description of the specific disease diagnosis or phenotype
             * here, which is then characterized by zero or more OntologyTerm objects.
             * The description should be concise and should not include data points
             * better expressed through specific attributes elsewhere in the schema.
             * Example (for a single disease item):
             *   "squamous cell carcinoma, base of tongue, stage 2"
             * </pre>
             *
             * <code>string description = 1;</code>
             */
            public Builder setDescription(
                    String value) {
                if (value == null) {
                    throw new NullPointerException();
                }

                description_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * A free text description of the specific disease diagnosis or phenotype
             * here, which is then characterized by zero or more OntologyTerm objects.
             * The description should be concise and should not include data points
             * better expressed through specific attributes elsewhere in the schema.
             * Example (for a single disease item):
             *   "squamous cell carcinoma, base of tongue, stage 2"
             * </pre>
             *
             * <code>string description = 1;</code>
             */
            public Builder clearDescription() {

                description_ = getDefaultInstance().getDescription();
                onChanged();
                return this;
            }

            /**
             * <pre>
             * A free text description of the specific disease diagnosis or phenotype
             * here, which is then characterized by zero or more OntologyTerm objects.
             * The description should be concise and should not include data points
             * better expressed through specific attributes elsewhere in the schema.
             * Example (for a single disease item):
             *   "squamous cell carcinoma, base of tongue, stage 2"
             * </pre>
             *
             * <code>string description = 1;</code>
             */
            public Builder setDescriptionBytes(
                    com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                checkByteStringIsUtf8(value);

                description_ = value;
                onChanged();
                return this;
            }

            private java.util.List<Shared.OntologyTerm> ontologyTerms_ =
                    java.util.Collections.emptyList();

            private void ensureOntologyTermsIsMutable() {
                if (!((bitField0_ & 0x00000002) == 0x00000002)) {
                    ontologyTerms_ = new java.util.ArrayList<Shared.OntologyTerm>(ontologyTerms_);
                    bitField0_ |= 0x00000002;
                }
            }

            private com.google.protobuf.RepeatedFieldBuilderV3<
                    Shared.OntologyTerm, Shared.OntologyTerm.Builder, Shared.OntologyTermOrBuilder> ontologyTermsBuilder_;

            /**
             * <pre>
             * The ontologyTerms attribute contains a list of zero (discouraged) or more
             * OntologyTerm objects covering the characteristic (e.g. disease diagnosis,
             * phenotype) reorted here.
             * Example (for a single diagnosis "squamous cell carcinoma, base of tongue"):
             *     term_id: "DOID:0050865",
             *     term: "tongue squamous cell carcinoma",
             *     term_id: "UBERON:0006919",
             *     term: "tongue squamous epithelium",
             *     term_id: "UBERON:0010033",
             *     term: "posterior part of tongue",
             * </pre>
             *
             * <code>repeated .OntologyTerm ontology_terms = 2;</code>
             */
            public java.util.List<Shared.OntologyTerm> getOntologyTermsList() {
                if (ontologyTermsBuilder_ == null) {
                    return java.util.Collections.unmodifiableList(ontologyTerms_);
                } else {
                    return ontologyTermsBuilder_.getMessageList();
                }
            }

            /**
             * <pre>
             * The ontologyTerms attribute contains a list of zero (discouraged) or more
             * OntologyTerm objects covering the characteristic (e.g. disease diagnosis,
             * phenotype) reorted here.
             * Example (for a single diagnosis "squamous cell carcinoma, base of tongue"):
             *     term_id: "DOID:0050865",
             *     term: "tongue squamous cell carcinoma",
             *     term_id: "UBERON:0006919",
             *     term: "tongue squamous epithelium",
             *     term_id: "UBERON:0010033",
             *     term: "posterior part of tongue",
             * </pre>
             *
             * <code>repeated .OntologyTerm ontology_terms = 2;</code>
             */
            public int getOntologyTermsCount() {
                if (ontologyTermsBuilder_ == null) {
                    return ontologyTerms_.size();
                } else {
                    return ontologyTermsBuilder_.getCount();
                }
            }

            /**
             * <pre>
             * The ontologyTerms attribute contains a list of zero (discouraged) or more
             * OntologyTerm objects covering the characteristic (e.g. disease diagnosis,
             * phenotype) reorted here.
             * Example (for a single diagnosis "squamous cell carcinoma, base of tongue"):
             *     term_id: "DOID:0050865",
             *     term: "tongue squamous cell carcinoma",
             *     term_id: "UBERON:0006919",
             *     term: "tongue squamous epithelium",
             *     term_id: "UBERON:0010033",
             *     term: "posterior part of tongue",
             * </pre>
             *
             * <code>repeated .OntologyTerm ontology_terms = 2;</code>
             */
            public Shared.OntologyTerm getOntologyTerms(int index) {
                if (ontologyTermsBuilder_ == null) {
                    return ontologyTerms_.get(index);
                } else {
                    return ontologyTermsBuilder_.getMessage(index);
                }
            }

            /**
             * <pre>
             * The ontologyTerms attribute contains a list of zero (discouraged) or more
             * OntologyTerm objects covering the characteristic (e.g. disease diagnosis,
             * phenotype) reorted here.
             * Example (for a single diagnosis "squamous cell carcinoma, base of tongue"):
             *     term_id: "DOID:0050865",
             *     term: "tongue squamous cell carcinoma",
             *     term_id: "UBERON:0006919",
             *     term: "tongue squamous epithelium",
             *     term_id: "UBERON:0010033",
             *     term: "posterior part of tongue",
             * </pre>
             *
             * <code>repeated .OntologyTerm ontology_terms = 2;</code>
             */
            public Builder setOntologyTerms(
                    int index, Shared.OntologyTerm value) {
                if (ontologyTermsBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureOntologyTermsIsMutable();
                    ontologyTerms_.set(index, value);
                    onChanged();
                } else {
                    ontologyTermsBuilder_.setMessage(index, value);
                }
                return this;
            }

            /**
             * <pre>
             * The ontologyTerms attribute contains a list of zero (discouraged) or more
             * OntologyTerm objects covering the characteristic (e.g. disease diagnosis,
             * phenotype) reorted here.
             * Example (for a single diagnosis "squamous cell carcinoma, base of tongue"):
             *     term_id: "DOID:0050865",
             *     term: "tongue squamous cell carcinoma",
             *     term_id: "UBERON:0006919",
             *     term: "tongue squamous epithelium",
             *     term_id: "UBERON:0010033",
             *     term: "posterior part of tongue",
             * </pre>
             *
             * <code>repeated .OntologyTerm ontology_terms = 2;</code>
             */
            public Builder setOntologyTerms(
                    int index, Shared.OntologyTerm.Builder builderForValue) {
                if (ontologyTermsBuilder_ == null) {
                    ensureOntologyTermsIsMutable();
                    ontologyTerms_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    ontologyTermsBuilder_.setMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <pre>
             * The ontologyTerms attribute contains a list of zero (discouraged) or more
             * OntologyTerm objects covering the characteristic (e.g. disease diagnosis,
             * phenotype) reorted here.
             * Example (for a single diagnosis "squamous cell carcinoma, base of tongue"):
             *     term_id: "DOID:0050865",
             *     term: "tongue squamous cell carcinoma",
             *     term_id: "UBERON:0006919",
             *     term: "tongue squamous epithelium",
             *     term_id: "UBERON:0010033",
             *     term: "posterior part of tongue",
             * </pre>
             *
             * <code>repeated .OntologyTerm ontology_terms = 2;</code>
             */
            public Builder addOntologyTerms(Shared.OntologyTerm value) {
                if (ontologyTermsBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureOntologyTermsIsMutable();
                    ontologyTerms_.add(value);
                    onChanged();
                } else {
                    ontologyTermsBuilder_.addMessage(value);
                }
                return this;
            }

            /**
             * <pre>
             * The ontologyTerms attribute contains a list of zero (discouraged) or more
             * OntologyTerm objects covering the characteristic (e.g. disease diagnosis,
             * phenotype) reorted here.
             * Example (for a single diagnosis "squamous cell carcinoma, base of tongue"):
             *     term_id: "DOID:0050865",
             *     term: "tongue squamous cell carcinoma",
             *     term_id: "UBERON:0006919",
             *     term: "tongue squamous epithelium",
             *     term_id: "UBERON:0010033",
             *     term: "posterior part of tongue",
             * </pre>
             *
             * <code>repeated .OntologyTerm ontology_terms = 2;</code>
             */
            public Builder addOntologyTerms(
                    int index, Shared.OntologyTerm value) {
                if (ontologyTermsBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureOntologyTermsIsMutable();
                    ontologyTerms_.add(index, value);
                    onChanged();
                } else {
                    ontologyTermsBuilder_.addMessage(index, value);
                }
                return this;
            }

            /**
             * <pre>
             * The ontologyTerms attribute contains a list of zero (discouraged) or more
             * OntologyTerm objects covering the characteristic (e.g. disease diagnosis,
             * phenotype) reorted here.
             * Example (for a single diagnosis "squamous cell carcinoma, base of tongue"):
             *     term_id: "DOID:0050865",
             *     term: "tongue squamous cell carcinoma",
             *     term_id: "UBERON:0006919",
             *     term: "tongue squamous epithelium",
             *     term_id: "UBERON:0010033",
             *     term: "posterior part of tongue",
             * </pre>
             *
             * <code>repeated .OntologyTerm ontology_terms = 2;</code>
             */
            public Builder addOntologyTerms(
                    Shared.OntologyTerm.Builder builderForValue) {
                if (ontologyTermsBuilder_ == null) {
                    ensureOntologyTermsIsMutable();
                    ontologyTerms_.add(builderForValue.build());
                    onChanged();
                } else {
                    ontologyTermsBuilder_.addMessage(builderForValue.build());
                }
                return this;
            }

            /**
             * <pre>
             * The ontologyTerms attribute contains a list of zero (discouraged) or more
             * OntologyTerm objects covering the characteristic (e.g. disease diagnosis,
             * phenotype) reorted here.
             * Example (for a single diagnosis "squamous cell carcinoma, base of tongue"):
             *     term_id: "DOID:0050865",
             *     term: "tongue squamous cell carcinoma",
             *     term_id: "UBERON:0006919",
             *     term: "tongue squamous epithelium",
             *     term_id: "UBERON:0010033",
             *     term: "posterior part of tongue",
             * </pre>
             *
             * <code>repeated .OntologyTerm ontology_terms = 2;</code>
             */
            public Builder addOntologyTerms(
                    int index, Shared.OntologyTerm.Builder builderForValue) {
                if (ontologyTermsBuilder_ == null) {
                    ensureOntologyTermsIsMutable();
                    ontologyTerms_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    ontologyTermsBuilder_.addMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <pre>
             * The ontologyTerms attribute contains a list of zero (discouraged) or more
             * OntologyTerm objects covering the characteristic (e.g. disease diagnosis,
             * phenotype) reorted here.
             * Example (for a single diagnosis "squamous cell carcinoma, base of tongue"):
             *     term_id: "DOID:0050865",
             *     term: "tongue squamous cell carcinoma",
             *     term_id: "UBERON:0006919",
             *     term: "tongue squamous epithelium",
             *     term_id: "UBERON:0010033",
             *     term: "posterior part of tongue",
             * </pre>
             *
             * <code>repeated .OntologyTerm ontology_terms = 2;</code>
             */
            public Builder addAllOntologyTerms(
                    Iterable<? extends Shared.OntologyTerm> values) {
                if (ontologyTermsBuilder_ == null) {
                    ensureOntologyTermsIsMutable();
                    com.google.protobuf.AbstractMessageLite.Builder.addAll(
                            values, ontologyTerms_);
                    onChanged();
                } else {
                    ontologyTermsBuilder_.addAllMessages(values);
                }
                return this;
            }

            /**
             * <pre>
             * The ontologyTerms attribute contains a list of zero (discouraged) or more
             * OntologyTerm objects covering the characteristic (e.g. disease diagnosis,
             * phenotype) reorted here.
             * Example (for a single diagnosis "squamous cell carcinoma, base of tongue"):
             *     term_id: "DOID:0050865",
             *     term: "tongue squamous cell carcinoma",
             *     term_id: "UBERON:0006919",
             *     term: "tongue squamous epithelium",
             *     term_id: "UBERON:0010033",
             *     term: "posterior part of tongue",
             * </pre>
             *
             * <code>repeated .OntologyTerm ontology_terms = 2;</code>
             */
            public Builder clearOntologyTerms() {
                if (ontologyTermsBuilder_ == null) {
                    ontologyTerms_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000002);
                    onChanged();
                } else {
                    ontologyTermsBuilder_.clear();
                }
                return this;
            }

            /**
             * <pre>
             * The ontologyTerms attribute contains a list of zero (discouraged) or more
             * OntologyTerm objects covering the characteristic (e.g. disease diagnosis,
             * phenotype) reorted here.
             * Example (for a single diagnosis "squamous cell carcinoma, base of tongue"):
             *     term_id: "DOID:0050865",
             *     term: "tongue squamous cell carcinoma",
             *     term_id: "UBERON:0006919",
             *     term: "tongue squamous epithelium",
             *     term_id: "UBERON:0010033",
             *     term: "posterior part of tongue",
             * </pre>
             *
             * <code>repeated .OntologyTerm ontology_terms = 2;</code>
             */
            public Builder removeOntologyTerms(int index) {
                if (ontologyTermsBuilder_ == null) {
                    ensureOntologyTermsIsMutable();
                    ontologyTerms_.remove(index);
                    onChanged();
                } else {
                    ontologyTermsBuilder_.remove(index);
                }
                return this;
            }

            /**
             * <pre>
             * The ontologyTerms attribute contains a list of zero (discouraged) or more
             * OntologyTerm objects covering the characteristic (e.g. disease diagnosis,
             * phenotype) reorted here.
             * Example (for a single diagnosis "squamous cell carcinoma, base of tongue"):
             *     term_id: "DOID:0050865",
             *     term: "tongue squamous cell carcinoma",
             *     term_id: "UBERON:0006919",
             *     term: "tongue squamous epithelium",
             *     term_id: "UBERON:0010033",
             *     term: "posterior part of tongue",
             * </pre>
             *
             * <code>repeated .OntologyTerm ontology_terms = 2;</code>
             */
            public Shared.OntologyTerm.Builder getOntologyTermsBuilder(
                    int index) {
                return getOntologyTermsFieldBuilder().getBuilder(index);
            }

            /**
             * <pre>
             * The ontologyTerms attribute contains a list of zero (discouraged) or more
             * OntologyTerm objects covering the characteristic (e.g. disease diagnosis,
             * phenotype) reorted here.
             * Example (for a single diagnosis "squamous cell carcinoma, base of tongue"):
             *     term_id: "DOID:0050865",
             *     term: "tongue squamous cell carcinoma",
             *     term_id: "UBERON:0006919",
             *     term: "tongue squamous epithelium",
             *     term_id: "UBERON:0010033",
             *     term: "posterior part of tongue",
             * </pre>
             *
             * <code>repeated .OntologyTerm ontology_terms = 2;</code>
             */
            public Shared.OntologyTermOrBuilder getOntologyTermsOrBuilder(
                    int index) {
                if (ontologyTermsBuilder_ == null) {
                    return ontologyTerms_.get(index);
                } else {
                    return ontologyTermsBuilder_.getMessageOrBuilder(index);
                }
            }

            /**
             * <pre>
             * The ontologyTerms attribute contains a list of zero (discouraged) or more
             * OntologyTerm objects covering the characteristic (e.g. disease diagnosis,
             * phenotype) reorted here.
             * Example (for a single diagnosis "squamous cell carcinoma, base of tongue"):
             *     term_id: "DOID:0050865",
             *     term: "tongue squamous cell carcinoma",
             *     term_id: "UBERON:0006919",
             *     term: "tongue squamous epithelium",
             *     term_id: "UBERON:0010033",
             *     term: "posterior part of tongue",
             * </pre>
             *
             * <code>repeated .OntologyTerm ontology_terms = 2;</code>
             */
            public java.util.List<? extends Shared.OntologyTermOrBuilder>
            getOntologyTermsOrBuilderList() {
                if (ontologyTermsBuilder_ != null) {
                    return ontologyTermsBuilder_.getMessageOrBuilderList();
                } else {
                    return java.util.Collections.unmodifiableList(ontologyTerms_);
                }
            }

            /**
             * <pre>
             * The ontologyTerms attribute contains a list of zero (discouraged) or more
             * OntologyTerm objects covering the characteristic (e.g. disease diagnosis,
             * phenotype) reorted here.
             * Example (for a single diagnosis "squamous cell carcinoma, base of tongue"):
             *     term_id: "DOID:0050865",
             *     term: "tongue squamous cell carcinoma",
             *     term_id: "UBERON:0006919",
             *     term: "tongue squamous epithelium",
             *     term_id: "UBERON:0010033",
             *     term: "posterior part of tongue",
             * </pre>
             *
             * <code>repeated .OntologyTerm ontology_terms = 2;</code>
             */
            public Shared.OntologyTerm.Builder addOntologyTermsBuilder() {
                return getOntologyTermsFieldBuilder().addBuilder(
                        Shared.OntologyTerm.getDefaultInstance());
            }

            /**
             * <pre>
             * The ontologyTerms attribute contains a list of zero (discouraged) or more
             * OntologyTerm objects covering the characteristic (e.g. disease diagnosis,
             * phenotype) reorted here.
             * Example (for a single diagnosis "squamous cell carcinoma, base of tongue"):
             *     term_id: "DOID:0050865",
             *     term: "tongue squamous cell carcinoma",
             *     term_id: "UBERON:0006919",
             *     term: "tongue squamous epithelium",
             *     term_id: "UBERON:0010033",
             *     term: "posterior part of tongue",
             * </pre>
             *
             * <code>repeated .OntologyTerm ontology_terms = 2;</code>
             */
            public Shared.OntologyTerm.Builder addOntologyTermsBuilder(
                    int index) {
                return getOntologyTermsFieldBuilder().addBuilder(
                        index, Shared.OntologyTerm.getDefaultInstance());
            }

            /**
             * <pre>
             * The ontologyTerms attribute contains a list of zero (discouraged) or more
             * OntologyTerm objects covering the characteristic (e.g. disease diagnosis,
             * phenotype) reorted here.
             * Example (for a single diagnosis "squamous cell carcinoma, base of tongue"):
             *     term_id: "DOID:0050865",
             *     term: "tongue squamous cell carcinoma",
             *     term_id: "UBERON:0006919",
             *     term: "tongue squamous epithelium",
             *     term_id: "UBERON:0010033",
             *     term: "posterior part of tongue",
             * </pre>
             *
             * <code>repeated .OntologyTerm ontology_terms = 2;</code>
             */
            public java.util.List<Shared.OntologyTerm.Builder>
            getOntologyTermsBuilderList() {
                return getOntologyTermsFieldBuilder().getBuilderList();
            }

            private com.google.protobuf.RepeatedFieldBuilderV3<
                    Shared.OntologyTerm, Shared.OntologyTerm.Builder, Shared.OntologyTermOrBuilder>
            getOntologyTermsFieldBuilder() {
                if (ontologyTermsBuilder_ == null) {
                    ontologyTermsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
                            Shared.OntologyTerm, Shared.OntologyTerm.Builder, Shared.OntologyTermOrBuilder>(
                            ontologyTerms_,
                            ((bitField0_ & 0x00000002) == 0x00000002),
                            getParentForChildren(),
                            isClean());
                    ontologyTerms_ = null;
                }
                return ontologyTermsBuilder_;
            }

            private java.util.List<Shared.OntologyTerm> negatedOntologyTerms_ =
                    java.util.Collections.emptyList();

            private void ensureNegatedOntologyTermsIsMutable() {
                if (!((bitField0_ & 0x00000004) == 0x00000004)) {
                    negatedOntologyTerms_ = new java.util.ArrayList<Shared.OntologyTerm>(negatedOntologyTerms_);
                    bitField0_ |= 0x00000004;
                }
            }

            private com.google.protobuf.RepeatedFieldBuilderV3<
                    Shared.OntologyTerm, Shared.OntologyTerm.Builder, Shared.OntologyTermOrBuilder> negatedOntologyTermsBuilder_;

            /**
             * <pre>
             * negatedOntologyTerms are used to describe features which are explicitely
             * not part of the BioCharacteristic.
             * Example: For a phenotype
             *      description: "Bilateral ventricle anomalies (but not hypertrophy)"
             *   ...  one could use the ontologyTerms
             *      term_id: "HP:0001711"
             *      term: "Abnormality of the left ventricle"
             *      id: "HP:0001707"
             *      term: "Abnormality of the right ventricle"
             *   ... and add to negatedOntologyTerms
             *      term_id: "HP:0001714"
             *      term: "Ventricular hypertrophy"
             * </pre>
             *
             * <code>repeated .OntologyTerm negated_ontology_terms = 3;</code>
             */
            public java.util.List<Shared.OntologyTerm> getNegatedOntologyTermsList() {
                if (negatedOntologyTermsBuilder_ == null) {
                    return java.util.Collections.unmodifiableList(negatedOntologyTerms_);
                } else {
                    return negatedOntologyTermsBuilder_.getMessageList();
                }
            }

            /**
             * <pre>
             * negatedOntologyTerms are used to describe features which are explicitely
             * not part of the BioCharacteristic.
             * Example: For a phenotype
             *      description: "Bilateral ventricle anomalies (but not hypertrophy)"
             *   ...  one could use the ontologyTerms
             *      term_id: "HP:0001711"
             *      term: "Abnormality of the left ventricle"
             *      id: "HP:0001707"
             *      term: "Abnormality of the right ventricle"
             *   ... and add to negatedOntologyTerms
             *      term_id: "HP:0001714"
             *      term: "Ventricular hypertrophy"
             * </pre>
             *
             * <code>repeated .OntologyTerm negated_ontology_terms = 3;</code>
             */
            public int getNegatedOntologyTermsCount() {
                if (negatedOntologyTermsBuilder_ == null) {
                    return negatedOntologyTerms_.size();
                } else {
                    return negatedOntologyTermsBuilder_.getCount();
                }
            }

            /**
             * <pre>
             * negatedOntologyTerms are used to describe features which are explicitely
             * not part of the BioCharacteristic.
             * Example: For a phenotype
             *      description: "Bilateral ventricle anomalies (but not hypertrophy)"
             *   ...  one could use the ontologyTerms
             *      term_id: "HP:0001711"
             *      term: "Abnormality of the left ventricle"
             *      id: "HP:0001707"
             *      term: "Abnormality of the right ventricle"
             *   ... and add to negatedOntologyTerms
             *      term_id: "HP:0001714"
             *      term: "Ventricular hypertrophy"
             * </pre>
             *
             * <code>repeated .OntologyTerm negated_ontology_terms = 3;</code>
             */
            public Shared.OntologyTerm getNegatedOntologyTerms(int index) {
                if (negatedOntologyTermsBuilder_ == null) {
                    return negatedOntologyTerms_.get(index);
                } else {
                    return negatedOntologyTermsBuilder_.getMessage(index);
                }
            }

            /**
             * <pre>
             * negatedOntologyTerms are used to describe features which are explicitely
             * not part of the BioCharacteristic.
             * Example: For a phenotype
             *      description: "Bilateral ventricle anomalies (but not hypertrophy)"
             *   ...  one could use the ontologyTerms
             *      term_id: "HP:0001711"
             *      term: "Abnormality of the left ventricle"
             *      id: "HP:0001707"
             *      term: "Abnormality of the right ventricle"
             *   ... and add to negatedOntologyTerms
             *      term_id: "HP:0001714"
             *      term: "Ventricular hypertrophy"
             * </pre>
             *
             * <code>repeated .OntologyTerm negated_ontology_terms = 3;</code>
             */
            public Builder setNegatedOntologyTerms(
                    int index, Shared.OntologyTerm value) {
                if (negatedOntologyTermsBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureNegatedOntologyTermsIsMutable();
                    negatedOntologyTerms_.set(index, value);
                    onChanged();
                } else {
                    negatedOntologyTermsBuilder_.setMessage(index, value);
                }
                return this;
            }

            /**
             * <pre>
             * negatedOntologyTerms are used to describe features which are explicitely
             * not part of the BioCharacteristic.
             * Example: For a phenotype
             *      description: "Bilateral ventricle anomalies (but not hypertrophy)"
             *   ...  one could use the ontologyTerms
             *      term_id: "HP:0001711"
             *      term: "Abnormality of the left ventricle"
             *      id: "HP:0001707"
             *      term: "Abnormality of the right ventricle"
             *   ... and add to negatedOntologyTerms
             *      term_id: "HP:0001714"
             *      term: "Ventricular hypertrophy"
             * </pre>
             *
             * <code>repeated .OntologyTerm negated_ontology_terms = 3;</code>
             */
            public Builder setNegatedOntologyTerms(
                    int index, Shared.OntologyTerm.Builder builderForValue) {
                if (negatedOntologyTermsBuilder_ == null) {
                    ensureNegatedOntologyTermsIsMutable();
                    negatedOntologyTerms_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    negatedOntologyTermsBuilder_.setMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <pre>
             * negatedOntologyTerms are used to describe features which are explicitely
             * not part of the BioCharacteristic.
             * Example: For a phenotype
             *      description: "Bilateral ventricle anomalies (but not hypertrophy)"
             *   ...  one could use the ontologyTerms
             *      term_id: "HP:0001711"
             *      term: "Abnormality of the left ventricle"
             *      id: "HP:0001707"
             *      term: "Abnormality of the right ventricle"
             *   ... and add to negatedOntologyTerms
             *      term_id: "HP:0001714"
             *      term: "Ventricular hypertrophy"
             * </pre>
             *
             * <code>repeated .OntologyTerm negated_ontology_terms = 3;</code>
             */
            public Builder addNegatedOntologyTerms(Shared.OntologyTerm value) {
                if (negatedOntologyTermsBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureNegatedOntologyTermsIsMutable();
                    negatedOntologyTerms_.add(value);
                    onChanged();
                } else {
                    negatedOntologyTermsBuilder_.addMessage(value);
                }
                return this;
            }

            /**
             * <pre>
             * negatedOntologyTerms are used to describe features which are explicitely
             * not part of the BioCharacteristic.
             * Example: For a phenotype
             *      description: "Bilateral ventricle anomalies (but not hypertrophy)"
             *   ...  one could use the ontologyTerms
             *      term_id: "HP:0001711"
             *      term: "Abnormality of the left ventricle"
             *      id: "HP:0001707"
             *      term: "Abnormality of the right ventricle"
             *   ... and add to negatedOntologyTerms
             *      term_id: "HP:0001714"
             *      term: "Ventricular hypertrophy"
             * </pre>
             *
             * <code>repeated .OntologyTerm negated_ontology_terms = 3;</code>
             */
            public Builder addNegatedOntologyTerms(
                    int index, Shared.OntologyTerm value) {
                if (negatedOntologyTermsBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureNegatedOntologyTermsIsMutable();
                    negatedOntologyTerms_.add(index, value);
                    onChanged();
                } else {
                    negatedOntologyTermsBuilder_.addMessage(index, value);
                }
                return this;
            }

            /**
             * <pre>
             * negatedOntologyTerms are used to describe features which are explicitely
             * not part of the BioCharacteristic.
             * Example: For a phenotype
             *      description: "Bilateral ventricle anomalies (but not hypertrophy)"
             *   ...  one could use the ontologyTerms
             *      term_id: "HP:0001711"
             *      term: "Abnormality of the left ventricle"
             *      id: "HP:0001707"
             *      term: "Abnormality of the right ventricle"
             *   ... and add to negatedOntologyTerms
             *      term_id: "HP:0001714"
             *      term: "Ventricular hypertrophy"
             * </pre>
             *
             * <code>repeated .OntologyTerm negated_ontology_terms = 3;</code>
             */
            public Builder addNegatedOntologyTerms(
                    Shared.OntologyTerm.Builder builderForValue) {
                if (negatedOntologyTermsBuilder_ == null) {
                    ensureNegatedOntologyTermsIsMutable();
                    negatedOntologyTerms_.add(builderForValue.build());
                    onChanged();
                } else {
                    negatedOntologyTermsBuilder_.addMessage(builderForValue.build());
                }
                return this;
            }

            /**
             * <pre>
             * negatedOntologyTerms are used to describe features which are explicitely
             * not part of the BioCharacteristic.
             * Example: For a phenotype
             *      description: "Bilateral ventricle anomalies (but not hypertrophy)"
             *   ...  one could use the ontologyTerms
             *      term_id: "HP:0001711"
             *      term: "Abnormality of the left ventricle"
             *      id: "HP:0001707"
             *      term: "Abnormality of the right ventricle"
             *   ... and add to negatedOntologyTerms
             *      term_id: "HP:0001714"
             *      term: "Ventricular hypertrophy"
             * </pre>
             *
             * <code>repeated .OntologyTerm negated_ontology_terms = 3;</code>
             */
            public Builder addNegatedOntologyTerms(
                    int index, Shared.OntologyTerm.Builder builderForValue) {
                if (negatedOntologyTermsBuilder_ == null) {
                    ensureNegatedOntologyTermsIsMutable();
                    negatedOntologyTerms_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    negatedOntologyTermsBuilder_.addMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <pre>
             * negatedOntologyTerms are used to describe features which are explicitely
             * not part of the BioCharacteristic.
             * Example: For a phenotype
             *      description: "Bilateral ventricle anomalies (but not hypertrophy)"
             *   ...  one could use the ontologyTerms
             *      term_id: "HP:0001711"
             *      term: "Abnormality of the left ventricle"
             *      id: "HP:0001707"
             *      term: "Abnormality of the right ventricle"
             *   ... and add to negatedOntologyTerms
             *      term_id: "HP:0001714"
             *      term: "Ventricular hypertrophy"
             * </pre>
             *
             * <code>repeated .OntologyTerm negated_ontology_terms = 3;</code>
             */
            public Builder addAllNegatedOntologyTerms(
                    Iterable<? extends Shared.OntologyTerm> values) {
                if (negatedOntologyTermsBuilder_ == null) {
                    ensureNegatedOntologyTermsIsMutable();
                    com.google.protobuf.AbstractMessageLite.Builder.addAll(
                            values, negatedOntologyTerms_);
                    onChanged();
                } else {
                    negatedOntologyTermsBuilder_.addAllMessages(values);
                }
                return this;
            }

            /**
             * <pre>
             * negatedOntologyTerms are used to describe features which are explicitely
             * not part of the BioCharacteristic.
             * Example: For a phenotype
             *      description: "Bilateral ventricle anomalies (but not hypertrophy)"
             *   ...  one could use the ontologyTerms
             *      term_id: "HP:0001711"
             *      term: "Abnormality of the left ventricle"
             *      id: "HP:0001707"
             *      term: "Abnormality of the right ventricle"
             *   ... and add to negatedOntologyTerms
             *      term_id: "HP:0001714"
             *      term: "Ventricular hypertrophy"
             * </pre>
             *
             * <code>repeated .OntologyTerm negated_ontology_terms = 3;</code>
             */
            public Builder clearNegatedOntologyTerms() {
                if (negatedOntologyTermsBuilder_ == null) {
                    negatedOntologyTerms_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000004);
                    onChanged();
                } else {
                    negatedOntologyTermsBuilder_.clear();
                }
                return this;
            }

            /**
             * <pre>
             * negatedOntologyTerms are used to describe features which are explicitely
             * not part of the BioCharacteristic.
             * Example: For a phenotype
             *      description: "Bilateral ventricle anomalies (but not hypertrophy)"
             *   ...  one could use the ontologyTerms
             *      term_id: "HP:0001711"
             *      term: "Abnormality of the left ventricle"
             *      id: "HP:0001707"
             *      term: "Abnormality of the right ventricle"
             *   ... and add to negatedOntologyTerms
             *      term_id: "HP:0001714"
             *      term: "Ventricular hypertrophy"
             * </pre>
             *
             * <code>repeated .OntologyTerm negated_ontology_terms = 3;</code>
             */
            public Builder removeNegatedOntologyTerms(int index) {
                if (negatedOntologyTermsBuilder_ == null) {
                    ensureNegatedOntologyTermsIsMutable();
                    negatedOntologyTerms_.remove(index);
                    onChanged();
                } else {
                    negatedOntologyTermsBuilder_.remove(index);
                }
                return this;
            }

            /**
             * <pre>
             * negatedOntologyTerms are used to describe features which are explicitely
             * not part of the BioCharacteristic.
             * Example: For a phenotype
             *      description: "Bilateral ventricle anomalies (but not hypertrophy)"
             *   ...  one could use the ontologyTerms
             *      term_id: "HP:0001711"
             *      term: "Abnormality of the left ventricle"
             *      id: "HP:0001707"
             *      term: "Abnormality of the right ventricle"
             *   ... and add to negatedOntologyTerms
             *      term_id: "HP:0001714"
             *      term: "Ventricular hypertrophy"
             * </pre>
             *
             * <code>repeated .OntologyTerm negated_ontology_terms = 3;</code>
             */
            public Shared.OntologyTerm.Builder getNegatedOntologyTermsBuilder(
                    int index) {
                return getNegatedOntologyTermsFieldBuilder().getBuilder(index);
            }

            /**
             * <pre>
             * negatedOntologyTerms are used to describe features which are explicitely
             * not part of the BioCharacteristic.
             * Example: For a phenotype
             *      description: "Bilateral ventricle anomalies (but not hypertrophy)"
             *   ...  one could use the ontologyTerms
             *      term_id: "HP:0001711"
             *      term: "Abnormality of the left ventricle"
             *      id: "HP:0001707"
             *      term: "Abnormality of the right ventricle"
             *   ... and add to negatedOntologyTerms
             *      term_id: "HP:0001714"
             *      term: "Ventricular hypertrophy"
             * </pre>
             *
             * <code>repeated .OntologyTerm negated_ontology_terms = 3;</code>
             */
            public Shared.OntologyTermOrBuilder getNegatedOntologyTermsOrBuilder(
                    int index) {
                if (negatedOntologyTermsBuilder_ == null) {
                    return negatedOntologyTerms_.get(index);
                } else {
                    return negatedOntologyTermsBuilder_.getMessageOrBuilder(index);
                }
            }

            /**
             * <pre>
             * negatedOntologyTerms are used to describe features which are explicitely
             * not part of the BioCharacteristic.
             * Example: For a phenotype
             *      description: "Bilateral ventricle anomalies (but not hypertrophy)"
             *   ...  one could use the ontologyTerms
             *      term_id: "HP:0001711"
             *      term: "Abnormality of the left ventricle"
             *      id: "HP:0001707"
             *      term: "Abnormality of the right ventricle"
             *   ... and add to negatedOntologyTerms
             *      term_id: "HP:0001714"
             *      term: "Ventricular hypertrophy"
             * </pre>
             *
             * <code>repeated .OntologyTerm negated_ontology_terms = 3;</code>
             */
            public java.util.List<? extends Shared.OntologyTermOrBuilder>
            getNegatedOntologyTermsOrBuilderList() {
                if (negatedOntologyTermsBuilder_ != null) {
                    return negatedOntologyTermsBuilder_.getMessageOrBuilderList();
                } else {
                    return java.util.Collections.unmodifiableList(negatedOntologyTerms_);
                }
            }

            /**
             * <pre>
             * negatedOntologyTerms are used to describe features which are explicitely
             * not part of the BioCharacteristic.
             * Example: For a phenotype
             *      description: "Bilateral ventricle anomalies (but not hypertrophy)"
             *   ...  one could use the ontologyTerms
             *      term_id: "HP:0001711"
             *      term: "Abnormality of the left ventricle"
             *      id: "HP:0001707"
             *      term: "Abnormality of the right ventricle"
             *   ... and add to negatedOntologyTerms
             *      term_id: "HP:0001714"
             *      term: "Ventricular hypertrophy"
             * </pre>
             *
             * <code>repeated .OntologyTerm negated_ontology_terms = 3;</code>
             */
            public Shared.OntologyTerm.Builder addNegatedOntologyTermsBuilder() {
                return getNegatedOntologyTermsFieldBuilder().addBuilder(
                        Shared.OntologyTerm.getDefaultInstance());
            }

            /**
             * <pre>
             * negatedOntologyTerms are used to describe features which are explicitely
             * not part of the BioCharacteristic.
             * Example: For a phenotype
             *      description: "Bilateral ventricle anomalies (but not hypertrophy)"
             *   ...  one could use the ontologyTerms
             *      term_id: "HP:0001711"
             *      term: "Abnormality of the left ventricle"
             *      id: "HP:0001707"
             *      term: "Abnormality of the right ventricle"
             *   ... and add to negatedOntologyTerms
             *      term_id: "HP:0001714"
             *      term: "Ventricular hypertrophy"
             * </pre>
             *
             * <code>repeated .OntologyTerm negated_ontology_terms = 3;</code>
             */
            public Shared.OntologyTerm.Builder addNegatedOntologyTermsBuilder(
                    int index) {
                return getNegatedOntologyTermsFieldBuilder().addBuilder(
                        index, Shared.OntologyTerm.getDefaultInstance());
            }

            /**
             * <pre>
             * negatedOntologyTerms are used to describe features which are explicitely
             * not part of the BioCharacteristic.
             * Example: For a phenotype
             *      description: "Bilateral ventricle anomalies (but not hypertrophy)"
             *   ...  one could use the ontologyTerms
             *      term_id: "HP:0001711"
             *      term: "Abnormality of the left ventricle"
             *      id: "HP:0001707"
             *      term: "Abnormality of the right ventricle"
             *   ... and add to negatedOntologyTerms
             *      term_id: "HP:0001714"
             *      term: "Ventricular hypertrophy"
             * </pre>
             *
             * <code>repeated .OntologyTerm negated_ontology_terms = 3;</code>
             */
            public java.util.List<Shared.OntologyTerm.Builder>
            getNegatedOntologyTermsBuilderList() {
                return getNegatedOntologyTermsFieldBuilder().getBuilderList();
            }

            private com.google.protobuf.RepeatedFieldBuilderV3<
                    Shared.OntologyTerm, Shared.OntologyTerm.Builder, Shared.OntologyTermOrBuilder>
            getNegatedOntologyTermsFieldBuilder() {
                if (negatedOntologyTermsBuilder_ == null) {
                    negatedOntologyTermsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
                            Shared.OntologyTerm, Shared.OntologyTerm.Builder, Shared.OntologyTermOrBuilder>(
                            negatedOntologyTerms_,
                            ((bitField0_ & 0x00000004) == 0x00000004),
                            getParentForChildren(),
                            isClean());
                    negatedOntologyTerms_ = null;
                }
                return negatedOntologyTermsBuilder_;
            }

            private Object scope_ = "";

            /**
             * <pre>
             * Logical scope of this BioCharacteristic. Typical examples
             * could be "phenotype", "disease", "observation", "source".
             * TODO:  This may be modified into an enumeration or expressed through
             *        an OntologyTerm.
             * </pre>
             *
             * <code>string scope = 4;</code>
             */
            public String getScope() {
                Object ref = scope_;
                if (!(ref instanceof String)) {
                    com.google.protobuf.ByteString bs =
                            (com.google.protobuf.ByteString) ref;
                    String s = bs.toStringUtf8();
                    scope_ = s;
                    return s;
                } else {
                    return (String) ref;
                }
            }

            /**
             * <pre>
             * Logical scope of this BioCharacteristic. Typical examples
             * could be "phenotype", "disease", "observation", "source".
             * TODO:  This may be modified into an enumeration or expressed through
             *        an OntologyTerm.
             * </pre>
             *
             * <code>string scope = 4;</code>
             */
            public com.google.protobuf.ByteString
            getScopeBytes() {
                Object ref = scope_;
                if (ref instanceof String) {
                    com.google.protobuf.ByteString b =
                            com.google.protobuf.ByteString.copyFromUtf8(
                                    (String) ref);
                    scope_ = b;
                    return b;
                } else {
                    return (com.google.protobuf.ByteString) ref;
                }
            }

            /**
             * <pre>
             * Logical scope of this BioCharacteristic. Typical examples
             * could be "phenotype", "disease", "observation", "source".
             * TODO:  This may be modified into an enumeration or expressed through
             *        an OntologyTerm.
             * </pre>
             *
             * <code>string scope = 4;</code>
             */
            public Builder setScope(
                    String value) {
                if (value == null) {
                    throw new NullPointerException();
                }

                scope_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * Logical scope of this BioCharacteristic. Typical examples
             * could be "phenotype", "disease", "observation", "source".
             * TODO:  This may be modified into an enumeration or expressed through
             *        an OntologyTerm.
             * </pre>
             *
             * <code>string scope = 4;</code>
             */
            public Builder clearScope() {

                scope_ = getDefaultInstance().getScope();
                onChanged();
                return this;
            }

            /**
             * <pre>
             * Logical scope of this BioCharacteristic. Typical examples
             * could be "phenotype", "disease", "observation", "source".
             * TODO:  This may be modified into an enumeration or expressed through
             *        an OntologyTerm.
             * </pre>
             *
             * <code>string scope = 4;</code>
             */
            public Builder setScopeBytes(
                    com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                checkByteStringIsUtf8(value);

                scope_ = value;
                onChanged();
                return this;
            }

            public final Builder setUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }

            public final Builder mergeUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }


            // @@protoc_insertion_point(builder_scope:BioCharacteristic)
        }

        // @@protoc_insertion_point(class_scope:BioCharacteristic)
        private static final Biometadata.BioCharacteristic DEFAULT_INSTANCE;

        static {
            DEFAULT_INSTANCE = new Biometadata.BioCharacteristic();
        }

        public static Biometadata.BioCharacteristic getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        private static final com.google.protobuf.Parser<BioCharacteristic>
                PARSER = new com.google.protobuf.AbstractParser<BioCharacteristic>() {
            public BioCharacteristic parsePartialFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return new BioCharacteristic(input, extensionRegistry);
            }
        };

        public static com.google.protobuf.Parser<BioCharacteristic> parser() {
            return PARSER;
        }

        @Override
        public com.google.protobuf.Parser<BioCharacteristic> getParserForType() {
            return PARSER;
        }

        public Biometadata.BioCharacteristic getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

    }

    private static final com.google.protobuf.Descriptors.Descriptor
            internal_static_ga4ghmetadata_Individual_descriptor;
    private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_ga4ghmetadata_Individual_fieldAccessorTable;
    private static final com.google.protobuf.Descriptors.Descriptor
            internal_static_ga4ghmetadata_Biosample_descriptor;
    private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_ga4ghmetadata_Biosample_fieldAccessorTable;
    private static final com.google.protobuf.Descriptors.Descriptor
            internal_static_ga4ghmetadata_Age_descriptor;
    private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_ga4ghmetadata_Age_fieldAccessorTable;
    private static final com.google.protobuf.Descriptors.Descriptor
            internal_static_ga4ghmetadata_BioCharacteristic_descriptor;
    private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_ga4ghmetadata_BioCharacteristic_fieldAccessorTable;

    public static com.google.protobuf.Descriptors.FileDescriptor
    getDescriptor() {
        return descriptor;
    }

    private static com.google.protobuf.Descriptors.FileDescriptor
            descriptor;

    static {
        String[] descriptorData = {
                "\n\021biometadata.proto\022\rga4ghmetadata\032\033ga4g" +
                        "h-metadata/shared.proto\"\246\003\n\nIndividual\022\n" +
                        "\n\002id\030\001 \001(\t\022\022\n\ndataset_id\030\002 \001(\t\022\014\n\004name\030\003" +
                        " \001(\t\022\023\n\013description\030\004 \001(\t\022=\n\023bio_charact" +
                        "eristics\030\t \003(\0132 .BioCharac" +
                        "teristic\022\017\n\007created\030\005 \001(\t\022\017\n\007updated\030\006 \001" +
                        "(\t\022,\n\007species\030\007 \001(\0132\033.Onto" +
                        "logyTerm\022(\n\003sex\030\010 \001(\0132\033.On" +
                        "tologyTerm\022,\n\010location\030\r \001(\0132\032.ga4ghmeta" +
                        "data.GeoLocation\022-\n\nattributes\030\n \001(\0132\031.g",
                "a4ghmetadata.Attributes\022?\n\024external_iden" +
                        "tifiers\030\013 \003(\0132!.ExternalId" +
                        "entifier\"\236\003\n\tBiosample\022\n\n\002id\030\001 \001(\t\022\022\n\nda" +
                        "taset_id\030\002 \001(\t\022\014\n\004name\030\003 \001(\t\022\023\n\013descript" +
                        "ion\030\004 \001(\t\022=\n\023bio_characteristics\030\005 \003(\0132 " +
                        ".BioCharacteristic\022\017\n\007crea" +
                        "ted\030\006 \001(\t\022\017\n\007updated\030\007 \001(\t\022\025\n\rindividual" +
                        "_id\030\010 \001(\t\022-\n\nattributes\030\n \001(\0132\031.ga4ghmet" +
                        "adata.Attributes\022?\n\024external_identifiers" +
                        "\030\013 \003(\0132!.ExternalIdentifie",
                "r\0228\n\034individual_age_at_collection\030\014 \001(\0132" +
                        "\022.Age\022,\n\010location\030\r \001(\0132\032." +
                        "GeoLocation\"B\n\003Age\022\013\n\003age\030" +
                        "\001 \001(\t\022.\n\tage_class\030\002 \001(\0132\033.ga4ghmetadata" +
                        ".OntologyTerm\"\251\001\n\021BioCharacteristic\022\023\n\013d" +
                        "escription\030\001 \001(\t\0223\n\016ontology_terms\030\002 \003(\013" +
                        "2\033.OntologyTerm\022;\n\026negated" +
                        "_ontology_terms\030\003 \003(\0132\033.On" +
                        "tologyTerm\022\r\n\005scope\030\004 \001(\tb\006proto3"
        };
        com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
                new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
                    public com.google.protobuf.ExtensionRegistry assignDescriptors(
                            com.google.protobuf.Descriptors.FileDescriptor root) {
                        descriptor = root;
                        return null;
                    }
                };
        com.google.protobuf.Descriptors.FileDescriptor
                .internalBuildGeneratedFileFrom(descriptorData,
                        new com.google.protobuf.Descriptors.FileDescriptor[]{
                                Shared.getDescriptor(),
                        }, assigner);
        internal_static_ga4ghmetadata_Individual_descriptor =
                getDescriptor().getMessageTypes().get(0);
        internal_static_ga4ghmetadata_Individual_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
                internal_static_ga4ghmetadata_Individual_descriptor,
                new String[]{"Id", "DatasetId", "Name", "Description", "BioCharacteristics", "Created", "Updated", "Species", "Sex", "Location", "Attributes", "ExternalIdentifiers",});
        internal_static_ga4ghmetadata_Biosample_descriptor =
                getDescriptor().getMessageTypes().get(1);
        internal_static_ga4ghmetadata_Biosample_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
                internal_static_ga4ghmetadata_Biosample_descriptor,
                new String[]{"Id", "DatasetId", "Name", "Description", "BioCharacteristics", "Created", "Updated", "IndividualId", "Attributes", "ExternalIdentifiers", "IndividualAgeAtCollection", "Location",});
        internal_static_ga4ghmetadata_Age_descriptor =
                getDescriptor().getMessageTypes().get(2);
        internal_static_ga4ghmetadata_Age_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
                internal_static_ga4ghmetadata_Age_descriptor,
                new String[]{"Age", "AgeClass",});
        internal_static_ga4ghmetadata_BioCharacteristic_descriptor =
                getDescriptor().getMessageTypes().get(3);
        internal_static_ga4ghmetadata_BioCharacteristic_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
                internal_static_ga4ghmetadata_BioCharacteristic_descriptor,
                new String[]{"Description", "OntologyTerms", "NegatedOntologyTerms", "Scope",});
        Shared.getDescriptor();
    }

    // @@protoc_insertion_point(outer_class_scope)
}
